"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-resize-detector";
exports.ids = ["vendor-chunks/react-resize-detector"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-resize-detector/build/index.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-resize-detector/build/index.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ResizeDetector),\n/* harmony export */   useResizeDetector: () => (/* binding */ useResizeDetector),\n/* harmony export */   withResizeDetector: () => (/* binding */ withResizeDetector)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__);\n\n\n /******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */ \n/* global Reflect, Promise */ var extendStatics = function(d, b) {\n    extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(d, b) {\n        d.__proto__ = b;\n    } || function(d, b) {\n        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n};\nfunction __extends(d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\nvar __assign = function() {\n    __assign = Object.assign || function __assign(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nfunction __rest(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n}\nvar commonjsGlobal = typeof globalThis !== \"undefined\" ? globalThis :  false ? 0 : typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : {}; /**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */ \nfunction isObject$3(value) {\n    var type = typeof value;\n    return value != null && (type == \"object\" || type == \"function\");\n}\nvar isObject_1 = isObject$3; /** Detect free variable `global` from Node.js. */ \nvar freeGlobal$1 = typeof commonjsGlobal == \"object\" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\nvar _freeGlobal = freeGlobal$1;\nvar freeGlobal = _freeGlobal;\n/** Detect free variable `self`. */ var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n/** Used as a reference to the global object. */ var root$2 = freeGlobal || freeSelf || Function(\"return this\")();\nvar _root = root$2;\nvar root$1 = _root;\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */ var now$1 = function() {\n    return root$1.Date.now();\n};\nvar now_1 = now$1; /** Used to match a single whitespace character. */ \nvar reWhitespace = /\\s/;\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */ function trimmedEndIndex$1(string) {\n    var index = string.length;\n    while(index-- && reWhitespace.test(string.charAt(index))){}\n    return index;\n}\nvar _trimmedEndIndex = trimmedEndIndex$1;\nvar trimmedEndIndex = _trimmedEndIndex;\n/** Used to match leading whitespace. */ var reTrimStart = /^\\s+/;\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */ function baseTrim$1(string) {\n    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, \"\") : string;\n}\nvar _baseTrim = baseTrim$1;\nvar root = _root;\n/** Built-in value references. */ var Symbol$2 = root.Symbol;\nvar _Symbol = Symbol$2;\nvar Symbol$1 = _Symbol;\n/** Used for built-in method references. */ var objectProto$1 = Object.prototype;\n/** Used to check objects for own properties. */ var hasOwnProperty = objectProto$1.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString$1 = objectProto$1.toString;\n/** Built-in value references. */ var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */ function getRawTag$1(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag$1), tag = value[symToStringTag$1];\n    try {\n        value[symToStringTag$1] = undefined;\n        var unmasked = true;\n    } catch (e) {}\n    var result = nativeObjectToString$1.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag$1] = tag;\n        } else {\n            delete value[symToStringTag$1];\n        }\n    }\n    return result;\n}\nvar _getRawTag = getRawTag$1; /** Used for built-in method references. */ \nvar objectProto = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */ var nativeObjectToString = objectProto.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */ function objectToString$1(value) {\n    return nativeObjectToString.call(value);\n}\nvar _objectToString = objectToString$1;\nvar Symbol = _Symbol, getRawTag = _getRawTag, objectToString = _objectToString;\n/** `Object#toString` result references. */ var nullTag = \"[object Null]\", undefinedTag = \"[object Undefined]\";\n/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */ function baseGetTag$1(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\nvar _baseGetTag = baseGetTag$1; /**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */ \nfunction isObjectLike$1(value) {\n    return value != null && typeof value == \"object\";\n}\nvar isObjectLike_1 = isObjectLike$1;\nvar baseGetTag = _baseGetTag, isObjectLike = isObjectLike_1;\n/** `Object#toString` result references. */ var symbolTag = \"[object Symbol]\";\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */ function isSymbol$1(value) {\n    return typeof value == \"symbol\" || isObjectLike(value) && baseGetTag(value) == symbolTag;\n}\nvar isSymbol_1 = isSymbol$1;\nvar baseTrim = _baseTrim, isObject$2 = isObject_1, isSymbol = isSymbol_1;\n/** Used as references for various `Number` constants. */ var NAN = 0 / 0;\n/** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */ var freeParseInt = parseInt;\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */ function toNumber$1(value) {\n    if (typeof value == \"number\") {\n        return value;\n    }\n    if (isSymbol(value)) {\n        return NAN;\n    }\n    if (isObject$2(value)) {\n        var other = typeof value.valueOf == \"function\" ? value.valueOf() : value;\n        value = isObject$2(other) ? other + \"\" : other;\n    }\n    if (typeof value != \"string\") {\n        return value === 0 ? value : +value;\n    }\n    value = baseTrim(value);\n    var isBinary = reIsBinary.test(value);\n    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\nvar toNumber_1 = toNumber$1;\nvar isObject$1 = isObject_1, now = now_1, toNumber = toNumber_1;\n/** Error message constants. */ var FUNC_ERROR_TEXT$1 = \"Expected a function\";\n/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeMax = Math.max, nativeMin = Math.min;\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */ function debounce$1(func, wait, options) {\n    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;\n    if (typeof func != \"function\") {\n        throw new TypeError(FUNC_ERROR_TEXT$1);\n    }\n    wait = toNumber(wait) || 0;\n    if (isObject$1(options)) {\n        leading = !!options.leading;\n        maxing = \"maxWait\" in options;\n        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n        trailing = \"trailing\" in options ? !!options.trailing : trailing;\n    }\n    function invokeFunc(time) {\n        var args = lastArgs, thisArg = lastThis;\n        lastArgs = lastThis = undefined;\n        lastInvokeTime = time;\n        result = func.apply(thisArg, args);\n        return result;\n    }\n    function leadingEdge(time) {\n        // Reset any `maxWait` timer.\n        lastInvokeTime = time;\n        // Start the timer for the trailing edge.\n        timerId = setTimeout(timerExpired, wait);\n        // Invoke the leading edge.\n        return leading ? invokeFunc(time) : result;\n    }\n    function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;\n        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n    }\n    function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n        // it as the trailing edge, or we've hit the `maxWait` limit.\n        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n    }\n    function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n            return trailingEdge(time);\n        }\n        // Restart the timer.\n        timerId = setTimeout(timerExpired, remainingWait(time));\n    }\n    function trailingEdge(time) {\n        timerId = undefined;\n        // Only invoke if we have `lastArgs` which means `func` has been\n        // debounced at least once.\n        if (trailing && lastArgs) {\n            return invokeFunc(time);\n        }\n        lastArgs = lastThis = undefined;\n        return result;\n    }\n    function cancel() {\n        if (timerId !== undefined) {\n            clearTimeout(timerId);\n        }\n        lastInvokeTime = 0;\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\n    }\n    function flush() {\n        return timerId === undefined ? result : trailingEdge(now());\n    }\n    function debounced() {\n        var time = now(), isInvoking = shouldInvoke(time);\n        lastArgs = arguments;\n        lastThis = this;\n        lastCallTime = time;\n        if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime);\n            }\n            if (maxing) {\n                // Handle invocations in a tight loop.\n                clearTimeout(timerId);\n                timerId = setTimeout(timerExpired, wait);\n                return invokeFunc(lastCallTime);\n            }\n        }\n        if (timerId === undefined) {\n            timerId = setTimeout(timerExpired, wait);\n        }\n        return result;\n    }\n    debounced.cancel = cancel;\n    debounced.flush = flush;\n    return debounced;\n}\nvar debounce_1 = debounce$1;\nvar debounce = debounce_1, isObject = isObject_1;\n/** Error message constants. */ var FUNC_ERROR_TEXT = \"Expected a function\";\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */ function throttle(func, wait, options) {\n    var leading = true, trailing = true;\n    if (typeof func != \"function\") {\n        throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    if (isObject(options)) {\n        leading = \"leading\" in options ? !!options.leading : leading;\n        trailing = \"trailing\" in options ? !!options.trailing : trailing;\n    }\n    return debounce(func, wait, {\n        \"leading\": leading,\n        \"maxWait\": wait,\n        \"trailing\": trailing\n    });\n}\nvar throttle_1 = throttle;\nvar patchResizeHandler = function(resizeCallback, refreshMode, refreshRate, refreshOptions) {\n    switch(refreshMode){\n        case \"debounce\":\n            return debounce_1(resizeCallback, refreshRate, refreshOptions);\n        case \"throttle\":\n            return throttle_1(resizeCallback, refreshRate, refreshOptions);\n        default:\n            return resizeCallback;\n    }\n};\nvar isFunction = function(fn) {\n    return typeof fn === \"function\";\n};\nvar isSSR = function() {\n    return \"undefined\" === \"undefined\";\n};\nvar isDOMElement = function(element) {\n    return element instanceof Element || element instanceof HTMLDocument;\n};\nvar createNotifier = function(onResize, setSize, handleWidth, handleHeight) {\n    return function(_a) {\n        var width = _a.width, height = _a.height;\n        setSize(function(prev) {\n            if (prev.width === width && prev.height === height) {\n                // skip if dimensions haven't changed\n                return prev;\n            }\n            if (prev.width === width && !handleHeight || prev.height === height && !handleWidth) {\n                // process `handleHeight/handleWidth` props\n                return prev;\n            }\n            if (onResize && isFunction(onResize)) {\n                onResize(width, height);\n            }\n            return {\n                width: width,\n                height: height\n            };\n        });\n    };\n};\nvar ResizeDetector = /** @class */ function(_super) {\n    __extends(ResizeDetector, _super);\n    function ResizeDetector(props) {\n        var _this = _super.call(this, props) || this;\n        _this.cancelHandler = function() {\n            if (_this.resizeHandler && _this.resizeHandler.cancel) {\n                // cancel debounced handler\n                _this.resizeHandler.cancel();\n                _this.resizeHandler = null;\n            }\n        };\n        _this.attachObserver = function() {\n            var _a = _this.props, targetRef = _a.targetRef, observerOptions = _a.observerOptions;\n            if (isSSR()) {\n                return;\n            }\n            if (targetRef && targetRef.current) {\n                _this.targetRef.current = targetRef.current;\n            }\n            var element = _this.getElement();\n            if (!element) {\n                // can't find element to observe\n                return;\n            }\n            if (_this.observableElement && _this.observableElement === element) {\n                // element is already observed\n                return;\n            }\n            _this.observableElement = element;\n            _this.resizeObserver.observe(element, observerOptions);\n        };\n        _this.getElement = function() {\n            var _a = _this.props, querySelector = _a.querySelector, targetDomEl = _a.targetDomEl;\n            if (isSSR()) return null;\n            // in case we pass a querySelector\n            if (querySelector) return document.querySelector(querySelector);\n            // in case we pass a DOM element\n            if (targetDomEl && isDOMElement(targetDomEl)) return targetDomEl;\n            // in case we pass a React ref using React.createRef()\n            if (_this.targetRef && isDOMElement(_this.targetRef.current)) return _this.targetRef.current;\n            // the worse case when we don't receive any information from the parent and the library doesn't add any wrappers\n            // we have to use a deprecated `findDOMNode` method in order to find a DOM element to attach to\n            var currentElement = (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.findDOMNode)(_this);\n            if (!currentElement) return null;\n            var renderType = _this.getRenderType();\n            switch(renderType){\n                case \"renderProp\":\n                    return currentElement;\n                case \"childFunction\":\n                    return currentElement;\n                case \"child\":\n                    return currentElement;\n                case \"childArray\":\n                    return currentElement;\n                default:\n                    return currentElement.parentElement;\n            }\n        };\n        _this.createResizeHandler = function(entries) {\n            var _a = _this.props, _b = _a.handleWidth, handleWidth = _b === void 0 ? true : _b, _c = _a.handleHeight, handleHeight = _c === void 0 ? true : _c, onResize = _a.onResize;\n            if (!handleWidth && !handleHeight) return;\n            var notifyResize = createNotifier(onResize, _this.setState.bind(_this), handleWidth, handleHeight);\n            entries.forEach(function(entry) {\n                var _a = entry && entry.contentRect || {}, width = _a.width, height = _a.height;\n                var shouldSetSize = !_this.skipOnMount && !isSSR();\n                if (shouldSetSize) {\n                    notifyResize({\n                        width: width,\n                        height: height\n                    });\n                }\n                _this.skipOnMount = false;\n            });\n        };\n        _this.getRenderType = function() {\n            var _a = _this.props, render = _a.render, children = _a.children;\n            if (isFunction(render)) {\n                // DEPRECATED. Use `Child Function Pattern` instead\n                return \"renderProp\";\n            }\n            if (isFunction(children)) {\n                return \"childFunction\";\n            }\n            if (/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.isValidElement)(children)) {\n                return \"child\";\n            }\n            if (Array.isArray(children)) {\n                // DEPRECATED. Wrap children with a single parent\n                return \"childArray\";\n            }\n            // DEPRECATED. Use `Child Function Pattern` instead\n            return \"parent\";\n        };\n        var skipOnMount = props.skipOnMount, refreshMode = props.refreshMode, _a = props.refreshRate, refreshRate = _a === void 0 ? 1000 : _a, refreshOptions = props.refreshOptions;\n        _this.state = {\n            width: undefined,\n            height: undefined\n        };\n        _this.skipOnMount = skipOnMount;\n        _this.targetRef = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n        _this.observableElement = null;\n        if (isSSR()) {\n            return _this;\n        }\n        _this.resizeHandler = patchResizeHandler(_this.createResizeHandler, refreshMode, refreshRate, refreshOptions);\n        _this.resizeObserver = new window.ResizeObserver(_this.resizeHandler);\n        return _this;\n    }\n    ResizeDetector.prototype.componentDidMount = function() {\n        this.attachObserver();\n    };\n    ResizeDetector.prototype.componentDidUpdate = function() {\n        this.attachObserver();\n    };\n    ResizeDetector.prototype.componentWillUnmount = function() {\n        if (isSSR()) {\n            return;\n        }\n        this.observableElement = null;\n        this.resizeObserver.disconnect();\n        this.cancelHandler();\n    };\n    ResizeDetector.prototype.render = function() {\n        var _a = this.props, render = _a.render, children = _a.children, _b = _a.nodeType, WrapperTag = _b === void 0 ? \"div\" : _b;\n        var _c = this.state, width = _c.width, height = _c.height;\n        var childProps = {\n            width: width,\n            height: height,\n            targetRef: this.targetRef\n        };\n        var renderType = this.getRenderType();\n        var typedChildren;\n        switch(renderType){\n            case \"renderProp\":\n                return render && render(childProps);\n            case \"childFunction\":\n                typedChildren = children;\n                return typedChildren(childProps);\n            case \"child\":\n                // @TODO bug prone logic\n                typedChildren = children;\n                if (typedChildren.type && typeof typedChildren.type === \"string\") {\n                    // child is a native DOM elements such as div, span etc\n                    childProps.targetRef;\n                    var nativeProps = __rest(childProps, [\n                        \"targetRef\"\n                    ]);\n                    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(typedChildren, nativeProps);\n                }\n                // class or functional component otherwise\n                return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(typedChildren, childProps);\n            case \"childArray\":\n                typedChildren = children;\n                return typedChildren.map(function(el) {\n                    return !!el && /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.cloneElement)(el, childProps);\n                });\n            default:\n                return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(WrapperTag, null);\n        }\n    };\n    return ResizeDetector;\n}(react__WEBPACK_IMPORTED_MODULE_0__.PureComponent);\nfunction withResizeDetector(ComponentInner, options) {\n    if (options === void 0) {\n        options = {};\n    }\n    var ResizeDetectorHOC = /** @class */ function(_super) {\n        __extends(ResizeDetectorHOC, _super);\n        function ResizeDetectorHOC() {\n            var _this = _super !== null && _super.apply(this, arguments) || this;\n            _this.ref = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createRef)();\n            return _this;\n        }\n        ResizeDetectorHOC.prototype.render = function() {\n            var _a = this.props, forwardedRef = _a.forwardedRef, rest = __rest(_a, [\n                \"forwardedRef\"\n            ]);\n            var targetRef = forwardedRef !== null && forwardedRef !== void 0 ? forwardedRef : this.ref;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ResizeDetector, __assign({}, options, {\n                targetRef: targetRef\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ComponentInner, __assign({\n                targetRef: targetRef\n            }, rest)));\n        };\n        return ResizeDetectorHOC;\n    }(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n    function forwardRefWrapper(props, ref) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ResizeDetectorHOC, __assign({}, props, {\n            forwardedRef: ref\n        }));\n    }\n    var name = ComponentInner.displayName || ComponentInner.name;\n    forwardRefWrapper.displayName = \"withResizeDetector(\".concat(name, \")\");\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(forwardRefWrapper);\n}\nvar useEnhancedEffect = isSSR() ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\nfunction useResizeDetector(props) {\n    if (props === void 0) {\n        props = {};\n    }\n    var _a = props.skipOnMount, skipOnMount = _a === void 0 ? false : _a, refreshMode = props.refreshMode, _b = props.refreshRate, refreshRate = _b === void 0 ? 1000 : _b, refreshOptions = props.refreshOptions, _c = props.handleWidth, handleWidth = _c === void 0 ? true : _c, _d = props.handleHeight, handleHeight = _d === void 0 ? true : _d, targetRef = props.targetRef, observerOptions = props.observerOptions, onResize = props.onResize;\n    var skipResize = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(skipOnMount);\n    var localRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    var ref = targetRef !== null && targetRef !== void 0 ? targetRef : localRef;\n    var resizeHandler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var _e = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        width: undefined,\n        height: undefined\n    }), size = _e[0], setSize = _e[1];\n    useEnhancedEffect(function() {\n        if (isSSR()) {\n            return;\n        }\n        var notifyResize = createNotifier(onResize, setSize, handleWidth, handleHeight);\n        var resizeCallback = function(entries) {\n            if (!handleWidth && !handleHeight) return;\n            entries.forEach(function(entry) {\n                var _a = entry && entry.contentRect || {}, width = _a.width, height = _a.height;\n                var shouldSetSize = !skipResize.current && !isSSR();\n                if (shouldSetSize) {\n                    notifyResize({\n                        width: width,\n                        height: height\n                    });\n                }\n                skipResize.current = false;\n            });\n        };\n        resizeHandler.current = patchResizeHandler(resizeCallback, refreshMode, refreshRate, refreshOptions);\n        var resizeObserver = new window.ResizeObserver(resizeHandler.current);\n        if (ref.current) {\n            // Something wrong with typings here...\n            resizeObserver.observe(ref.current, observerOptions);\n        }\n        return function() {\n            resizeObserver.disconnect();\n            var patchedResizeHandler = resizeHandler.current;\n            if (patchedResizeHandler && patchedResizeHandler.cancel) {\n                patchedResizeHandler.cancel();\n            }\n        };\n    }, [\n        refreshMode,\n        refreshRate,\n        refreshOptions,\n        handleWidth,\n        handleHeight,\n        onResize,\n        observerOptions,\n        ref.current\n    ]);\n    return __assign({\n        ref: ref\n    }, size);\n}\n //# sourceMappingURL=index.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-resize-detector/build/index.esm.js\n");

/***/ })

};
;