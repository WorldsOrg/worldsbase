"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/color2k";
exports.ids = ["vendor-chunks/color2k"];
exports.modules = {

/***/ "(ssr)/./node_modules/color2k/dist/index.exports.import.es.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/color2k/dist/index.exports.import.es.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ColorError: () => (/* binding */ ColorError$1),\n/* harmony export */   adjustHue: () => (/* binding */ adjustHue),\n/* harmony export */   darken: () => (/* binding */ darken),\n/* harmony export */   desaturate: () => (/* binding */ desaturate),\n/* harmony export */   getContrast: () => (/* binding */ getContrast),\n/* harmony export */   getLuminance: () => (/* binding */ getLuminance),\n/* harmony export */   getScale: () => (/* binding */ getScale),\n/* harmony export */   guard: () => (/* binding */ guard),\n/* harmony export */   hasBadContrast: () => (/* binding */ hasBadContrast),\n/* harmony export */   hsla: () => (/* binding */ hsla),\n/* harmony export */   lighten: () => (/* binding */ lighten),\n/* harmony export */   mix: () => (/* binding */ mix),\n/* harmony export */   opacify: () => (/* binding */ opacify),\n/* harmony export */   parseToHsla: () => (/* binding */ parseToHsla),\n/* harmony export */   parseToRgba: () => (/* binding */ parseToRgba),\n/* harmony export */   readableColor: () => (/* binding */ readableColor),\n/* harmony export */   readableColorIsBlack: () => (/* binding */ readableColorIsBlack),\n/* harmony export */   rgba: () => (/* binding */ rgba),\n/* harmony export */   saturate: () => (/* binding */ saturate),\n/* harmony export */   toHex: () => (/* binding */ toHex),\n/* harmony export */   toHsla: () => (/* binding */ toHsla),\n/* harmony export */   toRgba: () => (/* binding */ toRgba),\n/* harmony export */   transparentize: () => (/* binding */ transparentize)\n/* harmony export */ });\n/**\n * A simple guard function:\n *\n * ```js\n * Math.min(Math.max(low, value), high)\n * ```\n */ function guard(low, high, value) {\n    return Math.min(Math.max(low, value), high);\n}\nclass ColorError extends Error {\n    constructor(color){\n        super(`Failed to parse color: \"${color}\"`);\n    }\n}\nvar ColorError$1 = ColorError;\n/**\n * Parses a color into red, gree, blue, alpha parts\n *\n * @param color the input color. Can be a RGB, RBGA, HSL, HSLA, or named color\n */ function parseToRgba(color) {\n    if (typeof color !== \"string\") throw new ColorError$1(color);\n    if (color.trim().toLowerCase() === \"transparent\") return [\n        0,\n        0,\n        0,\n        0\n    ];\n    let normalizedColor = color.trim();\n    normalizedColor = namedColorRegex.test(color) ? nameToHex(color) : color;\n    const reducedHexMatch = reducedHexRegex.exec(normalizedColor);\n    if (reducedHexMatch) {\n        const arr = Array.from(reducedHexMatch).slice(1);\n        return [\n            ...arr.slice(0, 3).map((x)=>parseInt(r(x, 2), 16)),\n            parseInt(r(arr[3] || \"f\", 2), 16) / 255\n        ];\n    }\n    const hexMatch = hexRegex.exec(normalizedColor);\n    if (hexMatch) {\n        const arr = Array.from(hexMatch).slice(1);\n        return [\n            ...arr.slice(0, 3).map((x)=>parseInt(x, 16)),\n            parseInt(arr[3] || \"ff\", 16) / 255\n        ];\n    }\n    const rgbaMatch = rgbaRegex.exec(normalizedColor);\n    if (rgbaMatch) {\n        const arr = Array.from(rgbaMatch).slice(1);\n        return [\n            ...arr.slice(0, 3).map((x)=>parseInt(x, 10)),\n            parseFloat(arr[3] || \"1\")\n        ];\n    }\n    const hslaMatch = hslaRegex.exec(normalizedColor);\n    if (hslaMatch) {\n        const [h, s, l, a] = Array.from(hslaMatch).slice(1).map(parseFloat);\n        if (guard(0, 100, s) !== s) throw new ColorError$1(color);\n        if (guard(0, 100, l) !== l) throw new ColorError$1(color);\n        return [\n            ...hslToRgb(h, s, l),\n            Number.isNaN(a) ? 1 : a\n        ];\n    }\n    throw new ColorError$1(color);\n}\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while(i){\n        hash = hash * 33 ^ str.charCodeAt(--i);\n    }\n    /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed\n   * integers. Since we want the results to be always positive, convert the\n   * signed int to an unsigned by doing an unsigned bitshift. */ return (hash >>> 0) % 2341;\n}\nconst colorToInt = (x)=>parseInt(x.replace(/_/g, \"\"), 36);\nconst compressedColorMap = \"1q29ehhb 1n09sgk7 1kl1ekf_ _yl4zsno 16z9eiv3 1p29lhp8 _bd9zg04 17u0____ _iw9zhe5 _to73___ _r45e31e _7l6g016 _jh8ouiv _zn3qba8 1jy4zshs 11u87k0u 1ro9yvyo 1aj3xael 1gz9zjz0 _3w8l4xo 1bf1ekf_ _ke3v___ _4rrkb__ 13j776yz _646mbhl _nrjr4__ _le6mbhl 1n37ehkb _m75f91n _qj3bzfz 1939yygw 11i5z6x8 _1k5f8xs 1509441m 15t5lwgf _ae2th1n _tg1ugcv 1lp1ugcv 16e14up_ _h55rw7n _ny9yavn _7a11xb_ 1ih442g9 _pv442g9 1mv16xof 14e6y7tu 1oo9zkds 17d1cisi _4v9y70f _y98m8kc 1019pq0v 12o9zda8 _348j4f4 1et50i2o _8epa8__ _ts6senj 1o350i2o 1mi9eiuo 1259yrp0 1ln80gnw _632xcoy 1cn9zldc _f29edu4 1n490c8q _9f9ziet 1b94vk74 _m49zkct 1kz6s73a 1eu9dtog _q58s1rz 1dy9sjiq __u89jo3 _aj5nkwg _ld89jo3 13h9z6wx _qa9z2ii _l119xgq _bs5arju 1hj4nwk9 1qt4nwk9 1ge6wau6 14j9zlcw 11p1edc_ _ms1zcxe _439shk6 _jt9y70f _754zsow 1la40eju _oq5p___ _x279qkz 1fa5r3rv _yd2d9ip _424tcku _8y1di2_ _zi2uabw _yy7rn9h 12yz980_ __39ljp6 1b59zg0x _n39zfzp 1fy9zest _b33k___ _hp9wq92 1il50hz4 _io472ub _lj9z3eo 19z9ykg0 _8t8iu3a 12b9bl4a 1ak5yw0o _896v4ku _tb8k8lv _s59zi6t _c09ze0p 1lg80oqn 1id9z8wb _238nba5 1kq6wgdi _154zssg _tn3zk49 _da9y6tc 1sg7cv4f _r12jvtt 1gq5fmkz 1cs9rvci _lp9jn1c _xw1tdnb 13f9zje6 16f6973h _vo7ir40 _bt5arjf _rc45e4t _hr4e100 10v4e100 _hc9zke2 _w91egv_ _sj2r1kk 13c87yx8 _vqpds__ _ni8ggk8 _tj9yqfb 1ia2j4r4 _7x9b10u 1fc9ld4j 1eq9zldr _5j9lhpx _ez9zl6o _md61fzm\".split(\" \").reduce((acc, next)=>{\n    const key = colorToInt(next.substring(0, 3));\n    const hex = colorToInt(next.substring(3)).toString(16);\n    // NOTE: padStart could be used here but it breaks Node 6 compat\n    // https://github.com/ricokahler/color2k/issues/351\n    let prefix = \"\";\n    for(let i = 0; i < 6 - hex.length; i++){\n        prefix += \"0\";\n    }\n    acc[key] = `${prefix}${hex}`;\n    return acc;\n}, {});\n/**\n * Checks if a string is a CSS named color and returns its equivalent hex value, otherwise returns the original color.\n */ function nameToHex(color) {\n    const normalizedColorName = color.toLowerCase().trim();\n    const result = compressedColorMap[hash(normalizedColorName)];\n    if (!result) throw new ColorError$1(color);\n    return `#${result}`;\n}\nconst r = (str, amount)=>Array.from(Array(amount)).map(()=>str).join(\"\");\nconst reducedHexRegex = new RegExp(`^#${r(\"([a-f0-9])\", 3)}([a-f0-9])?$`, \"i\");\nconst hexRegex = new RegExp(`^#${r(\"([a-f0-9]{2})\", 3)}([a-f0-9]{2})?$`, \"i\");\nconst rgbaRegex = new RegExp(`^rgba?\\\\(\\\\s*(\\\\d+)\\\\s*${r(\",\\\\s*(\\\\d+)\\\\s*\", 2)}(?:,\\\\s*([\\\\d.]+))?\\\\s*\\\\)$`, \"i\");\nconst hslaRegex = /^hsla?\\(\\s*([\\d.]+)\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%(?:\\s*,\\s*([\\d.]+))?\\s*\\)$/i;\nconst namedColorRegex = /^[a-z]+$/i;\nconst roundColor = (color)=>{\n    return Math.round(color * 255);\n};\nconst hslToRgb = (hue, saturation, lightness)=>{\n    let l = lightness / 100;\n    if (saturation === 0) {\n        // achromatic\n        return [\n            l,\n            l,\n            l\n        ].map(roundColor);\n    }\n    // formulae from https://en.wikipedia.org/wiki/HSL_and_HSV\n    const huePrime = (hue % 360 + 360) % 360 / 60;\n    const chroma = (1 - Math.abs(2 * l - 1)) * (saturation / 100);\n    const secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));\n    let red = 0;\n    let green = 0;\n    let blue = 0;\n    if (huePrime >= 0 && huePrime < 1) {\n        red = chroma;\n        green = secondComponent;\n    } else if (huePrime >= 1 && huePrime < 2) {\n        red = secondComponent;\n        green = chroma;\n    } else if (huePrime >= 2 && huePrime < 3) {\n        green = chroma;\n        blue = secondComponent;\n    } else if (huePrime >= 3 && huePrime < 4) {\n        green = secondComponent;\n        blue = chroma;\n    } else if (huePrime >= 4 && huePrime < 5) {\n        red = secondComponent;\n        blue = chroma;\n    } else if (huePrime >= 5 && huePrime < 6) {\n        red = chroma;\n        blue = secondComponent;\n    }\n    const lightnessModification = l - chroma / 2;\n    const finalRed = red + lightnessModification;\n    const finalGreen = green + lightnessModification;\n    const finalBlue = blue + lightnessModification;\n    return [\n        finalRed,\n        finalGreen,\n        finalBlue\n    ].map(roundColor);\n};\n// taken from:\n// https://github.com/styled-components/polished/blob/a23a6a2bb26802b3d922d9c3b67bac3f3a54a310/src/internalHelpers/_rgbToHsl.js\n/**\n * Parses a color in hue, saturation, lightness, and the alpha channel.\n *\n * Hue is a number between 0 and 360, saturation, lightness, and alpha are\n * decimal percentages between 0 and 1\n */ function parseToHsla(color) {\n    const [red, green, blue, alpha] = parseToRgba(color).map((value, index)=>// 3rd index is alpha channel which is already normalized\n        index === 3 ? value : value / 255);\n    const max = Math.max(red, green, blue);\n    const min = Math.min(red, green, blue);\n    const lightness = (max + min) / 2;\n    // achromatic\n    if (max === min) return [\n        0,\n        0,\n        lightness,\n        alpha\n    ];\n    const delta = max - min;\n    const saturation = lightness > 0.5 ? delta / (2 - max - min) : delta / (max + min);\n    const hue = 60 * (red === max ? (green - blue) / delta + (green < blue ? 6 : 0) : green === max ? (blue - red) / delta + 2 : (red - green) / delta + 4);\n    return [\n        hue,\n        saturation,\n        lightness,\n        alpha\n    ];\n}\n/**\n * Takes in hsla parts and constructs an hsla string\n *\n * @param hue The color circle (from 0 to 360) - 0 (or 360) is red, 120 is green, 240 is blue\n * @param saturation Percentage of saturation, given as a decimal between 0 and 1\n * @param lightness Percentage of lightness, given as a decimal between 0 and 1\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */ function hsla(hue, saturation, lightness, alpha) {\n    return `hsla(${(hue % 360).toFixed()}, ${guard(0, 100, saturation * 100).toFixed()}%, ${guard(0, 100, lightness * 100).toFixed()}%, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n/**\n * Adjusts the current hue of the color by the given degrees. Wraps around when\n * over 360.\n *\n * @param color input color\n * @param degrees degrees to adjust the input color, accepts degree integers\n * (0 - 360) and wraps around on overflow\n */ function adjustHue(color, degrees) {\n    const [h, s, l, a] = parseToHsla(color);\n    return hsla(h + degrees, s, l, a);\n}\n/**\n * Darkens using lightness. This is equivalent to subtracting the lightness\n * from the L in HSL.\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */ function darken(color, amount) {\n    const [hue, saturation, lightness, alpha] = parseToHsla(color);\n    return hsla(hue, saturation, lightness - amount, alpha);\n}\n/**\n * Desaturates the input color by the given amount via subtracting from the `s`\n * in `hsla`.\n *\n * @param amount The amount to desaturate, given as a decimal between 0 and 1\n */ function desaturate(color, amount) {\n    const [h, s, l, a] = parseToHsla(color);\n    return hsla(h, s - amount, l, a);\n}\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getLuminance.js\n/**\n * Returns a number (float) representing the luminance of a color.\n */ function getLuminance(color) {\n    if (color === \"transparent\") return 0;\n    function f(x) {\n        const channel = x / 255;\n        return channel <= 0.04045 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n    }\n    const [r, g, b] = parseToRgba(color);\n    return 0.2126 * f(r) + 0.7152 * f(g) + 0.0722 * f(b);\n}\n// taken from:\n// https://github.com/styled-components/polished/blob/0764c982551b487469043acb56281b0358b3107b/src/color/getContrast.js\n/**\n * Returns the contrast ratio between two colors based on\n * [W3's recommended equation for calculating contrast](http://www.w3.org/TR/WCAG20/#contrast-ratiodef).\n */ function getContrast(color1, color2) {\n    const luminance1 = getLuminance(color1);\n    const luminance2 = getLuminance(color2);\n    return luminance1 > luminance2 ? (luminance1 + 0.05) / (luminance2 + 0.05) : (luminance2 + 0.05) / (luminance1 + 0.05);\n}\n/**\n * Takes in rgba parts and returns an rgba string\n *\n * @param red The amount of red in the red channel, given in a number between 0 and 255 inclusive\n * @param green The amount of green in the red channel, given in a number between 0 and 255 inclusive\n * @param blue The amount of blue in the red channel, given in a number between 0 and 255 inclusive\n * @param alpha Percentage of opacity, given as a decimal between 0 and 1\n */ function rgba(red, green, blue, alpha) {\n    return `rgba(${guard(0, 255, red).toFixed()}, ${guard(0, 255, green).toFixed()}, ${guard(0, 255, blue).toFixed()}, ${parseFloat(guard(0, 1, alpha).toFixed(3))})`;\n}\n/**\n * Mixes two colors together. Taken from sass's implementation.\n */ function mix(color1, color2, weight) {\n    const normalize = (n, index)=>// 3rd index is alpha channel which is already normalized\n        index === 3 ? n : n / 255;\n    const [r1, g1, b1, a1] = parseToRgba(color1).map(normalize);\n    const [r2, g2, b2, a2] = parseToRgba(color2).map(normalize);\n    // The formula is copied from the original Sass implementation:\n    // http://sass-lang.com/documentation/Sass/Script/Functions.html#mix-instance_method\n    const alphaDelta = a2 - a1;\n    const normalizedWeight = weight * 2 - 1;\n    const combinedWeight = normalizedWeight * alphaDelta === -1 ? normalizedWeight : normalizedWeight + alphaDelta / (1 + normalizedWeight * alphaDelta);\n    const weight2 = (combinedWeight + 1) / 2;\n    const weight1 = 1 - weight2;\n    const r = (r1 * weight1 + r2 * weight2) * 255;\n    const g = (g1 * weight1 + g2 * weight2) * 255;\n    const b = (b1 * weight1 + b2 * weight2) * 255;\n    const a = a2 * weight + a1 * (1 - weight);\n    return rgba(r, g, b, a);\n}\n/**\n * Given a series colors, this function will return a `scale(x)` function that\n * accepts a percentage as a decimal between 0 and 1 and returns the color at\n * that percentage in the scale.\n *\n * ```js\n * const scale = getScale('red', 'yellow', 'green');\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(0.5)); // rgba(255, 255, 0, 1)\n * console.log(scale(1)); // rgba(0, 128, 0, 1)\n * ```\n *\n * If you'd like to limit the domain and range like chroma-js, we recommend\n * wrapping scale again.\n *\n * ```js\n * const _scale = getScale('red', 'yellow', 'green');\n * const scale = x => _scale(x / 100);\n *\n * console.log(scale(0)); // rgba(255, 0, 0, 1)\n * console.log(scale(50)); // rgba(255, 255, 0, 1)\n * console.log(scale(100)); // rgba(0, 128, 0, 1)\n * ```\n */ function getScale(...colors) {\n    return (n)=>{\n        const lastIndex = colors.length - 1;\n        const lowIndex = guard(0, lastIndex, Math.floor(n * lastIndex));\n        const highIndex = guard(0, lastIndex, Math.ceil(n * lastIndex));\n        const color1 = colors[lowIndex];\n        const color2 = colors[highIndex];\n        const unit = 1 / lastIndex;\n        const weight = (n - unit * lowIndex) / unit;\n        return mix(color1, color2, weight);\n    };\n}\nconst guidelines = {\n    decorative: 1.5,\n    readable: 3,\n    aa: 4.5,\n    aaa: 7\n};\n/**\n * Returns whether or not a color has bad contrast against a background\n * according to a given standard.\n */ function hasBadContrast(color, standard = \"aa\", background = \"#fff\") {\n    return getContrast(color, background) < guidelines[standard];\n}\n/**\n * Lightens a color by a given amount. This is equivalent to\n * `darken(color, -amount)`\n *\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */ function lighten(color, amount) {\n    return darken(color, -amount);\n}\n/**\n * Takes in a color and makes it more transparent by convert to `rgba` and\n * decreasing the amount in the alpha channel.\n *\n * @param amount The amount to increase the transparency by, given as a decimal between 0 and 1\n */ function transparentize(color, amount) {\n    const [r, g, b, a] = parseToRgba(color);\n    return rgba(r, g, b, a - amount);\n}\n/**\n * Takes a color and un-transparentizes it. Equivalent to\n * `transparentize(color, -amount)`\n *\n * @param amount The amount to increase the opacity by, given as a decimal between 0 and 1\n */ function opacify(color, amount) {\n    return transparentize(color, -amount);\n}\n/**\n * An alternative function to `readableColor`. Returns whether or not the \n * readable color (i.e. the color to be place on top the input color) should be\n * black.\n */ function readableColorIsBlack(color) {\n    return getLuminance(color) > 0.179;\n}\n/**\n * Returns black or white for best contrast depending on the luminosity of the\n * given color.\n */ function readableColor(color) {\n    return readableColorIsBlack(color) ? \"#000\" : \"#fff\";\n}\n/**\n * Saturates a color by converting it to `hsl` and increasing the saturation\n * amount. Equivalent to `desaturate(color, -amount)`\n * \n * @param color Input color\n * @param amount The amount to darken, given as a decimal between 0 and 1\n */ function saturate(color, amount) {\n    return desaturate(color, -amount);\n}\n/**\n * Takes in any color and returns it as a hex code.\n */ function toHex(color) {\n    const [r, g, b, a] = parseToRgba(color);\n    let hex = (x)=>{\n        const h = guard(0, 255, x).toString(16);\n        // NOTE: padStart could be used here but it breaks Node 6 compat\n        // https://github.com/ricokahler/color2k/issues/351\n        return h.length === 1 ? `0${h}` : h;\n    };\n    return `#${hex(r)}${hex(g)}${hex(b)}${a < 1 ? hex(Math.round(a * 255)) : \"\"}`;\n}\n/**\n * Takes in any color and returns it as an rgba string.\n */ function toRgba(color) {\n    return rgba(...parseToRgba(color));\n}\n/**\n * Takes in any color and returns it as an hsla string.\n */ function toHsla(color) {\n    return hsla(...parseToHsla(color));\n}\n //# sourceMappingURL=index.exports.import.es.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/color2k/dist/index.exports.import.es.mjs\n");

/***/ })

};
;