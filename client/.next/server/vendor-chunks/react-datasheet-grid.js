"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-datasheet-grid";
exports.ids = ["vendor-chunks/react-datasheet-grid"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/checkboxColumn.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/checkboxColumn.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.checkboxColumn = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\n// Those values are used when pasting values, all those values will be considered false, any other true\nconst FALSY = [\n    \"\",\n    \"false\",\n    \"no\",\n    \"off\",\n    \"disabled\",\n    \"0\",\n    \"n\",\n    \"f\",\n    \"unchecked\",\n    \"undefined\",\n    \"null\",\n    \"wrong\",\n    \"negative\"\n];\nconst CheckboxComponent = react_1.default.memo(({ focus, rowData, setRowData, active, stopEditing, disabled })=>{\n    const ref = (0, react_1.useRef)(null);\n    // When cell becomes focus we immediately toggle the checkbox and blur the cell by calling `stopEditing`\n    // Notice the `nextRow: false` to make sure the active cell does not go to the cell below and stays on this cell\n    // This way the user can keep pressing Enter to toggle the checkbox on and off multiple times\n    (0, react_1.useLayoutEffect)(()=>{\n        if (focus) {\n            setRowData(!rowData);\n            stopEditing({\n                nextRow: false\n            });\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        focus,\n        stopEditing\n    ]);\n    return react_1.default.createElement(\"input\", {\n        className: \"dsg-checkbox\",\n        // Important to prevent any undesired \"tabbing\"\n        tabIndex: -1,\n        type: \"checkbox\",\n        ref: ref,\n        disabled: disabled,\n        checked: Boolean(rowData),\n        // When cell is not active, we allow the user to toggle the checkbox by clicking on it\n        // When cell becomes active, we disable this feature and rely on focus instead (see `useLayoutEffect` above)\n        onMouseDown: ()=>!active && setRowData(!rowData),\n        onChange: ()=>null\n    });\n});\nCheckboxComponent.displayName = \"CheckboxComponent\";\nexports.checkboxColumn = {\n    component: CheckboxComponent,\n    deleteValue: ()=>false,\n    // We can customize what value is copied: when the checkbox is checked we copy YES, otherwise we copy NO\n    copyValue: ({ rowData })=>rowData ? \"YES\" : \"NO\",\n    // Since we copy custom values, we have to make sure pasting gives us the expected result\n    // Here NO is included in the FALSY array, so it will be converted to false, YES is not, so it will be converted to true\n    pasteValue: ({ value })=>!FALSY.includes(value.toLowerCase()),\n    isCellEmpty: ({ rowData })=>!rowData\n}; //# sourceMappingURL=checkboxColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/checkboxColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/dateColumn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/dateColumn.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.dateColumn = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst classnames_1 = __importDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nconst DateComponent = react_1.default.memo(({ focus, active, rowData, setRowData })=>{\n    var _a;\n    const ref = (0, react_1.useRef)(null);\n    // This is the same trick as in `textColumn`\n    (0, react_1.useLayoutEffect)(()=>{\n        var _a, _b;\n        if (focus) {\n            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.select();\n        } else {\n            (_b = ref.current) === null || _b === void 0 ? void 0 : _b.blur();\n        }\n    }, [\n        focus\n    ]);\n    return react_1.default.createElement(\"input\", {\n        className: (0, classnames_1.default)(\"dsg-input\", !active && \"dsg-hide-date-picker\"),\n        type: \"date\",\n        // Important to prevent any undesired \"tabbing\"\n        tabIndex: -1,\n        max: \"9999-12-31\",\n        ref: ref,\n        // The `pointerEvents` trick is the same than in `textColumn`\n        // Only show the calendar symbol on non-empty cells, or when cell is active, otherwise set opacity to 0\n        style: {\n            pointerEvents: focus ? \"auto\" : \"none\",\n            opacity: rowData || active ? undefined : 0\n        },\n        // Because rowData is a Date object and we need a string, we use toISOString...\n        value: (_a = rowData === null || rowData === void 0 ? void 0 : rowData.toISOString().substr(0, 10)) !== null && _a !== void 0 ? _a : \"\",\n        // ...and the input returns a string that should be converted into a Date object\n        onChange: (e)=>{\n            const date = new Date(e.target.value);\n            setRowData(isNaN(date.getTime()) ? null : date);\n        }\n    });\n});\nDateComponent.displayName = \"DateComponent\";\nexports.dateColumn = {\n    component: DateComponent,\n    deleteValue: ()=>null,\n    // We convert the date to a string for copying using toISOString\n    copyValue: ({ rowData })=>rowData ? rowData.toISOString().substr(0, 10) : null,\n    // Because the Date constructor works using iso format, we can use it to parse ISO string back to a Date object\n    pasteValue: ({ value })=>{\n        const date = new Date(value.replace(/\\.\\s?|\\//g, \"-\"));\n        return isNaN(date.getTime()) ? null : date;\n    },\n    minWidth: 170,\n    isCellEmpty: ({ rowData })=>!rowData\n}; //# sourceMappingURL=dateColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/dateColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/floatColumn.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/floatColumn.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.floatColumn = void 0;\nconst textColumn_1 = __webpack_require__(/*! ./textColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/textColumn.js\");\nexports.floatColumn = (0, textColumn_1.createTextColumn)({\n    alignRight: true,\n    formatBlurredInput: (value)=>typeof value === \"number\" ? new Intl.NumberFormat().format(value) : \"\",\n    parseUserInput: (value)=>{\n        const number = parseFloat(value);\n        return !isNaN(number) ? number : null;\n    },\n    parsePastedValue: (value)=>{\n        const number = parseFloat(value);\n        return !isNaN(number) ? number : null;\n    }\n}); //# sourceMappingURL=floatColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb2x1bW5zL2Zsb2F0Q29sdW1uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLE1BQU1HLGVBQWVDLG1CQUFPQSxDQUFDLDBGQUFjO0FBQzNDSixtQkFBbUIsR0FBRyxDQUFDLEdBQUdHLGFBQWFFLGdCQUFnQixFQUFFO0lBQ3JEQyxZQUFZO0lBQ1pDLG9CQUFvQixDQUFDTixRQUFVLE9BQU9BLFVBQVUsV0FBVyxJQUFJTyxLQUFLQyxZQUFZLEdBQUdDLE1BQU0sQ0FBQ1QsU0FBUztJQUNuR1UsZ0JBQWdCLENBQUNWO1FBQ2IsTUFBTVcsU0FBU0MsV0FBV1o7UUFDMUIsT0FBTyxDQUFDYSxNQUFNRixVQUFVQSxTQUFTO0lBQ3JDO0lBQ0FHLGtCQUFrQixDQUFDZDtRQUNmLE1BQU1XLFNBQVNDLFdBQVdaO1FBQzFCLE9BQU8sQ0FBQ2EsTUFBTUYsVUFBVUEsU0FBUztJQUNyQztBQUNKLElBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd29ybGRzLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRhc2hlZXQtZ3JpZC9kaXN0L2NvbHVtbnMvZmxvYXRDb2x1bW4uanM/OTdjOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZmxvYXRDb2x1bW4gPSB2b2lkIDA7XG5jb25zdCB0ZXh0Q29sdW1uXzEgPSByZXF1aXJlKFwiLi90ZXh0Q29sdW1uXCIpO1xuZXhwb3J0cy5mbG9hdENvbHVtbiA9ICgwLCB0ZXh0Q29sdW1uXzEuY3JlYXRlVGV4dENvbHVtbikoe1xuICAgIGFsaWduUmlnaHQ6IHRydWUsXG4gICAgZm9ybWF0Qmx1cnJlZElucHV0OiAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyBuZXcgSW50bC5OdW1iZXJGb3JtYXQoKS5mb3JtYXQodmFsdWUpIDogJycsXG4gICAgcGFyc2VVc2VySW5wdXQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICFpc05hTihudW1iZXIpID8gbnVtYmVyIDogbnVsbDtcbiAgICB9LFxuICAgIHBhcnNlUGFzdGVkVmFsdWU6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICFpc05hTihudW1iZXIpID8gbnVtYmVyIDogbnVsbDtcbiAgICB9LFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mbG9hdENvbHVtbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJmbG9hdENvbHVtbiIsInRleHRDb2x1bW5fMSIsInJlcXVpcmUiLCJjcmVhdGVUZXh0Q29sdW1uIiwiYWxpZ25SaWdodCIsImZvcm1hdEJsdXJyZWRJbnB1dCIsIkludGwiLCJOdW1iZXJGb3JtYXQiLCJmb3JtYXQiLCJwYXJzZVVzZXJJbnB1dCIsIm51bWJlciIsInBhcnNlRmxvYXQiLCJpc05hTiIsInBhcnNlUGFzdGVkVmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/floatColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/intColumn.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/intColumn.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.intColumn = void 0;\nconst textColumn_1 = __webpack_require__(/*! ./textColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/textColumn.js\");\nexports.intColumn = (0, textColumn_1.createTextColumn)({\n    alignRight: true,\n    formatBlurredInput: (value)=>typeof value === \"number\" ? new Intl.NumberFormat().format(value) : \"\",\n    parseUserInput: (value)=>{\n        const number = parseFloat(value);\n        return !isNaN(number) ? Math.round(number) : null;\n    },\n    parsePastedValue: (value)=>{\n        const number = parseFloat(value);\n        return !isNaN(number) ? Math.round(number) : null;\n    }\n}); //# sourceMappingURL=intColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb2x1bW5zL2ludENvbHVtbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsaUJBQWlCLEdBQUcsS0FBSztBQUN6QixNQUFNRyxlQUFlQyxtQkFBT0EsQ0FBQywwRkFBYztBQUMzQ0osaUJBQWlCLEdBQUcsQ0FBQyxHQUFHRyxhQUFhRSxnQkFBZ0IsRUFBRTtJQUNuREMsWUFBWTtJQUNaQyxvQkFBb0IsQ0FBQ04sUUFBVSxPQUFPQSxVQUFVLFdBQVcsSUFBSU8sS0FBS0MsWUFBWSxHQUFHQyxNQUFNLENBQUNULFNBQVM7SUFDbkdVLGdCQUFnQixDQUFDVjtRQUNiLE1BQU1XLFNBQVNDLFdBQVdaO1FBQzFCLE9BQU8sQ0FBQ2EsTUFBTUYsVUFBVUcsS0FBS0MsS0FBSyxDQUFDSixVQUFVO0lBQ2pEO0lBQ0FLLGtCQUFrQixDQUFDaEI7UUFDZixNQUFNVyxTQUFTQyxXQUFXWjtRQUMxQixPQUFPLENBQUNhLE1BQU1GLFVBQVVHLEtBQUtDLEtBQUssQ0FBQ0osVUFBVTtJQUNqRDtBQUNKLElBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd29ybGRzLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRhc2hlZXQtZ3JpZC9kaXN0L2NvbHVtbnMvaW50Q29sdW1uLmpzP2MxMWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmludENvbHVtbiA9IHZvaWQgMDtcbmNvbnN0IHRleHRDb2x1bW5fMSA9IHJlcXVpcmUoXCIuL3RleHRDb2x1bW5cIik7XG5leHBvcnRzLmludENvbHVtbiA9ICgwLCB0ZXh0Q29sdW1uXzEuY3JlYXRlVGV4dENvbHVtbikoe1xuICAgIGFsaWduUmlnaHQ6IHRydWUsXG4gICAgZm9ybWF0Qmx1cnJlZElucHV0OiAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgPyBuZXcgSW50bC5OdW1iZXJGb3JtYXQoKS5mb3JtYXQodmFsdWUpIDogJycsXG4gICAgcGFyc2VVc2VySW5wdXQ6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICFpc05hTihudW1iZXIpID8gTWF0aC5yb3VuZChudW1iZXIpIDogbnVsbDtcbiAgICB9LFxuICAgIHBhcnNlUGFzdGVkVmFsdWU6ICh2YWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBudW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICFpc05hTihudW1iZXIpID8gTWF0aC5yb3VuZChudW1iZXIpIDogbnVsbDtcbiAgICB9LFxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRDb2x1bW4uanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaW50Q29sdW1uIiwidGV4dENvbHVtbl8xIiwicmVxdWlyZSIsImNyZWF0ZVRleHRDb2x1bW4iLCJhbGlnblJpZ2h0IiwiZm9ybWF0Qmx1cnJlZElucHV0IiwiSW50bCIsIk51bWJlckZvcm1hdCIsImZvcm1hdCIsInBhcnNlVXNlcklucHV0IiwibnVtYmVyIiwicGFyc2VGbG9hdCIsImlzTmFOIiwiTWF0aCIsInJvdW5kIiwicGFyc2VQYXN0ZWRWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/intColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/isoDateColumn.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/isoDateColumn.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isoDateColumn = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst classnames_1 = __importDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nconst IsoDateComponent = react_1.default.memo(({ focus, active, rowData, setRowData })=>{\n    const ref = (0, react_1.useRef)(null);\n    // This is the same trick as in `textColumn`\n    (0, react_1.useLayoutEffect)(()=>{\n        var _a, _b;\n        if (focus) {\n            (_a = ref.current) === null || _a === void 0 ? void 0 : _a.select();\n        } else {\n            (_b = ref.current) === null || _b === void 0 ? void 0 : _b.blur();\n        }\n    }, [\n        focus\n    ]);\n    return react_1.default.createElement(\"input\", {\n        className: (0, classnames_1.default)(\"dsg-input\", !active && \"dsg-hide-date-picker\"),\n        type: \"date\",\n        // Important to prevent any undesired \"tabbing\"\n        tabIndex: -1,\n        max: \"9999-12-31\",\n        ref: ref,\n        // The `pointerEvents` trick is the same than in `textColumn`\n        // Only show the calendar symbol on non-empty cells, or when cell is active, otherwise set opacity to 0\n        style: {\n            pointerEvents: focus ? \"auto\" : \"none\",\n            opacity: rowData || active ? undefined : 0\n        },\n        // Because rowData is a Date object and we need a string, we use toISOString...\n        value: rowData !== null && rowData !== void 0 ? rowData : \"\",\n        // ...and the input returns a string that should be converted into a Date object\n        onChange: (e)=>{\n            const date = new Date(e.target.value);\n            setRowData(isNaN(date.getTime()) ? null : date.toISOString().substr(0, 10));\n        }\n    });\n});\nIsoDateComponent.displayName = \"IsoDateComponent\";\nexports.isoDateColumn = {\n    component: IsoDateComponent,\n    deleteValue: ()=>null,\n    // Because the Date constructor works using iso format, we can use it to parse ISO string back to a Date object\n    pasteValue: ({ value })=>{\n        const date = new Date(value.replace(/\\.\\s?|\\//g, \"-\"));\n        return isNaN(date.getTime()) ? null : date.toISOString().substr(0, 10);\n    },\n    minWidth: 170,\n    isCellEmpty: ({ rowData })=>!rowData\n}; //# sourceMappingURL=isoDateColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb2x1bW5zL2lzb0RhdGVDb2x1bW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxxQkFBcUIsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxrQkFBa0IsSUFBTWYsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRWMsQ0FBQztJQUN6RmhCLE9BQU9jLGNBQWMsQ0FBQ1osR0FBRyxXQUFXO1FBQUVVLFlBQVk7UUFBTUssT0FBT0Q7SUFBRTtBQUNyRSxJQUFLLFNBQVNkLENBQUMsRUFBRWMsQ0FBQztJQUNkZCxDQUFDLENBQUMsVUFBVSxHQUFHYztBQUNuQjtBQUNBLElBQUlFLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBVUMsR0FBRztJQUMzRCxJQUFJQSxPQUFPQSxJQUFJVixVQUFVLEVBQUUsT0FBT1U7SUFDbEMsSUFBSUMsU0FBUyxDQUFDO0lBQ2QsSUFBSUQsT0FBTyxNQUFNO1FBQUEsSUFBSyxJQUFJZixLQUFLZSxJQUFLLElBQUlmLE1BQU0sYUFBYUosT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLEtBQUtmLElBQUlMLGdCQUFnQnFCLFFBQVFELEtBQUtmO0lBQUU7SUFDeElXLG1CQUFtQkssUUFBUUQ7SUFDM0IsT0FBT0M7QUFDWDtBQUNBLElBQUlJLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVTCxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSVYsVUFBVSxHQUFJVSxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBbkIsOENBQTZDO0lBQUVpQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdEUSxxQkFBcUIsR0FBRyxLQUFLO0FBQzdCLE1BQU1FLFVBQVVULGFBQWFVLG1CQUFPQSxDQUFDLHdHQUFPO0FBQzVDLE1BQU1DLGVBQWVMLGdCQUFnQkksbUJBQU9BLENBQUMsNERBQVk7QUFDekQsTUFBTUUsbUJBQW1CSCxRQUFRSSxPQUFPLENBQUNDLElBQUksQ0FBQyxDQUFDLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRTtJQUNqRixNQUFNQyxNQUFNLENBQUMsR0FBR1YsUUFBUVcsTUFBTSxFQUFFO0lBQ2hDLDRDQUE0QztJQUMzQyxJQUFHWCxRQUFRWSxlQUFlLEVBQUU7UUFDekIsSUFBSUMsSUFBSUM7UUFDUixJQUFJUixPQUFPO1lBQ05PLENBQUFBLEtBQUtILElBQUlLLE9BQU8sTUFBTSxRQUFRRixPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdHLE1BQU07UUFDckUsT0FDSztZQUNBRixDQUFBQSxLQUFLSixJQUFJSyxPQUFPLE1BQU0sUUFBUUQsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHRyxJQUFJO1FBQ25FO0lBQ0osR0FBRztRQUFDWDtLQUFNO0lBQ1YsT0FBUU4sUUFBUUksT0FBTyxDQUFDYyxhQUFhLENBQUMsU0FBUztRQUFFQyxXQUFXLENBQUMsR0FBR2pCLGFBQWFFLE9BQU8sRUFBRSxhQUFhLENBQUNHLFVBQVU7UUFBeUJhLE1BQU07UUFDekksK0NBQStDO1FBQy9DQyxVQUFVLENBQUM7UUFBR0MsS0FBSztRQUFjWixLQUFLQTtRQUN0Qyw2REFBNkQ7UUFDN0QsdUdBQXVHO1FBQ3ZHYSxPQUFPO1lBQ0hDLGVBQWVsQixRQUFRLFNBQVM7WUFDaENtQixTQUFTakIsV0FBV0QsU0FBUzVCLFlBQVk7UUFDN0M7UUFDQSwrRUFBK0U7UUFDL0VXLE9BQU9rQixZQUFZLFFBQVFBLFlBQVksS0FBSyxJQUFJQSxVQUFVO1FBQzFELGdGQUFnRjtRQUNoRmtCLFVBQVUsQ0FBQ0M7WUFDUCxNQUFNQyxPQUFPLElBQUlDLEtBQUtGLEVBQUVHLE1BQU0sQ0FBQ3hDLEtBQUs7WUFDcENtQixXQUFXc0IsTUFBTUgsS0FBS0ksT0FBTyxNQUFNLE9BQU9KLEtBQUtLLFdBQVcsR0FBR0MsTUFBTSxDQUFDLEdBQUc7UUFDM0U7SUFBRTtBQUNWO0FBQ0EvQixpQkFBaUJnQyxXQUFXLEdBQUc7QUFDL0JyQyxxQkFBcUIsR0FBRztJQUNwQnNDLFdBQVdqQztJQUNYa0MsYUFBYSxJQUFNO0lBQ25CLCtHQUErRztJQUMvR0MsWUFBWSxDQUFDLEVBQUVoRCxLQUFLLEVBQUU7UUFDbEIsTUFBTXNDLE9BQU8sSUFBSUMsS0FBS3ZDLE1BQU1pRCxPQUFPLENBQUMsYUFBYTtRQUNqRCxPQUFPUixNQUFNSCxLQUFLSSxPQUFPLE1BQU0sT0FBT0osS0FBS0ssV0FBVyxHQUFHQyxNQUFNLENBQUMsR0FBRztJQUN2RTtJQUNBTSxVQUFVO0lBQ1ZDLGFBQWEsQ0FBQyxFQUFFakMsT0FBTyxFQUFFLEdBQUssQ0FBQ0E7QUFDbkMsR0FDQSx5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvY29sdW1ucy9pc29EYXRlQ29sdW1uLmpzPzFkY2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNvRGF0ZUNvbHVtbiA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IGNsYXNzbmFtZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5jb25zdCBJc29EYXRlQ29tcG9uZW50ID0gcmVhY3RfMS5kZWZhdWx0Lm1lbW8oKHsgZm9jdXMsIGFjdGl2ZSwgcm93RGF0YSwgc2V0Um93RGF0YSB9KSA9PiB7XG4gICAgY29uc3QgcmVmID0gKDAsIHJlYWN0XzEudXNlUmVmKShudWxsKTtcbiAgICAvLyBUaGlzIGlzIHRoZSBzYW1lIHRyaWNrIGFzIGluIGB0ZXh0Q29sdW1uYFxuICAgICgwLCByZWFjdF8xLnVzZUxheW91dEVmZmVjdCkoKCkgPT4ge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAoZm9jdXMpIHtcbiAgICAgICAgICAgIChfYSA9IHJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2VsZWN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAoX2IgPSByZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmJsdXIoKTtcbiAgICAgICAgfVxuICAgIH0sIFtmb2N1c10pO1xuICAgIHJldHVybiAocmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiLCB7IGNsYXNzTmFtZTogKDAsIGNsYXNzbmFtZXNfMS5kZWZhdWx0KSgnZHNnLWlucHV0JywgIWFjdGl2ZSAmJiAnZHNnLWhpZGUtZGF0ZS1waWNrZXInKSwgdHlwZTogXCJkYXRlXCIsIFxuICAgICAgICAvLyBJbXBvcnRhbnQgdG8gcHJldmVudCBhbnkgdW5kZXNpcmVkIFwidGFiYmluZ1wiXG4gICAgICAgIHRhYkluZGV4OiAtMSwgbWF4OiBcIjk5OTktMTItMzFcIiwgcmVmOiByZWYsIFxuICAgICAgICAvLyBUaGUgYHBvaW50ZXJFdmVudHNgIHRyaWNrIGlzIHRoZSBzYW1lIHRoYW4gaW4gYHRleHRDb2x1bW5gXG4gICAgICAgIC8vIE9ubHkgc2hvdyB0aGUgY2FsZW5kYXIgc3ltYm9sIG9uIG5vbi1lbXB0eSBjZWxscywgb3Igd2hlbiBjZWxsIGlzIGFjdGl2ZSwgb3RoZXJ3aXNlIHNldCBvcGFjaXR5IHRvIDBcbiAgICAgICAgc3R5bGU6IHtcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6IGZvY3VzID8gJ2F1dG8nIDogJ25vbmUnLFxuICAgICAgICAgICAgb3BhY2l0eTogcm93RGF0YSB8fCBhY3RpdmUgPyB1bmRlZmluZWQgOiAwLFxuICAgICAgICB9LCBcbiAgICAgICAgLy8gQmVjYXVzZSByb3dEYXRhIGlzIGEgRGF0ZSBvYmplY3QgYW5kIHdlIG5lZWQgYSBzdHJpbmcsIHdlIHVzZSB0b0lTT1N0cmluZy4uLlxuICAgICAgICB2YWx1ZTogcm93RGF0YSAhPT0gbnVsbCAmJiByb3dEYXRhICE9PSB2b2lkIDAgPyByb3dEYXRhIDogJycsIFxuICAgICAgICAvLyAuLi5hbmQgdGhlIGlucHV0IHJldHVybnMgYSBzdHJpbmcgdGhhdCBzaG91bGQgYmUgY29udmVydGVkIGludG8gYSBEYXRlIG9iamVjdFxuICAgICAgICBvbkNoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICBzZXRSb3dEYXRhKGlzTmFOKGRhdGUuZ2V0VGltZSgpKSA/IG51bGwgOiBkYXRlLnRvSVNPU3RyaW5nKCkuc3Vic3RyKDAsIDEwKSk7XG4gICAgICAgIH0gfSkpO1xufSk7XG5Jc29EYXRlQ29tcG9uZW50LmRpc3BsYXlOYW1lID0gJ0lzb0RhdGVDb21wb25lbnQnO1xuZXhwb3J0cy5pc29EYXRlQ29sdW1uID0ge1xuICAgIGNvbXBvbmVudDogSXNvRGF0ZUNvbXBvbmVudCxcbiAgICBkZWxldGVWYWx1ZTogKCkgPT4gbnVsbCxcbiAgICAvLyBCZWNhdXNlIHRoZSBEYXRlIGNvbnN0cnVjdG9yIHdvcmtzIHVzaW5nIGlzbyBmb3JtYXQsIHdlIGNhbiB1c2UgaXQgdG8gcGFyc2UgSVNPIHN0cmluZyBiYWNrIHRvIGEgRGF0ZSBvYmplY3RcbiAgICBwYXN0ZVZhbHVlOiAoeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh2YWx1ZS5yZXBsYWNlKC9cXC5cXHM/fFxcLy9nLCAnLScpKTtcbiAgICAgICAgcmV0dXJuIGlzTmFOKGRhdGUuZ2V0VGltZSgpKSA/IG51bGwgOiBkYXRlLnRvSVNPU3RyaW5nKCkuc3Vic3RyKDAsIDEwKTtcbiAgICB9LFxuICAgIG1pbldpZHRoOiAxNzAsXG4gICAgaXNDZWxsRW1wdHk6ICh7IHJvd0RhdGEgfSkgPT4gIXJvd0RhdGEsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNvRGF0ZUNvbHVtbi5qcy5tYXAiXSwibmFtZXMiOlsiX19jcmVhdGVCaW5kaW5nIiwiT2JqZWN0IiwiY3JlYXRlIiwibyIsIm0iLCJrIiwiazIiLCJ1bmRlZmluZWQiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiX19lc01vZHVsZSIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsImRlZmluZVByb3BlcnR5IiwiX19zZXRNb2R1bGVEZWZhdWx0IiwidiIsInZhbHVlIiwiX19pbXBvcnRTdGFyIiwibW9kIiwicmVzdWx0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19pbXBvcnREZWZhdWx0IiwiZXhwb3J0cyIsImlzb0RhdGVDb2x1bW4iLCJyZWFjdF8xIiwicmVxdWlyZSIsImNsYXNzbmFtZXNfMSIsIklzb0RhdGVDb21wb25lbnQiLCJkZWZhdWx0IiwibWVtbyIsImZvY3VzIiwiYWN0aXZlIiwicm93RGF0YSIsInNldFJvd0RhdGEiLCJyZWYiLCJ1c2VSZWYiLCJ1c2VMYXlvdXRFZmZlY3QiLCJfYSIsIl9iIiwiY3VycmVudCIsInNlbGVjdCIsImJsdXIiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidHlwZSIsInRhYkluZGV4IiwibWF4Iiwic3R5bGUiLCJwb2ludGVyRXZlbnRzIiwib3BhY2l0eSIsIm9uQ2hhbmdlIiwiZSIsImRhdGUiLCJEYXRlIiwidGFyZ2V0IiwiaXNOYU4iLCJnZXRUaW1lIiwidG9JU09TdHJpbmciLCJzdWJzdHIiLCJkaXNwbGF5TmFtZSIsImNvbXBvbmVudCIsImRlbGV0ZVZhbHVlIiwicGFzdGVWYWx1ZSIsInJlcGxhY2UiLCJtaW5XaWR0aCIsImlzQ2VsbEVtcHR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/isoDateColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/keyColumn.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/keyColumn.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.keyColumn = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst KeyComponent = (_a)=>{\n    var { columnData: { key, original }, rowData, setRowData } = _a, rest = __rest(_a, [\n        \"columnData\",\n        \"rowData\",\n        \"setRowData\"\n    ]);\n    // We use a ref so useCallback does not produce a new setKeyData function every time the rowData changes\n    const rowDataRef = (0, react_1.useRef)(rowData);\n    rowDataRef.current = rowData;\n    // We wrap the setRowData function to assign the value to the desired key\n    const setKeyData = (0, react_1.useCallback)((value)=>{\n        setRowData(Object.assign(Object.assign({}, rowDataRef.current), {\n            [key]: value\n        }));\n    }, [\n        key,\n        setRowData\n    ]);\n    if (!original.component) {\n        return react_1.default.createElement(react_1.default.Fragment, null);\n    }\n    const Component = original.component;\n    return react_1.default.createElement(Component, Object.assign({\n        columnData: original.columnData,\n        setRowData: setKeyData,\n        // We only pass the value of the desired key, this is why each cell does not have to re-render everytime\n        // another cell in the same row changes!\n        rowData: rowData[key]\n    }, rest));\n};\nconst keyColumn = (key, column)=>Object.assign(Object.assign({\n        id: key\n    }, column), {\n        // We pass the key and the original column as columnData to be able to retrieve them in the cell component\n        columnData: {\n            key: key,\n            original: column\n        },\n        component: KeyComponent,\n        // Here we simply wrap all functions to only pass the value of the desired key to the column, and not the entire row\n        copyValue: ({ rowData, rowIndex })=>{\n            var _a, _b;\n            return (_b = (_a = column.copyValue) === null || _a === void 0 ? void 0 : _a.call(column, {\n                rowData: rowData[key],\n                rowIndex\n            })) !== null && _b !== void 0 ? _b : null;\n        },\n        deleteValue: ({ rowData, rowIndex })=>{\n            var _a, _b;\n            return Object.assign(Object.assign({}, rowData), {\n                [key]: (_b = (_a = column.deleteValue) === null || _a === void 0 ? void 0 : _a.call(column, {\n                    rowData: rowData[key],\n                    rowIndex\n                })) !== null && _b !== void 0 ? _b : null\n            });\n        },\n        pasteValue: ({ rowData, value, rowIndex })=>{\n            var _a, _b;\n            return Object.assign(Object.assign({}, rowData), {\n                [key]: (_b = (_a = column.pasteValue) === null || _a === void 0 ? void 0 : _a.call(column, {\n                    rowData: rowData[key],\n                    value,\n                    rowIndex\n                })) !== null && _b !== void 0 ? _b : null\n            });\n        },\n        disabled: typeof column.disabled === \"function\" ? ({ rowData, rowIndex })=>{\n            var _a;\n            return typeof column.disabled === \"function\" ? column.disabled({\n                rowData: rowData[key],\n                rowIndex\n            }) : (_a = column.disabled) !== null && _a !== void 0 ? _a : false;\n        } : column.disabled,\n        cellClassName: typeof column.cellClassName === \"function\" ? ({ rowData, rowIndex, columnId })=>{\n            var _a;\n            return typeof column.cellClassName === \"function\" ? column.cellClassName({\n                rowData: rowData[key],\n                rowIndex,\n                columnId\n            }) : (_a = column.cellClassName) !== null && _a !== void 0 ? _a : undefined;\n        } : column.cellClassName,\n        isCellEmpty: ({ rowData, rowIndex })=>{\n            var _a, _b;\n            return (_b = (_a = column.isCellEmpty) === null || _a === void 0 ? void 0 : _a.call(column, {\n                rowData: rowData[key],\n                rowIndex\n            })) !== null && _b !== void 0 ? _b : false;\n        }\n    });\nexports.keyColumn = keyColumn; //# sourceMappingURL=keyColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/keyColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/percentColumn.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/percentColumn.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.percentColumn = void 0;\nconst textColumn_1 = __webpack_require__(/*! ./textColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/textColumn.js\");\nconst TEN_TO_THE_12 = 1000000000000;\nconst TEN_TO_THE_10 = 10000000000;\nexports.percentColumn = (0, textColumn_1.createTextColumn)({\n    alignRight: true,\n    formatBlurredInput: (value)=>typeof value === \"number\" ? new Intl.NumberFormat(undefined, {\n            style: \"percent\"\n        }).format(value) : \"\",\n    // We turn percentages (numbers between 0 and 1) into string (between 0 and 100)\n    // We could have just multiply percentages by 100, but floating point arithmetic won't work as expected: 0.29 * 100 === 28.999999999999996\n    // So we have to round those numbers to 10 decimals before turning them into strings\n    formatInputOnFocus: (value)=>typeof value === \"number\" && !isNaN(value) ? String(Math.round(value * TEN_TO_THE_12) / TEN_TO_THE_10) : \"\",\n    parseUserInput: (value)=>{\n        const number = parseFloat(value);\n        return !isNaN(number) ? number / 100 : null;\n    },\n    parsePastedValue: (value)=>{\n        const number = parseFloat(value);\n        return !isNaN(number) ? number : null;\n    }\n}); //# sourceMappingURL=percentColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb2x1bW5zL3BlcmNlbnRDb2x1bW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHFCQUFxQixHQUFHLEtBQUs7QUFDN0IsTUFBTUcsZUFBZUMsbUJBQU9BLENBQUMsMEZBQWM7QUFDM0MsTUFBTUMsZ0JBQWdCO0FBQ3RCLE1BQU1DLGdCQUFnQjtBQUN0Qk4scUJBQXFCLEdBQUcsQ0FBQyxHQUFHRyxhQUFhSSxnQkFBZ0IsRUFBRTtJQUN2REMsWUFBWTtJQUNaQyxvQkFBb0IsQ0FBQ1IsUUFBVSxPQUFPQSxVQUFVLFdBQzFDLElBQUlTLEtBQUtDLFlBQVksQ0FBQ0MsV0FBVztZQUFFQyxPQUFPO1FBQVUsR0FBR0MsTUFBTSxDQUFDYixTQUM5RDtJQUNOLGdGQUFnRjtJQUNoRiwwSUFBMEk7SUFDMUksb0ZBQW9GO0lBQ3BGYyxvQkFBb0IsQ0FBQ2QsUUFBVSxPQUFPQSxVQUFVLFlBQVksQ0FBQ2UsTUFBTWYsU0FDN0RnQixPQUFPQyxLQUFLQyxLQUFLLENBQUNsQixRQUFRSSxpQkFBaUJDLGlCQUMzQztJQUNOYyxnQkFBZ0IsQ0FBQ25CO1FBQ2IsTUFBTW9CLFNBQVNDLFdBQVdyQjtRQUMxQixPQUFPLENBQUNlLE1BQU1LLFVBQVVBLFNBQVMsTUFBTTtJQUMzQztJQUNBRSxrQkFBa0IsQ0FBQ3RCO1FBQ2YsTUFBTW9CLFNBQVNDLFdBQVdyQjtRQUMxQixPQUFPLENBQUNlLE1BQU1LLFVBQVVBLFNBQVM7SUFDckM7QUFDSixJQUNBLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmxkcy1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb2x1bW5zL3BlcmNlbnRDb2x1bW4uanM/ZjhhZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGVyY2VudENvbHVtbiA9IHZvaWQgMDtcbmNvbnN0IHRleHRDb2x1bW5fMSA9IHJlcXVpcmUoXCIuL3RleHRDb2x1bW5cIik7XG5jb25zdCBURU5fVE9fVEhFXzEyID0gMTAwMDAwMDAwMDAwMDtcbmNvbnN0IFRFTl9UT19USEVfMTAgPSAxMDAwMDAwMDAwMDtcbmV4cG9ydHMucGVyY2VudENvbHVtbiA9ICgwLCB0ZXh0Q29sdW1uXzEuY3JlYXRlVGV4dENvbHVtbikoe1xuICAgIGFsaWduUmlnaHQ6IHRydWUsXG4gICAgZm9ybWF0Qmx1cnJlZElucHV0OiAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcidcbiAgICAgICAgPyBuZXcgSW50bC5OdW1iZXJGb3JtYXQodW5kZWZpbmVkLCB7IHN0eWxlOiAncGVyY2VudCcgfSkuZm9ybWF0KHZhbHVlKVxuICAgICAgICA6ICcnLFxuICAgIC8vIFdlIHR1cm4gcGVyY2VudGFnZXMgKG51bWJlcnMgYmV0d2VlbiAwIGFuZCAxKSBpbnRvIHN0cmluZyAoYmV0d2VlbiAwIGFuZCAxMDApXG4gICAgLy8gV2UgY291bGQgaGF2ZSBqdXN0IG11bHRpcGx5IHBlcmNlbnRhZ2VzIGJ5IDEwMCwgYnV0IGZsb2F0aW5nIHBvaW50IGFyaXRobWV0aWMgd29uJ3Qgd29yayBhcyBleHBlY3RlZDogMC4yOSAqIDEwMCA9PT0gMjguOTk5OTk5OTk5OTk5OTk2XG4gICAgLy8gU28gd2UgaGF2ZSB0byByb3VuZCB0aG9zZSBudW1iZXJzIHRvIDEwIGRlY2ltYWxzIGJlZm9yZSB0dXJuaW5nIHRoZW0gaW50byBzdHJpbmdzXG4gICAgZm9ybWF0SW5wdXRPbkZvY3VzOiAodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKVxuICAgICAgICA/IFN0cmluZyhNYXRoLnJvdW5kKHZhbHVlICogVEVOX1RPX1RIRV8xMikgLyBURU5fVE9fVEhFXzEwKVxuICAgICAgICA6ICcnLFxuICAgIHBhcnNlVXNlcklucHV0OiAodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAhaXNOYU4obnVtYmVyKSA/IG51bWJlciAvIDEwMCA6IG51bGw7XG4gICAgfSxcbiAgICBwYXJzZVBhc3RlZFZhbHVlOiAodmFsdWUpID0+IHtcbiAgICAgICAgY29uc3QgbnVtYmVyID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiAhaXNOYU4obnVtYmVyKSA/IG51bWJlciA6IG51bGw7XG4gICAgfSxcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGVyY2VudENvbHVtbi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJwZXJjZW50Q29sdW1uIiwidGV4dENvbHVtbl8xIiwicmVxdWlyZSIsIlRFTl9UT19USEVfMTIiLCJURU5fVE9fVEhFXzEwIiwiY3JlYXRlVGV4dENvbHVtbiIsImFsaWduUmlnaHQiLCJmb3JtYXRCbHVycmVkSW5wdXQiLCJJbnRsIiwiTnVtYmVyRm9ybWF0IiwidW5kZWZpbmVkIiwic3R5bGUiLCJmb3JtYXQiLCJmb3JtYXRJbnB1dE9uRm9jdXMiLCJpc05hTiIsIlN0cmluZyIsIk1hdGgiLCJyb3VuZCIsInBhcnNlVXNlcklucHV0IiwibnVtYmVyIiwicGFyc2VGbG9hdCIsInBhcnNlUGFzdGVkVmFsdWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/percentColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/columns/textColumn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/columns/textColumn.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.createTextColumn = exports.textColumn = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst classnames_1 = __importDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nconst useFirstRender_1 = __webpack_require__(/*! ../hooks/useFirstRender */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useFirstRender.js\");\nconst TextComponent = react_1.default.memo(({ active, focus, rowData, setRowData, columnData: { placeholder, alignRight, formatInputOnFocus, formatBlurredInput, parseUserInput, continuousUpdates } })=>{\n    const ref = (0, react_1.useRef)(null);\n    const firstRender = (0, useFirstRender_1.useFirstRender)();\n    // We create refs for async access so we don't have to add it to the useEffect dependencies\n    const asyncRef = (0, react_1.useRef)({\n        rowData,\n        formatInputOnFocus,\n        formatBlurredInput,\n        setRowData,\n        parseUserInput,\n        continuousUpdates,\n        firstRender,\n        // Timestamp of last focus (when focus becomes true) and last change (input change)\n        // used to prevent un-necessary updates when value was not changed\n        focusedAt: 0,\n        changedAt: 0,\n        // This allows us to keep track of whether or not the user blurred the input using the Esc key\n        // If the Esc key is used we do not update the row's value (only relevant when continuousUpdates is false)\n        escPressed: false\n    });\n    asyncRef.current = {\n        rowData,\n        formatInputOnFocus,\n        formatBlurredInput,\n        setRowData,\n        parseUserInput,\n        continuousUpdates,\n        firstRender,\n        // Keep the same values across renders\n        focusedAt: asyncRef.current.focusedAt,\n        changedAt: asyncRef.current.changedAt,\n        escPressed: asyncRef.current.escPressed\n    };\n    (0, react_1.useLayoutEffect)(()=>{\n        // When the cell gains focus we make sure to immediately select the text in the input:\n        // - If the user gains focus by typing, it will replace the existing text, as expected\n        // - If the user gains focus by clicking or pressing Enter, the text will be preserved and selected\n        if (focus) {\n            if (ref.current) {\n                // Make sure to first format the input\n                ref.current.value = asyncRef.current.formatInputOnFocus(asyncRef.current.rowData);\n                ref.current.focus();\n                ref.current.select();\n            }\n            // We immediately reset the escPressed\n            asyncRef.current.escPressed = false;\n            // Save current timestamp\n            asyncRef.current.focusedAt = Date.now();\n        } else {\n            if (ref.current) {\n                // Update the row's value on blur only if the user did not press escape (only relevant when continuousUpdates is false)\n                if (!asyncRef.current.escPressed && !asyncRef.current.continuousUpdates && !asyncRef.current.firstRender && // Make sure that focus was gained more than 10 ms ago, used to prevent flickering\n                asyncRef.current.changedAt >= asyncRef.current.focusedAt) {\n                    asyncRef.current.setRowData(asyncRef.current.parseUserInput(ref.current.value));\n                }\n                ref.current.blur();\n            }\n        }\n    }, [\n        focus\n    ]);\n    (0, react_1.useEffect)(()=>{\n        if (!focus && ref.current) {\n            // On blur or when the data changes, format it for display\n            ref.current.value = asyncRef.current.formatBlurredInput(rowData);\n        }\n    }, [\n        focus,\n        rowData\n    ]);\n    return react_1.default.createElement(\"input\", {\n        // We use an uncontrolled component for better performance\n        defaultValue: formatBlurredInput(rowData),\n        className: (0, classnames_1.default)(\"dsg-input\", alignRight && \"dsg-input-align-right\"),\n        placeholder: active ? placeholder : undefined,\n        // Important to prevent any undesired \"tabbing\"\n        tabIndex: -1,\n        ref: ref,\n        // Make sure that while the cell is not focus, the user cannot interact with the input\n        // The cursor will not change to \"I\", the style of the input will not change,\n        // and the user cannot click and edit the input (this part is handled by DataSheetGrid itself)\n        style: {\n            pointerEvents: focus ? \"auto\" : \"none\"\n        },\n        onChange: (e)=>{\n            asyncRef.current.changedAt = Date.now();\n            // Only update the row's value as the user types if continuousUpdates is true\n            if (continuousUpdates) {\n                setRowData(parseUserInput(e.target.value));\n            }\n        },\n        onKeyDown: (e)=>{\n            // Track when user presses the Esc key\n            if (e.key === \"Escape\") {\n                asyncRef.current.escPressed = true;\n            }\n        }\n    });\n});\nTextComponent.displayName = \"TextComponent\";\nexports.textColumn = createTextColumn();\nfunction createTextColumn({ placeholder, alignRight = false, continuousUpdates = true, deletedValue = null, parseUserInput = (value)=>value.trim() || null, formatBlurredInput = (value)=>String(value !== null && value !== void 0 ? value : \"\"), formatInputOnFocus = (value)=>String(value !== null && value !== void 0 ? value : \"\"), formatForCopy = (value)=>String(value !== null && value !== void 0 ? value : \"\"), parsePastedValue = (value)=>value.replace(/[\\n\\r]+/g, \" \").trim() || null } = {}) {\n    return {\n        component: TextComponent,\n        columnData: {\n            placeholder,\n            alignRight,\n            continuousUpdates,\n            formatInputOnFocus,\n            formatBlurredInput,\n            parseUserInput\n        },\n        deleteValue: ()=>deletedValue,\n        copyValue: ({ rowData })=>formatForCopy(rowData),\n        pasteValue: ({ value })=>parsePastedValue(value),\n        isCellEmpty: ({ rowData })=>rowData === null || rowData === undefined\n    };\n}\nexports.createTextColumn = createTextColumn; //# sourceMappingURL=textColumn.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/columns/textColumn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/components/AddRows.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/components/AddRows.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AddRows = exports.createAddRowsComponent = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst createAddRowsComponent = (translationKeys = {})=>// eslint-disable-next-line react/display-name\n    ({ addRows })=>{\n        var _a, _b;\n        const [value, setValue] = (0, react_1.useState)(1);\n        const [rawValue, setRawValue] = (0, react_1.useState)(String(value));\n        return react_1.default.createElement(\"div\", {\n            className: \"dsg-add-row\"\n        }, react_1.default.createElement(\"button\", {\n            type: \"button\",\n            className: \"dsg-add-row-btn\",\n            onClick: ()=>addRows(value)\n        }, (_a = translationKeys.button) !== null && _a !== void 0 ? _a : \"Add\"), \" \", react_1.default.createElement(\"input\", {\n            className: \"dsg-add-row-input\",\n            value: rawValue,\n            onBlur: ()=>setRawValue(String(value)),\n            type: \"number\",\n            min: 1,\n            onChange: (e)=>{\n                setRawValue(e.target.value);\n                setValue(Math.max(1, Math.round(parseInt(e.target.value) || 0)));\n            },\n            onKeyDown: (event)=>{\n                if (event.key === \"Enter\") {\n                    addRows(value);\n                }\n            }\n        }), \" \", (_b = translationKeys.unit) !== null && _b !== void 0 ? _b : \"rows\");\n    };\nexports.createAddRowsComponent = createAddRowsComponent;\nexports.AddRows = (0, exports.createAddRowsComponent)();\nexports.AddRows.displayName = \"AddRows\"; //# sourceMappingURL=AddRows.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb21wb25lbnRzL0FkZFJvd3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQU1DLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQzFGLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCLElBQUlHLE9BQU9QLE9BQU9RLHdCQUF3QixDQUFDTCxHQUFHQztJQUM5QyxJQUFJLENBQUNHLFFBQVMsVUFBU0EsT0FBTyxDQUFDSixFQUFFTSxVQUFVLEdBQUdGLEtBQUtHLFFBQVEsSUFBSUgsS0FBS0ksWUFBWSxHQUFHO1FBQ2pGSixPQUFPO1lBQUVLLFlBQVk7WUFBTUMsS0FBSztnQkFBYSxPQUFPVixDQUFDLENBQUNDLEVBQUU7WUFBRTtRQUFFO0lBQzlEO0lBQ0FKLE9BQU9jLGNBQWMsQ0FBQ1osR0FBR0csSUFBSUU7QUFDakMsSUFBTSxTQUFTTCxDQUFDLEVBQUVDLENBQUMsRUFBRUMsQ0FBQyxFQUFFQyxFQUFFO0lBQ3RCLElBQUlBLE9BQU9DLFdBQVdELEtBQUtEO0lBQzNCRixDQUFDLENBQUNHLEdBQUcsR0FBR0YsQ0FBQyxDQUFDQyxFQUFFO0FBQ2hCLENBQUM7QUFDRCxJQUFJVyxxQkFBcUIsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxrQkFBa0IsSUFBTWYsQ0FBQUEsT0FBT0MsTUFBTSxHQUFJLFNBQVNDLENBQUMsRUFBRWMsQ0FBQztJQUN6RmhCLE9BQU9jLGNBQWMsQ0FBQ1osR0FBRyxXQUFXO1FBQUVVLFlBQVk7UUFBTUssT0FBT0Q7SUFBRTtBQUNyRSxJQUFLLFNBQVNkLENBQUMsRUFBRWMsQ0FBQztJQUNkZCxDQUFDLENBQUMsVUFBVSxHQUFHYztBQUNuQjtBQUNBLElBQUlFLGVBQWUsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxZQUFZLElBQUssU0FBVUMsR0FBRztJQUMzRCxJQUFJQSxPQUFPQSxJQUFJVixVQUFVLEVBQUUsT0FBT1U7SUFDbEMsSUFBSUMsU0FBUyxDQUFDO0lBQ2QsSUFBSUQsT0FBTyxNQUFNO1FBQUEsSUFBSyxJQUFJZixLQUFLZSxJQUFLLElBQUlmLE1BQU0sYUFBYUosT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNKLEtBQUtmLElBQUlMLGdCQUFnQnFCLFFBQVFELEtBQUtmO0lBQUU7SUFDeElXLG1CQUFtQkssUUFBUUQ7SUFDM0IsT0FBT0M7QUFDWDtBQUNBcEIsOENBQTZDO0lBQUVpQixPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdETyxlQUFlLEdBQUdBLDhCQUE4QixHQUFHLEtBQUs7QUFDeEQsTUFBTUcsVUFBVVQsYUFBYVUsbUJBQU9BLENBQUMsd0dBQU87QUFDNUMsTUFBTUYseUJBQXlCLENBQUNHLGtCQUFrQixDQUFDLENBQUMsR0FDcEQsOENBQThDO0lBQzlDLENBQUMsRUFBRUMsT0FBTyxFQUFFO1FBQ1IsSUFBSUMsSUFBSUM7UUFDUixNQUFNLENBQUNmLE9BQU9nQixTQUFTLEdBQUcsQ0FBQyxHQUFHTixRQUFRTyxRQUFRLEVBQUU7UUFDaEQsTUFBTSxDQUFDQyxVQUFVQyxZQUFZLEdBQUcsQ0FBQyxHQUFHVCxRQUFRTyxRQUFRLEVBQUVHLE9BQU9wQjtRQUM3RCxPQUFRVSxRQUFRVyxPQUFPLENBQUNDLGFBQWEsQ0FBQyxPQUFPO1lBQUVDLFdBQVc7UUFBYyxHQUNwRWIsUUFBUVcsT0FBTyxDQUFDQyxhQUFhLENBQUMsVUFBVTtZQUFFRSxNQUFNO1lBQVVELFdBQVc7WUFBbUJFLFNBQVMsSUFBTVosUUFBUWI7UUFBTyxHQUFHLENBQUNjLEtBQUtGLGdCQUFnQmMsTUFBTSxNQUFNLFFBQVFaLE9BQU8sS0FBSyxJQUFJQSxLQUFLLFFBQ3hMLEtBQ0FKLFFBQVFXLE9BQU8sQ0FBQ0MsYUFBYSxDQUFDLFNBQVM7WUFBRUMsV0FBVztZQUFxQnZCLE9BQU9rQjtZQUFVUyxRQUFRLElBQU1SLFlBQVlDLE9BQU9wQjtZQUFTd0IsTUFBTTtZQUFVSSxLQUFLO1lBQUdDLFVBQVUsQ0FBQ0M7Z0JBQy9KWCxZQUFZVyxFQUFFQyxNQUFNLENBQUMvQixLQUFLO2dCQUMxQmdCLFNBQVNnQixLQUFLQyxHQUFHLENBQUMsR0FBR0QsS0FBS0UsS0FBSyxDQUFDQyxTQUFTTCxFQUFFQyxNQUFNLENBQUMvQixLQUFLLEtBQUs7WUFDaEU7WUFBR29DLFdBQVcsQ0FBQ0M7Z0JBQ1gsSUFBSUEsTUFBTUMsR0FBRyxLQUFLLFNBQVM7b0JBQ3ZCekIsUUFBUWI7Z0JBQ1o7WUFDSjtRQUFFLElBQ04sS0FBSyxDQUFDZSxLQUFLSCxnQkFBZ0IyQixJQUFJLE1BQU0sUUFBUXhCLE9BQU8sS0FBSyxJQUFJQSxLQUFLO0lBQzFFO0FBQ0FSLDhCQUE4QixHQUFHRTtBQUNqQ0YsZUFBZSxHQUFHLENBQUMsR0FBR0EsUUFBUUUsc0JBQXNCO0FBQ3BERiwyQkFBMkIsR0FBRyxXQUM5QixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvY29tcG9uZW50cy9BZGRSb3dzLmpzPzBiZmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQWRkUm93cyA9IGV4cG9ydHMuY3JlYXRlQWRkUm93c0NvbXBvbmVudCA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IGNyZWF0ZUFkZFJvd3NDb21wb25lbnQgPSAodHJhbnNsYXRpb25LZXlzID0ge30pID0+IFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0L2Rpc3BsYXktbmFtZVxuKHsgYWRkUm93cyB9KSA9PiB7XG4gICAgdmFyIF9hLCBfYjtcbiAgICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSgxKTtcbiAgICBjb25zdCBbcmF3VmFsdWUsIHNldFJhd1ZhbHVlXSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKShTdHJpbmcodmFsdWUpKTtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiBcImRzZy1hZGQtcm93XCIgfSxcbiAgICAgICAgcmVhY3RfMS5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgeyB0eXBlOiBcImJ1dHRvblwiLCBjbGFzc05hbWU6IFwiZHNnLWFkZC1yb3ctYnRuXCIsIG9uQ2xpY2s6ICgpID0+IGFkZFJvd3ModmFsdWUpIH0sIChfYSA9IHRyYW5zbGF0aW9uS2V5cy5idXR0b24pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICdBZGQnKSxcbiAgICAgICAgJyAnLFxuICAgICAgICByZWFjdF8xLmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImlucHV0XCIsIHsgY2xhc3NOYW1lOiBcImRzZy1hZGQtcm93LWlucHV0XCIsIHZhbHVlOiByYXdWYWx1ZSwgb25CbHVyOiAoKSA9PiBzZXRSYXdWYWx1ZShTdHJpbmcodmFsdWUpKSwgdHlwZTogXCJudW1iZXJcIiwgbWluOiAxLCBvbkNoYW5nZTogKGUpID0+IHtcbiAgICAgICAgICAgICAgICBzZXRSYXdWYWx1ZShlLnRhcmdldC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgc2V0VmFsdWUoTWF0aC5tYXgoMSwgTWF0aC5yb3VuZChwYXJzZUludChlLnRhcmdldC52YWx1ZSkgfHwgMCkpKTtcbiAgICAgICAgICAgIH0sIG9uS2V5RG93bjogKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ0VudGVyJykge1xuICAgICAgICAgICAgICAgICAgICBhZGRSb3dzKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IH0pLFxuICAgICAgICAnICcsIChfYiA9IHRyYW5zbGF0aW9uS2V5cy51bml0KSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAncm93cycpKTtcbn07XG5leHBvcnRzLmNyZWF0ZUFkZFJvd3NDb21wb25lbnQgPSBjcmVhdGVBZGRSb3dzQ29tcG9uZW50O1xuZXhwb3J0cy5BZGRSb3dzID0gKDAsIGV4cG9ydHMuY3JlYXRlQWRkUm93c0NvbXBvbmVudCkoKTtcbmV4cG9ydHMuQWRkUm93cy5kaXNwbGF5TmFtZSA9ICdBZGRSb3dzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFkZFJvd3MuanMubWFwIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJ2YWx1ZSIsIl9faW1wb3J0U3RhciIsIm1vZCIsInJlc3VsdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImV4cG9ydHMiLCJBZGRSb3dzIiwiY3JlYXRlQWRkUm93c0NvbXBvbmVudCIsInJlYWN0XzEiLCJyZXF1aXJlIiwidHJhbnNsYXRpb25LZXlzIiwiYWRkUm93cyIsIl9hIiwiX2IiLCJzZXRWYWx1ZSIsInVzZVN0YXRlIiwicmF3VmFsdWUiLCJzZXRSYXdWYWx1ZSIsIlN0cmluZyIsImRlZmF1bHQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwidHlwZSIsIm9uQ2xpY2siLCJidXR0b24iLCJvbkJsdXIiLCJtaW4iLCJvbkNoYW5nZSIsImUiLCJ0YXJnZXQiLCJNYXRoIiwibWF4Iiwicm91bmQiLCJwYXJzZUludCIsIm9uS2V5RG93biIsImV2ZW50Iiwia2V5IiwidW5pdCIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/components/AddRows.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/components/Cell.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/components/Cell.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Cell = void 0;\nconst react_1 = __importDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst classnames_1 = __importDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nconst Cell = ({ children, gutter, stickyRight, active, disabled, className, width, left })=>{\n    return react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-cell\", gutter && \"dsg-cell-gutter\", disabled && \"dsg-cell-disabled\", gutter && active && \"dsg-cell-gutter-active\", stickyRight && \"dsg-cell-sticky-right\", className),\n        style: {\n            width,\n            left: stickyRight ? undefined : left\n        }\n    }, children);\n};\nexports.Cell = Cell; //# sourceMappingURL=Cell.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb21wb25lbnRzL0NlbGwuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQUUsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFlBQVksR0FBRyxLQUFLO0FBQ3BCLE1BQU1HLFVBQVVSLGdCQUFnQlMsbUJBQU9BLENBQUMsd0dBQU87QUFDL0MsTUFBTUMsZUFBZVYsZ0JBQWdCUyxtQkFBT0EsQ0FBQyw0REFBWTtBQUN6RCxNQUFNRixPQUFPLENBQUMsRUFBRUksUUFBUSxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFNBQVMsRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUc7SUFDdEYsT0FBUVYsUUFBUVcsT0FBTyxDQUFDQyxhQUFhLENBQUMsT0FBTztRQUFFSixXQUFXLENBQUMsR0FBR04sYUFBYVMsT0FBTyxFQUFFLFlBQVlQLFVBQVUsbUJBQW1CRyxZQUFZLHFCQUFxQkgsVUFBVUUsVUFBVSwwQkFBMEJELGVBQWUseUJBQXlCRztRQUFZSyxPQUFPO1lBQy9QSjtZQUNBQyxNQUFNTCxjQUFjUyxZQUFZSjtRQUNwQztJQUFFLEdBQUdQO0FBQ2I7QUFDQU4sWUFBWSxHQUFHRSxNQUNmLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmxkcy1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb21wb25lbnRzL0NlbGwuanM/NWFjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2VsbCA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbmNvbnN0IGNsYXNzbmFtZXNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG5jb25zdCBDZWxsID0gKHsgY2hpbGRyZW4sIGd1dHRlciwgc3RpY2t5UmlnaHQsIGFjdGl2ZSwgZGlzYWJsZWQsIGNsYXNzTmFtZSwgd2lkdGgsIGxlZnQsIH0pID0+IHtcbiAgICByZXR1cm4gKHJlYWN0XzEuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHsgY2xhc3NOYW1lOiAoMCwgY2xhc3NuYW1lc18xLmRlZmF1bHQpKCdkc2ctY2VsbCcsIGd1dHRlciAmJiAnZHNnLWNlbGwtZ3V0dGVyJywgZGlzYWJsZWQgJiYgJ2RzZy1jZWxsLWRpc2FibGVkJywgZ3V0dGVyICYmIGFjdGl2ZSAmJiAnZHNnLWNlbGwtZ3V0dGVyLWFjdGl2ZScsIHN0aWNreVJpZ2h0ICYmICdkc2ctY2VsbC1zdGlja3ktcmlnaHQnLCBjbGFzc05hbWUpLCBzdHlsZToge1xuICAgICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgICBsZWZ0OiBzdGlja3lSaWdodCA/IHVuZGVmaW5lZCA6IGxlZnQsXG4gICAgICAgIH0gfSwgY2hpbGRyZW4pKTtcbn07XG5leHBvcnRzLkNlbGwgPSBDZWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q2VsbC5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQ2VsbCIsInJlYWN0XzEiLCJyZXF1aXJlIiwiY2xhc3NuYW1lc18xIiwiY2hpbGRyZW4iLCJndXR0ZXIiLCJzdGlja3lSaWdodCIsImFjdGl2ZSIsImRpc2FibGVkIiwiY2xhc3NOYW1lIiwid2lkdGgiLCJsZWZ0IiwiZGVmYXVsdCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInVuZGVmaW5lZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/components/Cell.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/components/ContextMenu.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/components/ContextMenu.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ContextMenu = exports.createContextMenuComponent = exports.defaultRenderItem = void 0;\nconst React = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst useDocumentEventListener_1 = __webpack_require__(/*! ../hooks/useDocumentEventListener */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDocumentEventListener.js\");\nconst defaultRenderItem = (item)=>{\n    if (item.type === \"CUT\") {\n        return React.createElement(React.Fragment, null, \"Cut\");\n    }\n    if (item.type === \"COPY\") {\n        return React.createElement(React.Fragment, null, \"Copy\");\n    }\n    if (item.type === \"PASTE\") {\n        return React.createElement(React.Fragment, null, \"Paste\");\n    }\n    if (item.type === \"DELETE_ROW\") {\n        return React.createElement(React.Fragment, null, \"Delete row\");\n    }\n    if (item.type === \"DELETE_ROWS\") {\n        return React.createElement(React.Fragment, null, \"Delete rows \", React.createElement(\"b\", null, item.fromRow), \" to \", React.createElement(\"b\", null, item.toRow));\n    }\n    if (item.type === \"INSERT_ROW_BELLOW\") {\n        return React.createElement(React.Fragment, null, \"Insert row below\");\n    }\n    if (item.type === \"DUPLICATE_ROW\") {\n        return React.createElement(React.Fragment, null, \"Duplicate row\");\n    }\n    if (item.type === \"DUPLICATE_ROWS\") {\n        return React.createElement(React.Fragment, null, \"Duplicate rows \", React.createElement(\"b\", null, item.fromRow), \" to \", React.createElement(\"b\", null, item.toRow));\n    }\n    return item.type;\n};\nexports.defaultRenderItem = defaultRenderItem;\nconst createContextMenuComponent = (renderItem = exports.defaultRenderItem)=>// eslint-disable-next-line react/display-name\n    ({ clientX, clientY, items, close })=>{\n        const containerRef = (0, react_1.useRef)(null);\n        const onClickOutside = (0, react_1.useCallback)((event)=>{\n            var _a;\n            const clickInside = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target);\n            if (!clickInside) {\n                close();\n            }\n        }, [\n            close\n        ]);\n        (0, useDocumentEventListener_1.useDocumentEventListener)(\"mousedown\", onClickOutside);\n        return React.createElement(\"div\", {\n            className: \"dsg-context-menu\",\n            style: {\n                left: clientX + \"px\",\n                top: clientY + \"px\"\n            },\n            ref: containerRef\n        }, items.map((item)=>React.createElement(\"div\", {\n                key: item.type,\n                onClick: item.action,\n                className: \"dsg-context-menu-item\"\n            }, renderItem(item))));\n    };\nexports.createContextMenuComponent = createContextMenuComponent;\nexports.ContextMenu = (0, exports.createContextMenuComponent)(exports.defaultRenderItem);\nexports.ContextMenu.displayName = \"ContextMenu\"; //# sourceMappingURL=ContextMenu.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb21wb25lbnRzL0NvbnRleHRNZW51LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsSUFBSUEsa0JBQWtCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsZUFBZSxJQUFNQyxDQUFBQSxPQUFPQyxNQUFNLEdBQUksU0FBU0MsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUMxRixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQixJQUFJRyxPQUFPUCxPQUFPUSx3QkFBd0IsQ0FBQ0wsR0FBR0M7SUFDOUMsSUFBSSxDQUFDRyxRQUFTLFVBQVNBLE9BQU8sQ0FBQ0osRUFBRU0sVUFBVSxHQUFHRixLQUFLRyxRQUFRLElBQUlILEtBQUtJLFlBQVksR0FBRztRQUNqRkosT0FBTztZQUFFSyxZQUFZO1lBQU1DLEtBQUs7Z0JBQWEsT0FBT1YsQ0FBQyxDQUFDQyxFQUFFO1lBQUU7UUFBRTtJQUM5RDtJQUNBSixPQUFPYyxjQUFjLENBQUNaLEdBQUdHLElBQUlFO0FBQ2pDLElBQU0sU0FBU0wsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUMsRUFBRUMsRUFBRTtJQUN0QixJQUFJQSxPQUFPQyxXQUFXRCxLQUFLRDtJQUMzQkYsQ0FBQyxDQUFDRyxHQUFHLEdBQUdGLENBQUMsQ0FBQ0MsRUFBRTtBQUNoQixDQUFDO0FBQ0QsSUFBSVcscUJBQXFCLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsa0JBQWtCLElBQU1mLENBQUFBLE9BQU9DLE1BQU0sR0FBSSxTQUFTQyxDQUFDLEVBQUVjLENBQUM7SUFDekZoQixPQUFPYyxjQUFjLENBQUNaLEdBQUcsV0FBVztRQUFFVSxZQUFZO1FBQU1LLE9BQU9EO0lBQUU7QUFDckUsSUFBSyxTQUFTZCxDQUFDLEVBQUVjLENBQUM7SUFDZGQsQ0FBQyxDQUFDLFVBQVUsR0FBR2M7QUFDbkI7QUFDQSxJQUFJRSxlQUFlLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsWUFBWSxJQUFLLFNBQVVDLEdBQUc7SUFDM0QsSUFBSUEsT0FBT0EsSUFBSVYsVUFBVSxFQUFFLE9BQU9VO0lBQ2xDLElBQUlDLFNBQVMsQ0FBQztJQUNkLElBQUlELE9BQU8sTUFBTTtRQUFBLElBQUssSUFBSWYsS0FBS2UsSUFBSyxJQUFJZixNQUFNLGFBQWFKLE9BQU9xQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixLQUFLZixJQUFJTCxnQkFBZ0JxQixRQUFRRCxLQUFLZjtJQUFFO0lBQ3hJVyxtQkFBbUJLLFFBQVFEO0lBQzNCLE9BQU9DO0FBQ1g7QUFDQXBCLDhDQUE2QztJQUFFaUIsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3RE8sbUJBQW1CLEdBQUdBLGtDQUFrQyxHQUFHQSx5QkFBeUIsR0FBRyxLQUFLO0FBQzVGLE1BQU1JLFFBQVFWLGFBQWFXLG1CQUFPQSxDQUFDLHdHQUFPO0FBQzFDLE1BQU1DLFVBQVVELG1CQUFPQSxDQUFDLHdHQUFPO0FBQy9CLE1BQU1FLDZCQUE2QkYsbUJBQU9BLENBQUMsMkhBQW1DO0FBQzlFLE1BQU1GLG9CQUFvQixDQUFDSztJQUN2QixJQUFJQSxLQUFLQyxJQUFJLEtBQUssT0FBTztRQUNyQixPQUFPTCxNQUFNTSxhQUFhLENBQUNOLE1BQU1PLFFBQVEsRUFBRSxNQUFNO0lBQ3JEO0lBQ0EsSUFBSUgsS0FBS0MsSUFBSSxLQUFLLFFBQVE7UUFDdEIsT0FBT0wsTUFBTU0sYUFBYSxDQUFDTixNQUFNTyxRQUFRLEVBQUUsTUFBTTtJQUNyRDtJQUNBLElBQUlILEtBQUtDLElBQUksS0FBSyxTQUFTO1FBQ3ZCLE9BQU9MLE1BQU1NLGFBQWEsQ0FBQ04sTUFBTU8sUUFBUSxFQUFFLE1BQU07SUFDckQ7SUFDQSxJQUFJSCxLQUFLQyxJQUFJLEtBQUssY0FBYztRQUM1QixPQUFPTCxNQUFNTSxhQUFhLENBQUNOLE1BQU1PLFFBQVEsRUFBRSxNQUFNO0lBQ3JEO0lBQ0EsSUFBSUgsS0FBS0MsSUFBSSxLQUFLLGVBQWU7UUFDN0IsT0FBUUwsTUFBTU0sYUFBYSxDQUFDTixNQUFNTyxRQUFRLEVBQUUsTUFDeEMsZ0JBQ0FQLE1BQU1NLGFBQWEsQ0FBQyxLQUFLLE1BQU1GLEtBQUtJLE9BQU8sR0FDM0MsUUFDQVIsTUFBTU0sYUFBYSxDQUFDLEtBQUssTUFBTUYsS0FBS0ssS0FBSztJQUNqRDtJQUNBLElBQUlMLEtBQUtDLElBQUksS0FBSyxxQkFBcUI7UUFDbkMsT0FBT0wsTUFBTU0sYUFBYSxDQUFDTixNQUFNTyxRQUFRLEVBQUUsTUFBTTtJQUNyRDtJQUNBLElBQUlILEtBQUtDLElBQUksS0FBSyxpQkFBaUI7UUFDL0IsT0FBT0wsTUFBTU0sYUFBYSxDQUFDTixNQUFNTyxRQUFRLEVBQUUsTUFBTTtJQUNyRDtJQUNBLElBQUlILEtBQUtDLElBQUksS0FBSyxrQkFBa0I7UUFDaEMsT0FBUUwsTUFBTU0sYUFBYSxDQUFDTixNQUFNTyxRQUFRLEVBQUUsTUFDeEMsbUJBQ0FQLE1BQU1NLGFBQWEsQ0FBQyxLQUFLLE1BQU1GLEtBQUtJLE9BQU8sR0FDM0MsUUFDQVIsTUFBTU0sYUFBYSxDQUFDLEtBQUssTUFBTUYsS0FBS0ssS0FBSztJQUNqRDtJQUNBLE9BQU9MLEtBQUtDLElBQUk7QUFDcEI7QUFDQVQseUJBQXlCLEdBQUdHO0FBQzVCLE1BQU1ELDZCQUE2QixDQUFDWSxhQUFhZCxRQUFRRyxpQkFBaUIsR0FDMUUsOENBQThDO0lBQzlDLENBQUMsRUFBRVksT0FBTyxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsS0FBSyxFQUFFO1FBQy9CLE1BQU1DLGVBQWUsQ0FBQyxHQUFHYixRQUFRYyxNQUFNLEVBQUU7UUFDekMsTUFBTUMsaUJBQWlCLENBQUMsR0FBR2YsUUFBUWdCLFdBQVcsRUFBRSxDQUFDQztZQUM3QyxJQUFJQztZQUNKLE1BQU1DLGNBQWMsQ0FBQ0QsS0FBS0wsYUFBYU8sT0FBTyxNQUFNLFFBQVFGLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0csUUFBUSxDQUFDSixNQUFNSyxNQUFNO1lBQzdHLElBQUksQ0FBQ0gsYUFBYTtnQkFDZFA7WUFDSjtRQUNKLEdBQUc7WUFBQ0E7U0FBTTtRQUNULElBQUdYLDJCQUEyQnNCLHdCQUF3QixFQUFFLGFBQWFSO1FBQ3RFLE9BQVFqQixNQUFNTSxhQUFhLENBQUMsT0FBTztZQUFFb0IsV0FBVztZQUFvQkMsT0FBTztnQkFBRUMsTUFBTWpCLFVBQVU7Z0JBQU1rQixLQUFLakIsVUFBVTtZQUFLO1lBQUdrQixLQUFLZjtRQUFhLEdBQUdGLE1BQU1rQixHQUFHLENBQUMsQ0FBQzNCLE9BQVVKLE1BQU1NLGFBQWEsQ0FBQyxPQUFPO2dCQUFFMEIsS0FBSzVCLEtBQUtDLElBQUk7Z0JBQUU0QixTQUFTN0IsS0FBSzhCLE1BQU07Z0JBQUVSLFdBQVc7WUFBd0IsR0FBR2hCLFdBQVdOO0lBQzVSO0FBQ0FSLGtDQUFrQyxHQUFHRTtBQUNyQ0YsbUJBQW1CLEdBQUcsQ0FBQyxHQUFHQSxRQUFRRSwwQkFBMEIsRUFBRUYsUUFBUUcsaUJBQWlCO0FBQ3ZGSCwrQkFBK0IsR0FBRyxlQUNsQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvY29tcG9uZW50cy9Db250ZXh0TWVudS5qcz8yMjkyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbnRleHRNZW51ID0gZXhwb3J0cy5jcmVhdGVDb250ZXh0TWVudUNvbXBvbmVudCA9IGV4cG9ydHMuZGVmYXVsdFJlbmRlckl0ZW0gPSB2b2lkIDA7XG5jb25zdCBSZWFjdCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwicmVhY3RcIikpO1xuY29uc3QgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHVzZURvY3VtZW50RXZlbnRMaXN0ZW5lcl8xID0gcmVxdWlyZShcIi4uL2hvb2tzL3VzZURvY3VtZW50RXZlbnRMaXN0ZW5lclwiKTtcbmNvbnN0IGRlZmF1bHRSZW5kZXJJdGVtID0gKGl0ZW0pID0+IHtcbiAgICBpZiAoaXRlbS50eXBlID09PSAnQ1VUJykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgXCJDdXRcIik7XG4gICAgfVxuICAgIGlmIChpdGVtLnR5cGUgPT09ICdDT1BZJykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgXCJDb3B5XCIpO1xuICAgIH1cbiAgICBpZiAoaXRlbS50eXBlID09PSAnUEFTVEUnKSB7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCBcIlBhc3RlXCIpO1xuICAgIH1cbiAgICBpZiAoaXRlbS50eXBlID09PSAnREVMRVRFX1JPVycpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFwiRGVsZXRlIHJvd1wiKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gJ0RFTEVURV9ST1dTJykge1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgICAgICBcIkRlbGV0ZSByb3dzIFwiLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJcIiwgbnVsbCwgaXRlbS5mcm9tUm93KSxcbiAgICAgICAgICAgIFwiIHRvIFwiLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJcIiwgbnVsbCwgaXRlbS50b1JvdykpKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gJ0lOU0VSVF9ST1dfQkVMTE9XJykge1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgXCJJbnNlcnQgcm93IGJlbG93XCIpO1xuICAgIH1cbiAgICBpZiAoaXRlbS50eXBlID09PSAnRFVQTElDQVRFX1JPVycpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIFwiRHVwbGljYXRlIHJvd1wiKTtcbiAgICB9XG4gICAgaWYgKGl0ZW0udHlwZSA9PT0gJ0RVUExJQ0FURV9ST1dTJykge1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsXG4gICAgICAgICAgICBcIkR1cGxpY2F0ZSByb3dzIFwiLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJcIiwgbnVsbCwgaXRlbS5mcm9tUm93KSxcbiAgICAgICAgICAgIFwiIHRvIFwiLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcImJcIiwgbnVsbCwgaXRlbS50b1JvdykpKTtcbiAgICB9XG4gICAgcmV0dXJuIGl0ZW0udHlwZTtcbn07XG5leHBvcnRzLmRlZmF1bHRSZW5kZXJJdGVtID0gZGVmYXVsdFJlbmRlckl0ZW07XG5jb25zdCBjcmVhdGVDb250ZXh0TWVudUNvbXBvbmVudCA9IChyZW5kZXJJdGVtID0gZXhwb3J0cy5kZWZhdWx0UmVuZGVySXRlbSkgPT4gXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGlzcGxheS1uYW1lXG4oeyBjbGllbnRYLCBjbGllbnRZLCBpdGVtcywgY2xvc2UgfSkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lclJlZiA9ICgwLCByZWFjdF8xLnVzZVJlZikobnVsbCk7XG4gICAgY29uc3Qgb25DbGlja091dHNpZGUgPSAoMCwgcmVhY3RfMS51c2VDYWxsYmFjaykoKGV2ZW50KSA9PiB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgY2xpY2tJbnNpZGUgPSAoX2EgPSBjb250YWluZXJSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbnRhaW5zKGV2ZW50LnRhcmdldCk7XG4gICAgICAgIGlmICghY2xpY2tJbnNpZGUpIHtcbiAgICAgICAgICAgIGNsb3NlKCk7XG4gICAgICAgIH1cbiAgICB9LCBbY2xvc2VdKTtcbiAgICAoMCwgdXNlRG9jdW1lbnRFdmVudExpc3RlbmVyXzEudXNlRG9jdW1lbnRFdmVudExpc3RlbmVyKSgnbW91c2Vkb3duJywgb25DbGlja091dHNpZGUpO1xuICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7IGNsYXNzTmFtZTogXCJkc2ctY29udGV4dC1tZW51XCIsIHN0eWxlOiB7IGxlZnQ6IGNsaWVudFggKyAncHgnLCB0b3A6IGNsaWVudFkgKyAncHgnIH0sIHJlZjogY29udGFpbmVyUmVmIH0sIGl0ZW1zLm1hcCgoaXRlbSkgPT4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgeyBrZXk6IGl0ZW0udHlwZSwgb25DbGljazogaXRlbS5hY3Rpb24sIGNsYXNzTmFtZTogXCJkc2ctY29udGV4dC1tZW51LWl0ZW1cIiB9LCByZW5kZXJJdGVtKGl0ZW0pKSkpKSk7XG59O1xuZXhwb3J0cy5jcmVhdGVDb250ZXh0TWVudUNvbXBvbmVudCA9IGNyZWF0ZUNvbnRleHRNZW51Q29tcG9uZW50O1xuZXhwb3J0cy5Db250ZXh0TWVudSA9ICgwLCBleHBvcnRzLmNyZWF0ZUNvbnRleHRNZW51Q29tcG9uZW50KShleHBvcnRzLmRlZmF1bHRSZW5kZXJJdGVtKTtcbmV4cG9ydHMuQ29udGV4dE1lbnUuZGlzcGxheU5hbWUgPSAnQ29udGV4dE1lbnUnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Q29udGV4dE1lbnUuanMubWFwIl0sIm5hbWVzIjpbIl9fY3JlYXRlQmluZGluZyIsIk9iamVjdCIsImNyZWF0ZSIsIm8iLCJtIiwiayIsImsyIiwidW5kZWZpbmVkIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9fZXNNb2R1bGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fc2V0TW9kdWxlRGVmYXVsdCIsInYiLCJ2YWx1ZSIsIl9faW1wb3J0U3RhciIsIm1vZCIsInJlc3VsdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImV4cG9ydHMiLCJDb250ZXh0TWVudSIsImNyZWF0ZUNvbnRleHRNZW51Q29tcG9uZW50IiwiZGVmYXVsdFJlbmRlckl0ZW0iLCJSZWFjdCIsInJlcXVpcmUiLCJyZWFjdF8xIiwidXNlRG9jdW1lbnRFdmVudExpc3RlbmVyXzEiLCJpdGVtIiwidHlwZSIsImNyZWF0ZUVsZW1lbnQiLCJGcmFnbWVudCIsImZyb21Sb3ciLCJ0b1JvdyIsInJlbmRlckl0ZW0iLCJjbGllbnRYIiwiY2xpZW50WSIsIml0ZW1zIiwiY2xvc2UiLCJjb250YWluZXJSZWYiLCJ1c2VSZWYiLCJvbkNsaWNrT3V0c2lkZSIsInVzZUNhbGxiYWNrIiwiZXZlbnQiLCJfYSIsImNsaWNrSW5zaWRlIiwiY3VycmVudCIsImNvbnRhaW5zIiwidGFyZ2V0IiwidXNlRG9jdW1lbnRFdmVudExpc3RlbmVyIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJsZWZ0IiwidG9wIiwicmVmIiwibWFwIiwia2V5Iiwib25DbGljayIsImFjdGlvbiIsImRpc3BsYXlOYW1lIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/components/ContextMenu.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/components/DataSheetGrid.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/components/DataSheetGrid.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (void 0) && (void 0).__awaiter || function(thisArg, _arguments, P, generator) {\n    function adopt(value) {\n        return value instanceof P ? value : new P(function(resolve) {\n            resolve(value);\n        });\n    }\n    return new (P || (P = Promise))(function(resolve, reject) {\n        function fulfilled(value) {\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function rejected(value) {\n            try {\n                step(generator[\"throw\"](value));\n            } catch (e) {\n                reject(e);\n            }\n        }\n        function step(result) {\n            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n        }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.DataSheetGrid = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst useColumnWidths_1 = __webpack_require__(/*! ../hooks/useColumnWidths */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useColumnWidths.js\");\nconst react_resize_detector_1 = __webpack_require__(/*! react-resize-detector */ \"(ssr)/./node_modules/react-resize-detector/build/index.esm.js\");\nconst useColumns_1 = __webpack_require__(/*! ../hooks/useColumns */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useColumns.js\");\nconst useEdges_1 = __webpack_require__(/*! ../hooks/useEdges */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useEdges.js\");\nconst useDeepEqualState_1 = __webpack_require__(/*! ../hooks/useDeepEqualState */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDeepEqualState.js\");\nconst useDocumentEventListener_1 = __webpack_require__(/*! ../hooks/useDocumentEventListener */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDocumentEventListener.js\");\nconst useGetBoundingClientRect_1 = __webpack_require__(/*! ../hooks/useGetBoundingClientRect */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useGetBoundingClientRect.js\");\nconst AddRows_1 = __webpack_require__(/*! ./AddRows */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/AddRows.js\");\nconst useDebounceState_1 = __webpack_require__(/*! ../hooks/useDebounceState */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDebounceState.js\");\nconst fast_deep_equal_1 = __importDefault(__webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\"));\nconst ContextMenu_1 = __webpack_require__(/*! ./ContextMenu */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/ContextMenu.js\");\nconst copyPasting_1 = __webpack_require__(/*! ../utils/copyPasting */ \"(ssr)/./node_modules/react-datasheet-grid/dist/utils/copyPasting.js\");\nconst typeCheck_1 = __webpack_require__(/*! ../utils/typeCheck */ \"(ssr)/./node_modules/react-datasheet-grid/dist/utils/typeCheck.js\");\nconst tab_1 = __webpack_require__(/*! ../utils/tab */ \"(ssr)/./node_modules/react-datasheet-grid/dist/utils/tab.js\");\nconst Grid_1 = __webpack_require__(/*! ./Grid */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/Grid.js\");\nconst SelectionRect_1 = __webpack_require__(/*! ./SelectionRect */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/SelectionRect.js\");\nconst useRowHeights_1 = __webpack_require__(/*! ../hooks/useRowHeights */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useRowHeights.js\");\nconst DEFAULT_DATA = [];\nconst DEFAULT_COLUMNS = [];\nconst DEFAULT_CREATE_ROW = ()=>({});\nconst DEFAULT_EMPTY_CALLBACK = ()=>null;\nconst DEFAULT_DUPLICATE_ROW = ({ rowData })=>Object.assign({}, rowData);\n// eslint-disable-next-line react/display-name\nexports.DataSheetGrid = react_1.default.memo(react_1.default.forwardRef(({ value: data = DEFAULT_DATA, className, style, height: maxHeight = 400, onChange = DEFAULT_EMPTY_CALLBACK, columns: rawColumns = DEFAULT_COLUMNS, rowHeight = 40, headerRowHeight = typeof rowHeight === \"number\" ? rowHeight : 40, gutterColumn, stickyRightColumn, rowKey, addRowsComponent: AddRowsComponent = AddRows_1.AddRows, createRow = DEFAULT_CREATE_ROW, autoAddRow = false, lockRows = false, disableExpandSelection = false, duplicateRow = DEFAULT_DUPLICATE_ROW, contextMenuComponent: ContextMenuComponent = ContextMenu_1.ContextMenu, disableContextMenu: disableContextMenuRaw = false, onFocus = DEFAULT_EMPTY_CALLBACK, onBlur = DEFAULT_EMPTY_CALLBACK, onActiveCellChange = DEFAULT_EMPTY_CALLBACK, onSelectionChange = DEFAULT_EMPTY_CALLBACK, rowClassName, cellClassName, onScroll }, ref)=>{\n    var _a, _b, _c, _d, _e, _f;\n    const lastEditingCellRef = (0, react_1.useRef)(null);\n    const disableContextMenu = disableContextMenuRaw || lockRows;\n    const columns = (0, useColumns_1.useColumns)(rawColumns, gutterColumn, stickyRightColumn);\n    const hasStickyRightColumn = Boolean(stickyRightColumn);\n    const innerRef = (0, react_1.useRef)(null);\n    const outerRef = (0, react_1.useRef)(null);\n    const beforeTabIndexRef = (0, react_1.useRef)(null);\n    const afterTabIndexRef = (0, react_1.useRef)(null);\n    // Default value is 1 for the border\n    const [heightDiff, setHeightDiff] = (0, useDebounceState_1.useDebounceState)(1, 100);\n    const { getRowSize, totalSize, getRowIndex } = (0, useRowHeights_1.useRowHeights)({\n        value: data,\n        rowHeight\n    });\n    // Height of the list (including scrollbars and borders) to display\n    const displayHeight = Math.min(maxHeight, headerRowHeight + totalSize(maxHeight) + heightDiff);\n    // Width and height of the scrollable area\n    const { width, height } = (0, react_resize_detector_1.useResizeDetector)({\n        targetRef: outerRef,\n        refreshMode: \"throttle\",\n        refreshRate: 100\n    });\n    setHeightDiff(height ? displayHeight - height : 0);\n    const edges = (0, useEdges_1.useEdges)(outerRef, width, height);\n    const { fullWidth, totalWidth: contentWidth, columnWidths, columnRights } = (0, useColumnWidths_1.useColumnWidths)(columns, width);\n    // x,y coordinates of the right click\n    const [contextMenu, setContextMenu] = (0, react_1.useState)(null);\n    // Items of the context menu\n    const [contextMenuItems, setContextMenuItems] = (0, react_1.useState)([]);\n    // True when the active cell is being edited\n    const [editing, setEditing] = (0, react_1.useState)(false);\n    // Number of rows the user is expanding the selection by, always a number, even when not expanding selection\n    const [expandSelectionRowsCount, setExpandSelectionRowsCount] = (0, react_1.useState)(0);\n    // When not null, represents the index of the row from which we are expanding\n    const [expandingSelectionFromRowIndex, setExpandingSelectionFromRowIndex] = (0, react_1.useState)(null);\n    // Highlighted cell, null when not focused\n    const [activeCell, setActiveCell] = (0, useDeepEqualState_1.useDeepEqualState)(null);\n    // The selection cell and the active cell are the two corners of the selection, null when nothing is selected\n    const [selectionCell, setSelectionCell] = (0, useDeepEqualState_1.useDeepEqualState)(null);\n    // Min and max of the current selection (rectangle defined by the active cell and the selection cell), null when nothing is selected\n    const selection = (0, react_1.useMemo)(()=>activeCell && selectionCell && {\n            min: {\n                col: Math.min(activeCell.col, selectionCell.col),\n                row: Math.min(activeCell.row, selectionCell.row)\n            },\n            max: {\n                col: Math.max(activeCell.col, selectionCell.col),\n                row: Math.max(activeCell.row, selectionCell.row)\n            }\n        }, [\n        activeCell,\n        selectionCell\n    ]);\n    // Behavior of the selection when the user drags the mouse around\n    const [selectionMode, setSelectionMode] = (0, useDeepEqualState_1.useDeepEqualState)({\n        // True when the position of the cursor should impact the columns of the selection\n        columns: false,\n        // True when the position of the cursor should impact the rows of the selection\n        rows: false,\n        // True when the user is dragging the mouse around to select\n        active: false\n    });\n    // Same as expandSelectionRowsCount but is null when we should not be able to expand the selection\n    const expandSelection = disableExpandSelection || editing || selectionMode.active || (activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) === (data === null || data === void 0 ? void 0 : data.length) - 1 || (selection === null || selection === void 0 ? void 0 : selection.max.row) === (data === null || data === void 0 ? void 0 : data.length) - 1 || activeCell && columns.slice(((_a = selection === null || selection === void 0 ? void 0 : selection.min.col) !== null && _a !== void 0 ? _a : activeCell.col) + 1, ((_b = selection === null || selection === void 0 ? void 0 : selection.max.col) !== null && _b !== void 0 ? _b : activeCell.col) + 2).every((column)=>column.disabled === true) ? null : expandSelectionRowsCount;\n    const getInnerBoundingClientRect = (0, useGetBoundingClientRect_1.useGetBoundingClientRect)(innerRef);\n    const getOuterBoundingClientRect = (0, useGetBoundingClientRect_1.useGetBoundingClientRect)(outerRef);\n    // Blur any element on focusing the grid\n    (0, react_1.useEffect)(()=>{\n        var _a;\n        if (activeCell !== null) {\n            ;\n            document.activeElement.blur();\n            (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        activeCell !== null\n    ]);\n    // Extract the coordinates of the cursor from a mouse event\n    const getCursorIndex = (0, react_1.useCallback)((event, force = false, includeSticky = false)=>{\n        const innerBoundingClientRect = getInnerBoundingClientRect(force);\n        const outerBoundingClientRect = includeSticky && getOuterBoundingClientRect(force);\n        if (innerBoundingClientRect && columnRights && columnWidths) {\n            let x = event.clientX - innerBoundingClientRect.left;\n            let y = event.clientY - innerBoundingClientRect.top;\n            if (outerBoundingClientRect) {\n                if (event.clientY - outerBoundingClientRect.top <= headerRowHeight) {\n                    y = 0;\n                }\n                if (event.clientX - outerBoundingClientRect.left <= columnWidths[0]) {\n                    x = 0;\n                }\n                if (hasStickyRightColumn && outerBoundingClientRect.right - event.clientX <= columnWidths[columnWidths.length - 1]) {\n                    x = columnRights[columnRights.length - 2] + 1;\n                }\n            }\n            return {\n                col: columnRights.findIndex((right)=>x < right) - 1,\n                row: getRowIndex(y - headerRowHeight)\n            };\n        }\n        return null;\n    }, [\n        columnRights,\n        columnWidths,\n        data.length,\n        getInnerBoundingClientRect,\n        getOuterBoundingClientRect,\n        headerRowHeight,\n        hasStickyRightColumn,\n        getRowIndex\n    ]);\n    const dataRef = (0, react_1.useRef)(data);\n    dataRef.current = data;\n    const isCellDisabled = (0, react_1.useCallback)((cell)=>{\n        const disabled = columns[cell.col + 1].disabled;\n        return Boolean(typeof disabled === \"function\" ? disabled({\n            rowData: dataRef.current[cell.row],\n            rowIndex: cell.row\n        }) : disabled);\n    }, [\n        columns\n    ]);\n    const insertRowAfter = (0, react_1.useCallback)((row, count = 1)=>{\n        if (lockRows) {\n            return;\n        }\n        setSelectionCell(null);\n        setEditing(false);\n        onChange([\n            ...dataRef.current.slice(0, row + 1),\n            ...new Array(count).fill(0).map(createRow),\n            ...dataRef.current.slice(row + 1)\n        ], [\n            {\n                type: \"CREATE\",\n                fromRowIndex: row + 1,\n                toRowIndex: row + 1 + count\n            }\n        ]);\n        setActiveCell((a)=>({\n                col: (a === null || a === void 0 ? void 0 : a.col) || 0,\n                row: row + count,\n                doNotScrollX: true\n            }));\n    }, [\n        createRow,\n        lockRows,\n        onChange,\n        setActiveCell,\n        setSelectionCell\n    ]);\n    const duplicateRows = (0, react_1.useCallback)((rowMin, rowMax = rowMin)=>{\n        if (lockRows) {\n            return;\n        }\n        onChange([\n            ...dataRef.current.slice(0, rowMax + 1),\n            ...dataRef.current.slice(rowMin, rowMax + 1).map((rowData, i)=>duplicateRow({\n                    rowData,\n                    rowIndex: i + rowMin\n                })),\n            ...dataRef.current.slice(rowMax + 1)\n        ], [\n            {\n                type: \"CREATE\",\n                fromRowIndex: rowMax + 1,\n                toRowIndex: rowMax + 2 + rowMax - rowMin\n            }\n        ]);\n        setActiveCell({\n            col: 0,\n            row: rowMax + 1,\n            doNotScrollX: true\n        });\n        setSelectionCell({\n            col: columns.length - (hasStickyRightColumn ? 3 : 2),\n            row: 2 * rowMax - rowMin + 1,\n            doNotScrollX: true\n        });\n        setEditing(false);\n    }, [\n        columns.length,\n        duplicateRow,\n        lockRows,\n        onChange,\n        setActiveCell,\n        setSelectionCell,\n        hasStickyRightColumn\n    ]);\n    // Scroll to any given cell making sure it is in view\n    const scrollTo = (0, react_1.useCallback)((cell)=>{\n        if (!height || !width) {\n            return;\n        }\n        if (!cell.doNotScrollY) {\n            // Align top\n            const topMax = getRowSize(cell.row).top;\n            // Align bottom\n            const topMin = getRowSize(cell.row).top + getRowSize(cell.row).height + headerRowHeight - height + 1;\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            const scrollTop = outerRef.current.scrollTop;\n            if (scrollTop > topMax) {\n                outerRef.current.scrollTop = topMax;\n            } else if (scrollTop < topMin) {\n                outerRef.current.scrollTop = topMin;\n            }\n        }\n        if (columnRights && columnWidths && outerRef.current && !cell.doNotScrollX) {\n            // Align left\n            const leftMax = columnRights[cell.col] - columnRights[0];\n            // Align right\n            const leftMin = columnRights[cell.col] + columnWidths[cell.col + 1] + (hasStickyRightColumn ? columnWidths[columnWidths.length - 1] : 0) - width + 1;\n            const scrollLeft = outerRef.current.scrollLeft;\n            if (scrollLeft > leftMax) {\n                outerRef.current.scrollLeft = leftMax;\n            } else if (scrollLeft < leftMin) {\n                outerRef.current.scrollLeft = leftMin;\n            }\n        }\n    }, [\n        height,\n        width,\n        headerRowHeight,\n        columnRights,\n        columnWidths,\n        getRowSize,\n        hasStickyRightColumn\n    ]);\n    // Scroll to the selectionCell cell when it changes\n    (0, react_1.useEffect)(()=>{\n        if (selectionCell) {\n            scrollTo(selectionCell);\n        }\n    }, [\n        selectionCell,\n        scrollTo\n    ]);\n    // Scroll to the active cell when it changes\n    (0, react_1.useEffect)(()=>{\n        if (activeCell) {\n            scrollTo(activeCell);\n        }\n    }, [\n        activeCell,\n        scrollTo\n    ]);\n    const setRowData = (0, react_1.useCallback)((rowIndex, item)=>{\n        var _a, _b;\n        onChange([\n            ...(_a = dataRef.current) === null || _a === void 0 ? void 0 : _a.slice(0, rowIndex),\n            item,\n            ...(_b = dataRef.current) === null || _b === void 0 ? void 0 : _b.slice(rowIndex + 1)\n        ], [\n            {\n                type: \"UPDATE\",\n                fromRowIndex: rowIndex,\n                toRowIndex: rowIndex + 1\n            }\n        ]);\n    }, [\n        onChange\n    ]);\n    const deleteRows = (0, react_1.useCallback)((rowMin, rowMax = rowMin)=>{\n        if (lockRows) {\n            return;\n        }\n        setEditing(false);\n        setActiveCell((a)=>{\n            const row = Math.min(dataRef.current.length - 2 - rowMax + rowMin, rowMin);\n            if (row < 0) {\n                return null;\n            }\n            return a && {\n                col: a.col,\n                row\n            };\n        });\n        setSelectionCell(null);\n        onChange([\n            ...dataRef.current.slice(0, rowMin),\n            ...dataRef.current.slice(rowMax + 1)\n        ], [\n            {\n                type: \"DELETE\",\n                fromRowIndex: rowMin,\n                toRowIndex: rowMax + 1\n            }\n        ]);\n    }, [\n        lockRows,\n        onChange,\n        setActiveCell,\n        setSelectionCell\n    ]);\n    const deleteSelection = (0, react_1.useCallback)((smartDelete = true)=>{\n        if (!activeCell) {\n            return;\n        }\n        const min = (selection === null || selection === void 0 ? void 0 : selection.min) || activeCell;\n        const max = (selection === null || selection === void 0 ? void 0 : selection.max) || activeCell;\n        if (data.slice(min.row, max.row + 1).every((rowData, i)=>columns.every((column)=>column.isCellEmpty({\n                    rowData,\n                    rowIndex: i + min.row\n                })))) {\n            if (smartDelete) {\n                deleteRows(min.row, max.row);\n            }\n            return;\n        }\n        const newData = [\n            ...data\n        ];\n        for(let row = min.row; row <= max.row; ++row){\n            for(let col = min.col; col <= max.col; ++col){\n                if (!isCellDisabled({\n                    col,\n                    row\n                })) {\n                    const { deleteValue = ({ rowData })=>rowData } = columns[col + 1];\n                    newData[row] = deleteValue({\n                        rowData: newData[row],\n                        rowIndex: row\n                    });\n                }\n            }\n        }\n        if (smartDelete && (0, fast_deep_equal_1.default)(newData, data)) {\n            setActiveCell({\n                col: 0,\n                row: min.row,\n                doNotScrollX: true\n            });\n            setSelectionCell({\n                col: columns.length - (hasStickyRightColumn ? 3 : 2),\n                row: max.row,\n                doNotScrollX: true\n            });\n            return;\n        }\n        onChange(newData, [\n            {\n                type: \"UPDATE\",\n                fromRowIndex: min.row,\n                toRowIndex: max.row + 1\n            }\n        ]);\n    }, [\n        activeCell,\n        columns,\n        data,\n        deleteRows,\n        isCellDisabled,\n        onChange,\n        selection === null || selection === void 0 ? void 0 : selection.max,\n        selection === null || selection === void 0 ? void 0 : selection.min,\n        setActiveCell,\n        setSelectionCell,\n        hasStickyRightColumn\n    ]);\n    const stopEditing = (0, react_1.useCallback)(({ nextRow = true } = {})=>{\n        if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) === dataRef.current.length - 1) {\n            if (nextRow && autoAddRow) {\n                insertRowAfter(activeCell.row);\n            } else {\n                setEditing(false);\n            }\n        } else {\n            setEditing(false);\n            if (nextRow) {\n                setActiveCell((a)=>a && {\n                        col: a.col,\n                        row: a.row + 1\n                    });\n            }\n        }\n    }, [\n        activeCell === null || activeCell === void 0 ? void 0 : activeCell.row,\n        autoAddRow,\n        insertRowAfter,\n        setActiveCell\n    ]);\n    const onCopy = (0, react_1.useCallback)((event)=>__awaiter(void 0, void 0, void 0, function*() {\n            var _g, _h;\n            if (!editing && activeCell) {\n                const copyData = [];\n                const min = (selection === null || selection === void 0 ? void 0 : selection.min) || activeCell;\n                const max = (selection === null || selection === void 0 ? void 0 : selection.max) || activeCell;\n                for(let row = min.row; row <= max.row; ++row){\n                    copyData.push([]);\n                    for(let col = min.col; col <= max.col; ++col){\n                        const { copyValue = ()=>null } = columns[col + 1];\n                        copyData[row - min.row].push(copyValue({\n                            rowData: data[row],\n                            rowIndex: row\n                        }));\n                    }\n                }\n                const textPlain = copyData.map((row)=>row.join(\"\t\")).join(\"\\n\");\n                const textHtml = `<table>${copyData.map((row)=>`<tr>${row.map((cell)=>`<td>${(0, copyPasting_1.encodeHtml)(String(cell !== null && cell !== void 0 ? cell : \"\")).replace(/\\n/g, \"<br/>\")}</td>`).join(\"\")}</tr>`).join(\"\")}</table>`;\n                if (event !== undefined) {\n                    (_g = event.clipboardData) === null || _g === void 0 ? void 0 : _g.setData(\"text/plain\", textPlain);\n                    (_h = event.clipboardData) === null || _h === void 0 ? void 0 : _h.setData(\"text/html\", textHtml);\n                    event.preventDefault();\n                    return;\n                }\n                let success = false;\n                if (navigator.clipboard.write !== undefined) {\n                    const textBlob = new Blob([\n                        textPlain\n                    ], {\n                        type: \"text/plain\"\n                    });\n                    const htmlBlob = new Blob([\n                        textHtml\n                    ], {\n                        type: \"text/html\"\n                    });\n                    const clipboardData = [\n                        new ClipboardItem({\n                            \"text/plain\": textBlob,\n                            \"text/html\": htmlBlob\n                        })\n                    ];\n                    yield navigator.clipboard.write(clipboardData).then(()=>{\n                        success = true;\n                    });\n                } else if (navigator.clipboard.writeText !== undefined) {\n                    yield navigator.clipboard.writeText(textPlain).then(()=>{\n                        success = true;\n                    });\n                } else if (document.execCommand !== undefined) {\n                    const result = document.execCommand(\"copy\");\n                    if (result) {\n                        success = true;\n                    }\n                }\n                if (!success) {\n                    alert(\"This action is unavailable in your browser, but you can still use Ctrl+C for copy or Ctrl+X for cut\");\n                }\n            }\n        }), [\n        activeCell,\n        columns,\n        data,\n        editing,\n        selection\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"copy\", onCopy);\n    const onCut = (0, react_1.useCallback)((event)=>{\n        if (!editing && activeCell) {\n            onCopy(event);\n            deleteSelection(false);\n        }\n    }, [\n        activeCell,\n        deleteSelection,\n        editing,\n        onCopy\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"cut\", onCut);\n    const applyPasteDataToDatasheet = (0, react_1.useCallback)((pasteData)=>__awaiter(void 0, void 0, void 0, function*() {\n            var _j, _k;\n            if (!editing && activeCell) {\n                const min = (selection === null || selection === void 0 ? void 0 : selection.min) || activeCell;\n                const max = (selection === null || selection === void 0 ? void 0 : selection.max) || activeCell;\n                const results = yield Promise.all(pasteData[0].map((_, columnIndex)=>{\n                    var _a, _b;\n                    const prePasteValues = (_a = columns[min.col + columnIndex + 1]) === null || _a === void 0 ? void 0 : _a.prePasteValues;\n                    const values = pasteData.map((row)=>row[columnIndex]);\n                    return (_b = prePasteValues === null || prePasteValues === void 0 ? void 0 : prePasteValues(values)) !== null && _b !== void 0 ? _b : values;\n                }));\n                pasteData = pasteData.map((_, rowIndex)=>results.map((column)=>column[rowIndex]));\n                // Paste single row\n                if (pasteData.length === 1) {\n                    const newData = [\n                        ...data\n                    ];\n                    for(let columnIndex = 0; columnIndex < pasteData[0].length; columnIndex++){\n                        const pasteValue = (_j = columns[min.col + columnIndex + 1]) === null || _j === void 0 ? void 0 : _j.pasteValue;\n                        if (pasteValue) {\n                            for(let rowIndex = min.row; rowIndex <= max.row; rowIndex++){\n                                if (!isCellDisabled({\n                                    col: columnIndex + min.col,\n                                    row: rowIndex\n                                })) {\n                                    newData[rowIndex] = yield pasteValue({\n                                        rowData: newData[rowIndex],\n                                        value: pasteData[0][columnIndex],\n                                        rowIndex\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    onChange(newData, [\n                        {\n                            type: \"UPDATE\",\n                            fromRowIndex: min.row,\n                            toRowIndex: max.row + 1\n                        }\n                    ]);\n                    setActiveCell({\n                        col: min.col,\n                        row: min.row\n                    });\n                    setSelectionCell({\n                        col: Math.min(min.col + pasteData[0].length - 1, columns.length - (hasStickyRightColumn ? 3 : 2)),\n                        row: max.row\n                    });\n                } else {\n                    // Paste multiple rows\n                    let newData = [\n                        ...data\n                    ];\n                    const missingRows = min.row + pasteData.length - data.length;\n                    if (missingRows > 0) {\n                        if (!lockRows) {\n                            newData = [\n                                ...newData,\n                                ...new Array(missingRows).fill(0).map(()=>createRow())\n                            ];\n                        } else {\n                            pasteData.splice(pasteData.length - missingRows, missingRows);\n                        }\n                    }\n                    for(let columnIndex = 0; columnIndex < pasteData[0].length && min.col + columnIndex < columns.length - (hasStickyRightColumn ? 2 : 1); columnIndex++){\n                        const pasteValue = (_k = columns[min.col + columnIndex + 1]) === null || _k === void 0 ? void 0 : _k.pasteValue;\n                        if (pasteValue) {\n                            for(let rowIndex = 0; rowIndex < pasteData.length; rowIndex++){\n                                if (!isCellDisabled({\n                                    col: min.col + columnIndex,\n                                    row: min.row + rowIndex\n                                })) {\n                                    newData[min.row + rowIndex] = yield pasteValue({\n                                        rowData: newData[min.row + rowIndex],\n                                        value: pasteData[rowIndex][columnIndex],\n                                        rowIndex: min.row + rowIndex\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    const operations = [\n                        {\n                            type: \"UPDATE\",\n                            fromRowIndex: min.row,\n                            toRowIndex: min.row + pasteData.length - (!lockRows && missingRows > 0 ? missingRows : 0)\n                        }\n                    ];\n                    if (missingRows > 0 && !lockRows) {\n                        operations.push({\n                            type: \"CREATE\",\n                            fromRowIndex: min.row + pasteData.length - missingRows,\n                            toRowIndex: min.row + pasteData.length\n                        });\n                    }\n                    onChange(newData, operations);\n                    setActiveCell({\n                        col: min.col,\n                        row: min.row\n                    });\n                    setSelectionCell({\n                        col: Math.min(min.col + pasteData[0].length - 1, columns.length - (hasStickyRightColumn ? 3 : 2)),\n                        row: min.row + pasteData.length - 1\n                    });\n                }\n            }\n        }), [\n        activeCell,\n        columns,\n        createRow,\n        data,\n        editing,\n        hasStickyRightColumn,\n        isCellDisabled,\n        lockRows,\n        onChange,\n        selection === null || selection === void 0 ? void 0 : selection.max,\n        selection === null || selection === void 0 ? void 0 : selection.min,\n        setActiveCell,\n        setSelectionCell\n    ]);\n    const onPaste = (0, react_1.useCallback)((event)=>{\n        var _a, _b, _c, _d, _e, _f;\n        if (activeCell && !editing) {\n            let pasteData = [\n                [\n                    \"\"\n                ]\n            ];\n            if ((_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.types.includes(\"text/html\")) {\n                pasteData = (0, copyPasting_1.parseTextHtmlData)((_b = event.clipboardData) === null || _b === void 0 ? void 0 : _b.getData(\"text/html\"));\n            } else if ((_c = event.clipboardData) === null || _c === void 0 ? void 0 : _c.types.includes(\"text/plain\")) {\n                pasteData = (0, copyPasting_1.parseTextPlainData)((_d = event.clipboardData) === null || _d === void 0 ? void 0 : _d.getData(\"text/plain\"));\n            } else if ((_e = event.clipboardData) === null || _e === void 0 ? void 0 : _e.types.includes(\"text\")) {\n                pasteData = (0, copyPasting_1.parseTextPlainData)((_f = event.clipboardData) === null || _f === void 0 ? void 0 : _f.getData(\"text\"));\n            }\n            applyPasteDataToDatasheet(pasteData);\n            event.preventDefault();\n        }\n    }, [\n        activeCell,\n        applyPasteDataToDatasheet,\n        editing\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"paste\", onPaste);\n    const onMouseDown = (0, react_1.useCallback)((event)=>{\n        var _a, _b, _c;\n        if (contextMenu && contextMenuItems.length) {\n            return;\n        }\n        const rightClick = event.button === 2 || event.button === 0 && event.ctrlKey;\n        const clickInside = ((_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || false;\n        const cursorIndex = clickInside ? getCursorIndex(event, true, true) : null;\n        if (!clickInside && editing && activeCell && columns[activeCell.col + 1].keepFocus) {\n            return;\n        }\n        if (event.target instanceof HTMLElement && event.target.className.includes(\"dsg-expand-rows-indicator\")) {\n            setExpandingSelectionFromRowIndex(Math.max((_b = activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) !== null && _b !== void 0 ? _b : 0, (_c = selection === null || selection === void 0 ? void 0 : selection.max.row) !== null && _c !== void 0 ? _c : 0));\n            return;\n        }\n        const clickOnActiveCell = cursorIndex && activeCell && activeCell.col === cursorIndex.col && activeCell.row === cursorIndex.row && !isCellDisabled(activeCell);\n        if (clickOnActiveCell && editing) {\n            return;\n        }\n        const clickOnStickyRightColumn = (cursorIndex === null || cursorIndex === void 0 ? void 0 : cursorIndex.col) === columns.length - 2 && hasStickyRightColumn;\n        const rightClickInSelection = rightClick && selection && cursorIndex && cursorIndex.row >= selection.min.row && cursorIndex.row <= selection.max.row && cursorIndex.col >= selection.min.col && cursorIndex.col <= selection.max.col;\n        const rightClickOnSelectedHeaders = rightClick && selection && cursorIndex && cursorIndex.row === -1 && cursorIndex.col >= selection.min.col && cursorIndex.col <= selection.max.col;\n        const rightClickOnSelectedGutter = rightClick && selection && cursorIndex && cursorIndex.row >= selection.min.row && cursorIndex.row <= selection.max.row && cursorIndex.col === -1;\n        const clickOnSelectedStickyRightColumn = clickOnStickyRightColumn && selection && cursorIndex && cursorIndex.row >= selection.min.row && cursorIndex.row <= selection.max.row;\n        if (rightClick && !disableContextMenu) {\n            setContextMenu({\n                x: event.clientX,\n                y: event.clientY,\n                cursorIndex: cursorIndex\n            });\n        }\n        if ((!(event.shiftKey && activeCell) || rightClick) && data.length > 0) {\n            setActiveCell(cursorIndex && {\n                col: (rightClickInSelection || rightClickOnSelectedHeaders) && activeCell ? activeCell.col : Math.max(0, clickOnStickyRightColumn ? 0 : cursorIndex.col),\n                row: (rightClickInSelection || rightClickOnSelectedGutter || clickOnSelectedStickyRightColumn) && activeCell ? activeCell.row : Math.max(0, cursorIndex.row),\n                doNotScrollX: Boolean(rightClickInSelection && activeCell || clickOnStickyRightColumn || cursorIndex.col === -1),\n                doNotScrollY: Boolean(rightClickInSelection && activeCell || cursorIndex.row === -1)\n            });\n        }\n        if (clickOnActiveCell && !rightClick) {\n            lastEditingCellRef.current = activeCell;\n        }\n        setEditing(Boolean(clickOnActiveCell && !rightClick));\n        setSelectionMode(cursorIndex && !rightClick ? {\n            columns: cursorIndex.col !== -1 && !clickOnStickyRightColumn || Boolean(event.shiftKey && activeCell),\n            rows: cursorIndex.row !== -1 || Boolean(event.shiftKey && activeCell),\n            active: true\n        } : {\n            columns: false,\n            rows: false,\n            active: false\n        });\n        if (event.shiftKey && activeCell && !rightClick) {\n            setSelectionCell(cursorIndex && {\n                col: Math.max(0, cursorIndex.col - (clickOnStickyRightColumn ? 1 : 0)),\n                row: Math.max(0, cursorIndex.row)\n            });\n        } else if (!rightClickInSelection) {\n            if (cursorIndex && ((cursorIndex === null || cursorIndex === void 0 ? void 0 : cursorIndex.col) === -1 || (cursorIndex === null || cursorIndex === void 0 ? void 0 : cursorIndex.row) === -1 || clickOnStickyRightColumn)) {\n                let col = cursorIndex.col;\n                let row = cursorIndex.row;\n                let doNotScrollX = false;\n                let doNotScrollY = false;\n                if (cursorIndex.col === -1 || clickOnStickyRightColumn) {\n                    col = columns.length - (hasStickyRightColumn ? 3 : 2);\n                    doNotScrollX = true;\n                }\n                if (cursorIndex.row === -1) {\n                    row = data.length - 1;\n                    doNotScrollY = true;\n                }\n                if (rightClickOnSelectedHeaders && selectionCell) {\n                    col = selectionCell.col;\n                    doNotScrollY = true;\n                }\n                if ((rightClickOnSelectedGutter || clickOnSelectedStickyRightColumn) && selectionCell) {\n                    row = selectionCell.row;\n                    doNotScrollX = true;\n                }\n                setSelectionCell({\n                    col,\n                    row,\n                    doNotScrollX,\n                    doNotScrollY\n                });\n            } else {\n                setSelectionCell(null);\n            }\n            if (clickInside) {\n                event.preventDefault();\n            }\n        }\n    }, [\n        contextMenu,\n        contextMenuItems.length,\n        getCursorIndex,\n        editing,\n        activeCell,\n        columns,\n        isCellDisabled,\n        selection,\n        hasStickyRightColumn,\n        disableContextMenu,\n        setSelectionMode,\n        setActiveCell,\n        setSelectionCell,\n        selectionCell,\n        data.length\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"mousedown\", onMouseDown);\n    const onMouseUp = (0, react_1.useCallback)(()=>{\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (expandingSelectionFromRowIndex !== null) {\n            if (expandSelectionRowsCount > 0 && activeCell) {\n                let copyData = [];\n                const min = (selection === null || selection === void 0 ? void 0 : selection.min) || activeCell;\n                const max = (selection === null || selection === void 0 ? void 0 : selection.max) || activeCell;\n                for(let row = min.row; row <= max.row; ++row){\n                    copyData.push([]);\n                    for(let col = min.col; col <= max.col; ++col){\n                        const { copyValue = ()=>null } = columns[col + 1];\n                        copyData[row - min.row].push(String((_a = copyValue({\n                            rowData: data[row],\n                            rowIndex: row\n                        })) !== null && _a !== void 0 ? _a : \"\"));\n                    }\n                }\n                Promise.all(copyData[0].map((_, columnIndex)=>{\n                    var _a, _b;\n                    const prePasteValues = (_a = columns[min.col + columnIndex + 1]) === null || _a === void 0 ? void 0 : _a.prePasteValues;\n                    const values = copyData.map((row)=>row[columnIndex]);\n                    return (_b = prePasteValues === null || prePasteValues === void 0 ? void 0 : prePasteValues(values)) !== null && _b !== void 0 ? _b : values;\n                })).then((results)=>{\n                    var _a;\n                    copyData = copyData.map((_, rowIndex)=>results.map((column)=>column[rowIndex]));\n                    const newData = [\n                        ...data\n                    ];\n                    for(let columnIndex = 0; columnIndex < copyData[0].length; columnIndex++){\n                        const pasteValue = (_a = columns[min.col + columnIndex + 1]) === null || _a === void 0 ? void 0 : _a.pasteValue;\n                        if (pasteValue) {\n                            for(let rowIndex = max.row + 1; rowIndex <= max.row + expandSelectionRowsCount; rowIndex++){\n                                if (!isCellDisabled({\n                                    col: columnIndex + min.col,\n                                    row: rowIndex\n                                })) {\n                                    newData[rowIndex] = pasteValue({\n                                        rowData: newData[rowIndex],\n                                        value: copyData[(rowIndex - max.row - 1) % copyData.length][columnIndex],\n                                        rowIndex\n                                    });\n                                }\n                            }\n                        }\n                    }\n                    onChange(newData, [\n                        {\n                            type: \"UPDATE\",\n                            fromRowIndex: max.row + 1,\n                            toRowIndex: max.row + 1 + expandSelectionRowsCount\n                        }\n                    ]);\n                });\n                setExpandSelectionRowsCount(0);\n                setActiveCell({\n                    col: Math.min((_b = activeCell === null || activeCell === void 0 ? void 0 : activeCell.col) !== null && _b !== void 0 ? _b : Infinity, (_c = selection === null || selection === void 0 ? void 0 : selection.min.col) !== null && _c !== void 0 ? _c : Infinity),\n                    row: Math.min((_d = activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) !== null && _d !== void 0 ? _d : Infinity, (_e = selection === null || selection === void 0 ? void 0 : selection.min.row) !== null && _e !== void 0 ? _e : Infinity),\n                    doNotScrollX: true,\n                    doNotScrollY: true\n                });\n                setSelectionCell({\n                    col: Math.max((_f = activeCell === null || activeCell === void 0 ? void 0 : activeCell.col) !== null && _f !== void 0 ? _f : 0, (_g = selection === null || selection === void 0 ? void 0 : selection.max.col) !== null && _g !== void 0 ? _g : 0),\n                    row: Math.max((_h = activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) !== null && _h !== void 0 ? _h : 0, (_j = selection === null || selection === void 0 ? void 0 : selection.max.row) !== null && _j !== void 0 ? _j : 0) + expandSelectionRowsCount\n                });\n            }\n            setExpandingSelectionFromRowIndex(null);\n        }\n        setSelectionMode({\n            columns: false,\n            rows: false,\n            active: false\n        });\n    }, [\n        expandingSelectionFromRowIndex,\n        setSelectionMode,\n        expandSelectionRowsCount,\n        activeCell,\n        selection === null || selection === void 0 ? void 0 : selection.min,\n        selection === null || selection === void 0 ? void 0 : selection.max,\n        data,\n        onChange,\n        setActiveCell,\n        setSelectionCell,\n        columns,\n        isCellDisabled\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"mouseup\", onMouseUp);\n    const onMouseMove = (0, react_1.useCallback)((event)=>{\n        if (expandingSelectionFromRowIndex !== null) {\n            const cursorIndex = getCursorIndex(event);\n            if (cursorIndex) {\n                setExpandSelectionRowsCount(Math.max(0, cursorIndex.row - expandingSelectionFromRowIndex));\n                scrollTo({\n                    col: cursorIndex.col,\n                    row: Math.max(cursorIndex.row, expandingSelectionFromRowIndex)\n                });\n            }\n        }\n        if (selectionMode.active) {\n            const cursorIndex = getCursorIndex(event);\n            const lastColumnIndex = columns.length - (hasStickyRightColumn ? 3 : 2);\n            setSelectionCell(cursorIndex && {\n                col: selectionMode.columns ? Math.max(0, Math.min(lastColumnIndex, cursorIndex.col)) : lastColumnIndex,\n                row: selectionMode.rows ? Math.max(0, cursorIndex.row) : data.length - 1,\n                doNotScrollX: !selectionMode.columns,\n                doNotScrollY: !selectionMode.rows\n            });\n            setEditing(false);\n        }\n    }, [\n        scrollTo,\n        selectionMode.active,\n        selectionMode.columns,\n        selectionMode.rows,\n        getCursorIndex,\n        columns.length,\n        hasStickyRightColumn,\n        setSelectionCell,\n        data.length,\n        expandingSelectionFromRowIndex\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"mousemove\", onMouseMove);\n    const onKeyDown = (0, react_1.useCallback)((event)=>{\n        if (!activeCell) {\n            return;\n        }\n        if (event.isComposing) {\n            return;\n        }\n        // Tab from last cell of a row\n        if (event.key === \"Tab\" && !event.shiftKey && activeCell.col === columns.length - (hasStickyRightColumn ? 3 : 2) && !columns[activeCell.col + 1].disableKeys) {\n            // Last row\n            if (activeCell.row === data.length - 1) {\n                if (afterTabIndexRef.current) {\n                    event.preventDefault();\n                    setActiveCell(null);\n                    setSelectionCell(null);\n                    setEditing(false);\n                    const allElements = (0, tab_1.getAllTabbableElements)();\n                    const index = allElements.indexOf(afterTabIndexRef.current);\n                    allElements[(index + 1) % allElements.length].focus();\n                    return;\n                }\n            } else {\n                setActiveCell((cell)=>{\n                    var _a;\n                    return {\n                        col: 0,\n                        row: ((_a = cell === null || cell === void 0 ? void 0 : cell.row) !== null && _a !== void 0 ? _a : 0) + 1\n                    };\n                });\n                setSelectionCell(null);\n                setEditing(false);\n                event.preventDefault();\n                return;\n            }\n        }\n        // Shift+Tab from first cell of a row\n        if (event.key === \"Tab\" && event.shiftKey && activeCell.col === 0 && !columns[activeCell.col + 1].disableKeys) {\n            // First row\n            if (activeCell.row === 0) {\n                if (beforeTabIndexRef.current) {\n                    event.preventDefault();\n                    setActiveCell(null);\n                    setSelectionCell(null);\n                    setEditing(false);\n                    const allElements = (0, tab_1.getAllTabbableElements)();\n                    const index = allElements.indexOf(beforeTabIndexRef.current);\n                    allElements[(index - 1 + allElements.length) % allElements.length].focus();\n                    return;\n                }\n            } else {\n                setActiveCell((cell)=>{\n                    var _a;\n                    return {\n                        col: columns.length - (hasStickyRightColumn ? 3 : 2),\n                        row: ((_a = cell === null || cell === void 0 ? void 0 : cell.row) !== null && _a !== void 0 ? _a : 1) - 1\n                    };\n                });\n                setSelectionCell(null);\n                setEditing(false);\n                event.preventDefault();\n                return;\n            }\n        }\n        if (event.key.startsWith(\"Arrow\") || event.key === \"Tab\") {\n            if (editing && columns[activeCell.col + 1].disableKeys) {\n                return;\n            }\n            if (editing && [\n                \"ArrowLeft\",\n                \"ArrowRight\"\n            ].includes(event.key)) {\n                return;\n            }\n            const add = ([x, y], cell)=>cell && {\n                    col: Math.max(0, Math.min(columns.length - (hasStickyRightColumn ? 3 : 2), cell.col + x)),\n                    row: Math.max(0, Math.min(data.length - 1, cell.row + y))\n                };\n            if (event.key === \"Tab\" && event.shiftKey) {\n                setActiveCell((cell)=>add([\n                        -1,\n                        0\n                    ], cell));\n                setSelectionCell(null);\n            } else {\n                const direction = {\n                    ArrowDown: [\n                        0,\n                        1\n                    ],\n                    ArrowUp: [\n                        0,\n                        -1\n                    ],\n                    ArrowLeft: [\n                        -1,\n                        0\n                    ],\n                    ArrowRight: [\n                        1,\n                        0\n                    ],\n                    Tab: [\n                        1,\n                        0\n                    ]\n                }[event.key];\n                if (event.ctrlKey || event.metaKey) {\n                    direction[0] *= columns.length;\n                    direction[1] *= data.length;\n                }\n                if (event.shiftKey) {\n                    setSelectionCell((cell)=>add(direction, cell || activeCell));\n                } else {\n                    setActiveCell((cell)=>add(direction, cell));\n                    setSelectionCell(null);\n                }\n            }\n            setEditing(false);\n            event.preventDefault();\n        } else if (event.key === \"Escape\") {\n            if (!editing && !selectionCell) {\n                setActiveCell(null);\n            }\n            setSelectionCell(null);\n            setEditing(false);\n        } else if ((event.key === \"Enter\" || event.key === \"F2\") && !event.ctrlKey && !event.metaKey && !event.altKey && !event.shiftKey) {\n            setSelectionCell(null);\n            if (editing) {\n                if (!columns[activeCell.col + 1].disableKeys) {\n                    stopEditing();\n                    event.preventDefault();\n                }\n            } else if (!isCellDisabled(activeCell)) {\n                lastEditingCellRef.current = activeCell;\n                setEditing(true);\n                scrollTo(activeCell);\n                event.preventDefault();\n            }\n        } else if (event.key === \"Enter\" && !event.ctrlKey && !event.metaKey && !event.altKey && event.shiftKey) {\n            insertRowAfter((selection === null || selection === void 0 ? void 0 : selection.max.row) || activeCell.row);\n        } else if (event.key === \"d\" && (event.ctrlKey || event.metaKey) && !event.altKey && !event.shiftKey) {\n            duplicateRows((selection === null || selection === void 0 ? void 0 : selection.min.row) || activeCell.row, selection === null || selection === void 0 ? void 0 : selection.max.row);\n            event.preventDefault();\n        } else if (((0, copyPasting_1.isPrintableUnicode)(event.key) || event.code.match(/Key[A-Z]$/)) && !event.ctrlKey && !event.metaKey && !event.altKey) {\n            if (!editing && !isCellDisabled(activeCell)) {\n                lastEditingCellRef.current = activeCell;\n                setSelectionCell(null);\n                setEditing(true);\n                scrollTo(activeCell);\n            }\n        } else if ([\n            \"Backspace\",\n            \"Delete\"\n        ].includes(event.key)) {\n            if (!editing) {\n                deleteSelection();\n                event.preventDefault();\n            }\n        } else if (event.key === \"a\" && (event.ctrlKey || event.metaKey)) {\n            if (!editing) {\n                setActiveCell({\n                    col: 0,\n                    row: 0,\n                    doNotScrollY: true,\n                    doNotScrollX: true\n                });\n                setSelectionCell({\n                    col: columns.length - (hasStickyRightColumn ? 3 : 2),\n                    row: data.length - 1,\n                    doNotScrollY: true,\n                    doNotScrollX: true\n                });\n                event.preventDefault();\n            }\n        }\n    }, [\n        activeCell,\n        columns,\n        data.length,\n        deleteSelection,\n        duplicateRows,\n        editing,\n        insertRowAfter,\n        isCellDisabled,\n        scrollTo,\n        selection === null || selection === void 0 ? void 0 : selection.max.row,\n        selection === null || selection === void 0 ? void 0 : selection.min.row,\n        selectionCell,\n        setActiveCell,\n        setSelectionCell,\n        stopEditing,\n        hasStickyRightColumn\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"keydown\", onKeyDown);\n    const onContextMenu = (0, react_1.useCallback)((event)=>{\n        var _a;\n        const clickInside = ((_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.contains(event.target)) || false;\n        const cursorIndex = clickInside ? getCursorIndex(event, true, true) : null;\n        const clickOnActiveCell = cursorIndex && activeCell && activeCell.col === cursorIndex.col && activeCell.row === cursorIndex.row && editing;\n        if (clickInside && !clickOnActiveCell) {\n            event.preventDefault();\n        }\n    }, [\n        getCursorIndex,\n        activeCell,\n        editing\n    ]);\n    (0, useDocumentEventListener_1.useDocumentEventListener)(\"contextmenu\", onContextMenu);\n    (0, react_1.useEffect)(()=>{\n        const items = [];\n        if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) !== undefined) {\n            items.push({\n                type: \"COPY\",\n                action: ()=>{\n                    onCopy();\n                    setContextMenu(null);\n                }\n            }, {\n                type: \"CUT\",\n                action: ()=>{\n                    onCut();\n                    setContextMenu(null);\n                }\n            }, {\n                type: \"PASTE\",\n                action: ()=>__awaiter(void 0, void 0, void 0, function*() {\n                        if (navigator.clipboard.read !== undefined) {\n                            const items = yield navigator.clipboard.read();\n                            items.forEach((item)=>__awaiter(void 0, void 0, void 0, function*() {\n                                    let pasteData = [\n                                        [\n                                            \"\"\n                                        ]\n                                    ];\n                                    if (item.types.includes(\"text/html\")) {\n                                        const htmlTextData = yield item.getType(\"text/html\");\n                                        pasteData = (0, copyPasting_1.parseTextHtmlData)((yield htmlTextData.text()));\n                                    } else if (item.types.includes(\"text/plain\")) {\n                                        const plainTextData = yield item.getType(\"text/plain\");\n                                        pasteData = (0, copyPasting_1.parseTextPlainData)((yield plainTextData.text()));\n                                    } else if (item.types.includes(\"text\")) {\n                                        const htmlTextData = yield item.getType(\"text\");\n                                        pasteData = (0, copyPasting_1.parseTextHtmlData)((yield htmlTextData.text()));\n                                    }\n                                    applyPasteDataToDatasheet(pasteData);\n                                }));\n                        } else if (navigator.clipboard.readText !== undefined) {\n                            const text = yield navigator.clipboard.readText();\n                            applyPasteDataToDatasheet((0, copyPasting_1.parseTextPlainData)(text));\n                        } else {\n                            alert(\"This action is unavailable in your browser, but you can still use Ctrl+V for paste\");\n                        }\n                        setContextMenu(null);\n                    })\n            });\n        }\n        if ((selection === null || selection === void 0 ? void 0 : selection.max.row) !== undefined) {\n            items.push({\n                type: \"INSERT_ROW_BELLOW\",\n                action: ()=>{\n                    setContextMenu(null);\n                    insertRowAfter(selection.max.row);\n                }\n            });\n        } else if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) !== undefined) {\n            items.push({\n                type: \"INSERT_ROW_BELLOW\",\n                action: ()=>{\n                    setContextMenu(null);\n                    insertRowAfter(activeCell.row);\n                }\n            });\n        }\n        if ((selection === null || selection === void 0 ? void 0 : selection.min.row) !== undefined && selection.min.row !== selection.max.row) {\n            items.push({\n                type: \"DUPLICATE_ROWS\",\n                fromRow: selection.min.row + 1,\n                toRow: selection.max.row + 1,\n                action: ()=>{\n                    setContextMenu(null);\n                    duplicateRows(selection.min.row, selection.max.row);\n                }\n            });\n        } else if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) !== undefined) {\n            items.push({\n                type: \"DUPLICATE_ROW\",\n                action: ()=>{\n                    setContextMenu(null);\n                    duplicateRows(activeCell.row);\n                }\n            });\n        }\n        if ((selection === null || selection === void 0 ? void 0 : selection.min.row) !== undefined && selection.min.row !== selection.max.row) {\n            items.push({\n                type: \"DELETE_ROWS\",\n                fromRow: selection.min.row + 1,\n                toRow: selection.max.row + 1,\n                action: ()=>{\n                    setContextMenu(null);\n                    deleteRows(selection.min.row, selection.max.row);\n                }\n            });\n        } else if ((activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) !== undefined) {\n            items.push({\n                type: \"DELETE_ROW\",\n                action: ()=>{\n                    setContextMenu(null);\n                    deleteRows(activeCell.row);\n                }\n            });\n        }\n        setContextMenuItems(items);\n        if (!items.length) {\n            setContextMenu(null);\n        }\n    }, [\n        selection,\n        activeCell,\n        deleteRows,\n        duplicateRows,\n        insertRowAfter,\n        onCut,\n        onCopy,\n        applyPasteDataToDatasheet\n    ]);\n    const contextMenuItemsRef = (0, react_1.useRef)(contextMenuItems);\n    contextMenuItemsRef.current = contextMenuItems;\n    const getContextMenuItems = (0, react_1.useCallback)(()=>contextMenuItemsRef.current, []);\n    (0, react_1.useImperativeHandle)(ref, ()=>({\n            activeCell: (0, typeCheck_1.getCellWithId)(activeCell, columns),\n            selection: (0, typeCheck_1.getSelectionWithId)(selection !== null && selection !== void 0 ? selection : activeCell ? {\n                min: activeCell,\n                max: activeCell\n            } : null, columns),\n            setSelection: (value)=>{\n                const selection = (0, typeCheck_1.getSelection)(value, columns.length - (hasStickyRightColumn ? 2 : 1), data.length, columns);\n                setActiveCell((selection === null || selection === void 0 ? void 0 : selection.min) || null);\n                setEditing(false);\n                setSelectionMode({\n                    columns: false,\n                    active: false,\n                    rows: false\n                });\n                setSelectionCell((selection === null || selection === void 0 ? void 0 : selection.max) || null);\n            },\n            setActiveCell: (value)=>{\n                const cell = (0, typeCheck_1.getCell)(value, columns.length - (hasStickyRightColumn ? 2 : 1), data.length, columns);\n                setActiveCell(cell);\n                setEditing(false);\n                setSelectionMode({\n                    columns: false,\n                    active: false,\n                    rows: false\n                });\n                setSelectionCell(null);\n            }\n        }));\n    const callbacksRef = (0, react_1.useRef)({\n        onFocus,\n        onBlur,\n        onActiveCellChange,\n        onSelectionChange\n    });\n    callbacksRef.current.onFocus = onFocus;\n    callbacksRef.current.onBlur = onBlur;\n    callbacksRef.current.onActiveCellChange = onActiveCellChange;\n    callbacksRef.current.onSelectionChange = onSelectionChange;\n    (0, react_1.useEffect)(()=>{\n        if (lastEditingCellRef.current) {\n            if (editing) {\n                callbacksRef.current.onFocus({\n                    cell: (0, typeCheck_1.getCellWithId)(lastEditingCellRef.current, columns)\n                });\n            } else {\n                callbacksRef.current.onBlur({\n                    cell: (0, typeCheck_1.getCellWithId)(lastEditingCellRef.current, columns)\n                });\n            }\n        }\n    }, [\n        editing,\n        columns\n    ]);\n    (0, react_1.useEffect)(()=>{\n        callbacksRef.current.onActiveCellChange({\n            cell: (0, typeCheck_1.getCellWithId)(activeCell, columns)\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        activeCell === null || activeCell === void 0 ? void 0 : activeCell.col,\n        activeCell === null || activeCell === void 0 ? void 0 : activeCell.row,\n        columns\n    ]);\n    (0, react_1.useEffect)(()=>{\n        callbacksRef.current.onSelectionChange({\n            selection: (0, typeCheck_1.getSelectionWithId)(selection !== null && selection !== void 0 ? selection : activeCell ? {\n                min: activeCell,\n                max: activeCell\n            } : null, columns)\n        });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (_c = selection === null || selection === void 0 ? void 0 : selection.min.col) !== null && _c !== void 0 ? _c : activeCell === null || activeCell === void 0 ? void 0 : activeCell.col,\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (_d = selection === null || selection === void 0 ? void 0 : selection.min.row) !== null && _d !== void 0 ? _d : activeCell === null || activeCell === void 0 ? void 0 : activeCell.row,\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (_e = selection === null || selection === void 0 ? void 0 : selection.max.col) !== null && _e !== void 0 ? _e : activeCell === null || activeCell === void 0 ? void 0 : activeCell.col,\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        (_f = selection === null || selection === void 0 ? void 0 : selection.max.row) !== null && _f !== void 0 ? _f : activeCell === null || activeCell === void 0 ? void 0 : activeCell.row,\n        activeCell === null || activeCell === void 0 ? void 0 : activeCell.col,\n        activeCell === null || activeCell === void 0 ? void 0 : activeCell.row,\n        columns\n    ]);\n    return react_1.default.createElement(\"div\", {\n        className: className,\n        style: style\n    }, react_1.default.createElement(\"div\", {\n        ref: beforeTabIndexRef,\n        tabIndex: rawColumns.length && data.length ? 0 : undefined,\n        onFocus: (e)=>{\n            e.target.blur();\n            setActiveCell({\n                col: 0,\n                row: 0\n            });\n        }\n    }), react_1.default.createElement(Grid_1.Grid, {\n        columns: columns,\n        outerRef: outerRef,\n        columnWidths: columnWidths,\n        hasStickyRightColumn: hasStickyRightColumn,\n        displayHeight: displayHeight,\n        data: data,\n        fullWidth: fullWidth,\n        headerRowHeight: headerRowHeight,\n        activeCell: activeCell,\n        innerRef: innerRef,\n        rowHeight: getRowSize,\n        rowKey: rowKey,\n        selection: selection,\n        rowClassName: rowClassName,\n        editing: editing,\n        getContextMenuItems: getContextMenuItems,\n        setRowData: setRowData,\n        deleteRows: deleteRows,\n        insertRowAfter: insertRowAfter,\n        duplicateRows: duplicateRows,\n        stopEditing: stopEditing,\n        cellClassName: cellClassName,\n        onScroll: onScroll\n    }, react_1.default.createElement(SelectionRect_1.SelectionRect, {\n        columnRights: columnRights,\n        columnWidths: columnWidths,\n        activeCell: activeCell,\n        selection: selection,\n        headerRowHeight: headerRowHeight,\n        rowHeight: getRowSize,\n        hasStickyRightColumn: hasStickyRightColumn,\n        dataLength: data.length,\n        viewHeight: height,\n        viewWidth: width,\n        contentWidth: fullWidth ? undefined : contentWidth,\n        edges: edges,\n        editing: editing,\n        isCellDisabled: isCellDisabled,\n        expandSelection: expandSelection\n    })), react_1.default.createElement(\"div\", {\n        ref: afterTabIndexRef,\n        tabIndex: rawColumns.length && data.length ? 0 : undefined,\n        onFocus: (e)=>{\n            e.target.blur();\n            setActiveCell({\n                col: columns.length - (hasStickyRightColumn ? 3 : 2),\n                row: data.length - 1\n            });\n        }\n    }), !lockRows && AddRowsComponent && react_1.default.createElement(AddRowsComponent, {\n        addRows: (count)=>insertRowAfter(data.length - 1, count)\n    }), contextMenu && contextMenuItems.length > 0 && react_1.default.createElement(ContextMenuComponent, {\n        clientX: contextMenu.x,\n        clientY: contextMenu.y,\n        cursorIndex: contextMenu.cursorIndex,\n        items: contextMenuItems,\n        close: ()=>setContextMenu(null)\n    }));\n}));\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexports.DataSheetGrid.displayName = \"DataSheetGrid\"; //# sourceMappingURL=DataSheetGrid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/components/DataSheetGrid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/components/Grid.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/components/Grid.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Grid = void 0;\nconst react_virtual_1 = __webpack_require__(/*! @tanstack/react-virtual */ \"(ssr)/./node_modules/@tanstack/react-virtual/dist/cjs/index.cjs\");\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst classnames_1 = __importDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nconst Cell_1 = __webpack_require__(/*! ./Cell */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/Cell.js\");\nconst useMemoizedIndexCallback_1 = __webpack_require__(/*! ../hooks/useMemoizedIndexCallback */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useMemoizedIndexCallback.js\");\nconst Grid = ({ data, columns, outerRef, innerRef, columnWidths, hasStickyRightColumn, displayHeight, headerRowHeight, rowHeight, rowKey, fullWidth, selection, activeCell, rowClassName, cellClassName, children, editing, getContextMenuItems, setRowData, deleteRows, duplicateRows, insertRowAfter, stopEditing, onScroll })=>{\n    var _a, _b, _c, _d;\n    const rowVirtualizer = (0, react_virtual_1.useVirtualizer)({\n        count: data.length,\n        getScrollElement: ()=>outerRef.current,\n        paddingStart: headerRowHeight,\n        estimateSize: (index)=>rowHeight(index).height,\n        getItemKey: (index)=>{\n            if (rowKey && index > 0) {\n                const row = data[index - 1];\n                if (typeof rowKey === \"function\") {\n                    return rowKey({\n                        rowData: row,\n                        rowIndex: index\n                    });\n                } else if (typeof rowKey === \"string\" && row instanceof Object && rowKey in row) {\n                    const key = row[rowKey];\n                    if (typeof key === \"string\" || typeof key === \"number\") {\n                        return key;\n                    }\n                }\n            }\n            return index;\n        },\n        overscan: 5\n    });\n    const colVirtualizer = (0, react_virtual_1.useVirtualizer)({\n        count: columns.length,\n        getScrollElement: ()=>outerRef.current,\n        estimateSize: (index)=>{\n            var _a;\n            return (_a = columnWidths === null || columnWidths === void 0 ? void 0 : columnWidths[index]) !== null && _a !== void 0 ? _a : 100;\n        },\n        horizontal: true,\n        getItemKey: (index)=>{\n            var _a;\n            return (_a = columns[index].id) !== null && _a !== void 0 ? _a : index;\n        },\n        overscan: 1,\n        rangeExtractor: (range)=>{\n            const result = (0, react_virtual_1.defaultRangeExtractor)(range);\n            if (result[0] !== 0) {\n                result.unshift(0);\n            }\n            if (hasStickyRightColumn && result[result.length - 1] !== columns.length - 1) {\n                result.push(columns.length - 1);\n            }\n            return result;\n        }\n    });\n    (0, react_1.useEffect)(()=>{\n        colVirtualizer.measure();\n    }, [\n        colVirtualizer,\n        columnWidths\n    ]);\n    const setGivenRowData = (0, useMemoizedIndexCallback_1.useMemoizedIndexCallback)(setRowData, 1);\n    const deleteGivenRow = (0, useMemoizedIndexCallback_1.useMemoizedIndexCallback)(deleteRows, 0);\n    const duplicateGivenRow = (0, useMemoizedIndexCallback_1.useMemoizedIndexCallback)(duplicateRows, 0);\n    const insertAfterGivenRow = (0, useMemoizedIndexCallback_1.useMemoizedIndexCallback)(insertRowAfter, 0);\n    const selectionColMin = (_a = selection === null || selection === void 0 ? void 0 : selection.min.col) !== null && _a !== void 0 ? _a : activeCell === null || activeCell === void 0 ? void 0 : activeCell.col;\n    const selectionColMax = (_b = selection === null || selection === void 0 ? void 0 : selection.max.col) !== null && _b !== void 0 ? _b : activeCell === null || activeCell === void 0 ? void 0 : activeCell.col;\n    const selectionMinRow = (_c = selection === null || selection === void 0 ? void 0 : selection.min.row) !== null && _c !== void 0 ? _c : activeCell === null || activeCell === void 0 ? void 0 : activeCell.row;\n    const selectionMaxRow = (_d = selection === null || selection === void 0 ? void 0 : selection.max.row) !== null && _d !== void 0 ? _d : activeCell === null || activeCell === void 0 ? void 0 : activeCell.row;\n    return react_1.default.createElement(\"div\", {\n        ref: outerRef,\n        className: \"dsg-container\",\n        onScroll: onScroll,\n        style: {\n            height: displayHeight\n        }\n    }, react_1.default.createElement(\"div\", {\n        ref: innerRef,\n        style: {\n            width: fullWidth ? \"100%\" : colVirtualizer.getTotalSize(),\n            height: rowVirtualizer.getTotalSize()\n        }\n    }, headerRowHeight > 0 && react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-row\", \"dsg-row-header\"),\n        style: {\n            width: fullWidth ? \"100%\" : colVirtualizer.getTotalSize(),\n            height: headerRowHeight\n        }\n    }, colVirtualizer.getVirtualItems().map((col)=>react_1.default.createElement(Cell_1.Cell, {\n            key: col.key,\n            gutter: col.index === 0,\n            stickyRight: hasStickyRightColumn && col.index === columns.length - 1,\n            width: col.size,\n            left: col.start,\n            className: (0, classnames_1.default)(\"dsg-cell-header\", selectionColMin !== undefined && selectionColMax !== undefined && selectionColMin <= col.index - 1 && selectionColMax >= col.index - 1 && \"dsg-cell-header-active\", columns[col.index].headerClassName)\n        }, react_1.default.createElement(\"div\", {\n            className: \"dsg-cell-header-container\"\n        }, columns[col.index].title)))), rowVirtualizer.getVirtualItems().map((row)=>{\n        const rowActive = Boolean(row.index >= (selectionMinRow !== null && selectionMinRow !== void 0 ? selectionMinRow : Infinity) && row.index <= (selectionMaxRow !== null && selectionMaxRow !== void 0 ? selectionMaxRow : -Infinity));\n        return react_1.default.createElement(\"div\", {\n            key: row.key,\n            className: (0, classnames_1.default)(\"dsg-row\", typeof rowClassName === \"string\" ? rowClassName : null, typeof rowClassName === \"function\" ? rowClassName({\n                rowData: data[row.index],\n                rowIndex: row.index\n            }) : null),\n            style: {\n                height: row.size,\n                top: row.start,\n                width: fullWidth ? \"100%\" : colVirtualizer.getTotalSize()\n            }\n        }, colVirtualizer.getVirtualItems().map((col)=>{\n            const colCellClassName = columns[col.index].cellClassName;\n            const disabled = columns[col.index].disabled;\n            const Component = columns[col.index].component;\n            const cellDisabled = disabled === true || typeof disabled === \"function\" && disabled({\n                rowData: data[row.index],\n                rowIndex: row.index\n            });\n            const cellIsActive = (activeCell === null || activeCell === void 0 ? void 0 : activeCell.row) === row.index && activeCell.col === col.index - 1;\n            return react_1.default.createElement(Cell_1.Cell, {\n                key: col.key,\n                gutter: col.index === 0,\n                stickyRight: hasStickyRightColumn && col.index === columns.length - 1,\n                active: col.index === 0 && rowActive,\n                disabled: cellDisabled,\n                className: (0, classnames_1.default)(typeof colCellClassName === \"function\" ? colCellClassName({\n                    rowData: data[row.index],\n                    rowIndex: row.index,\n                    columnId: columns[col.index].id\n                }) : colCellClassName, typeof cellClassName === \"function\" ? cellClassName({\n                    rowData: data[row.index],\n                    rowIndex: row.index,\n                    columnId: columns[col.index].id\n                }) : cellClassName),\n                width: col.size,\n                left: col.start\n            }, react_1.default.createElement(Component, {\n                rowData: data[row.index],\n                getContextMenuItems: getContextMenuItems,\n                disabled: cellDisabled,\n                active: cellIsActive,\n                columnIndex: col.index - 1,\n                rowIndex: row.index,\n                focus: cellIsActive && editing,\n                deleteRow: deleteGivenRow(row.index),\n                duplicateRow: duplicateGivenRow(row.index),\n                stopEditing: stopEditing,\n                insertRowBelow: insertAfterGivenRow(row.index),\n                setRowData: setGivenRowData(row.index),\n                columnData: columns[col.index].columnData\n            }));\n        }));\n    }), children));\n};\nexports.Grid = Grid; //# sourceMappingURL=Grid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/components/Grid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/components/SelectionRect.js":
/*!****************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/components/SelectionRect.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.SelectionRect = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst classnames_1 = __importDefault(__webpack_require__(/*! classnames */ \"(ssr)/./node_modules/classnames/index.js\"));\nconst buildSquare = (top, right, bottom, left)=>{\n    return [\n        [\n            left,\n            top\n        ],\n        [\n            right,\n            top\n        ],\n        [\n            right,\n            bottom\n        ],\n        [\n            left,\n            bottom\n        ],\n        [\n            left,\n            top\n        ]\n    ];\n};\nconst buildClipPath = (top, right, bottom, left)=>{\n    const values = [\n        ...buildSquare(0, \"100%\", \"100%\", 0),\n        ...buildSquare(top, right, bottom, left)\n    ];\n    return `polygon(evenodd, ${values.map((pair)=>pair.map((value)=>typeof value === \"number\" && value !== 0 ? value + \"px\" : value).join(\" \")).join(\",\")})`;\n};\nexports.SelectionRect = react_1.default.memo(({ columnWidths, columnRights, headerRowHeight, selection, rowHeight, activeCell, hasStickyRightColumn, dataLength, viewWidth, viewHeight, contentWidth, edges, isCellDisabled, editing, expandSelection })=>{\n    var _a, _b, _c, _d;\n    const activeCellIsDisabled = activeCell ? isCellDisabled(activeCell) : false;\n    const selectionIsDisabled = (0, react_1.useMemo)(()=>{\n        if (!selection) {\n            return activeCellIsDisabled;\n        }\n        for(let col = selection.min.col; col <= selection.max.col; ++col){\n            for(let row = selection.min.row; row <= selection.max.row; ++row){\n                if (!isCellDisabled({\n                    col,\n                    row\n                })) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }, [\n        activeCellIsDisabled,\n        isCellDisabled,\n        selection\n    ]);\n    if (!columnWidths || !columnRights) {\n        return null;\n    }\n    const extraPixelV = (rowI)=>{\n        return rowI < dataLength - 1 ? 1 : 0;\n    };\n    const extraPixelH = (colI)=>{\n        return colI < columnWidths.length - (hasStickyRightColumn ? 3 : 2) ? 1 : 0;\n    };\n    const activeCellRect = activeCell && {\n        width: columnWidths[activeCell.col + 1] + extraPixelH(activeCell.col),\n        height: rowHeight(activeCell.row).height + extraPixelV(activeCell.row),\n        left: columnRights[activeCell.col],\n        top: rowHeight(activeCell.row).top + headerRowHeight\n    };\n    const selectionRect = selection && {\n        width: columnWidths.slice(selection.min.col + 1, selection.max.col + 2).reduce((a, b)=>a + b) + extraPixelH(selection.max.col),\n        height: rowHeight(selection.max.row).top + rowHeight(selection.max.row).height - rowHeight(selection.min.row).top + extraPixelV(selection.max.row),\n        left: columnRights[selection.min.col],\n        top: rowHeight(selection.min.row).top + headerRowHeight\n    };\n    const minSelection = (selection === null || selection === void 0 ? void 0 : selection.min) || activeCell;\n    const maxSelection = (selection === null || selection === void 0 ? void 0 : selection.max) || activeCell;\n    const expandRowsIndicator = maxSelection && expandSelection !== null && {\n        left: columnRights[maxSelection.col] + columnWidths[maxSelection.col + 1],\n        top: rowHeight(maxSelection.row).top + rowHeight(maxSelection.row).height + headerRowHeight,\n        transform: `translate(-${maxSelection.col < columnWidths.length - (hasStickyRightColumn ? 3 : 2) ? 50 : 100}%, -${maxSelection.row < dataLength - 1 ? 50 : 100}%)`\n    };\n    const expandRowsRect = minSelection && maxSelection && expandSelection !== null && {\n        width: columnWidths.slice(minSelection.col + 1, maxSelection.col + 2).reduce((a, b)=>a + b) + extraPixelH(maxSelection.col),\n        height: rowHeight(maxSelection.row + expandSelection).top + rowHeight(maxSelection.row + expandSelection).height - rowHeight(maxSelection.row + 1).top + extraPixelV(maxSelection.row + expandSelection) - 1,\n        left: columnRights[minSelection.col],\n        top: rowHeight(maxSelection.row).top + rowHeight(maxSelection.row).height + headerRowHeight + 1\n    };\n    return react_1.default.createElement(react_1.default.Fragment, null, react_1.default.createElement(\"div\", {\n        className: \"dsg-scrollable-view-container\",\n        style: {\n            height: rowHeight(dataLength - 1).top + rowHeight(dataLength - 1).height + headerRowHeight,\n            width: contentWidth ? contentWidth : \"100%\"\n        }\n    }, react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)({\n            \"dsg-scrollable-view\": true,\n            \"dsg-scrollable-view-t\": !edges.top,\n            \"dsg-scrollable-view-r\": !edges.right,\n            \"dsg-scrollable-view-b\": !edges.bottom,\n            \"dsg-scrollable-view-l\": !edges.left\n        }),\n        style: {\n            top: headerRowHeight,\n            left: columnWidths[0],\n            height: viewHeight ? viewHeight - headerRowHeight : 0,\n            width: contentWidth && viewWidth ? viewWidth - columnWidths[0] - (hasStickyRightColumn ? columnWidths[columnWidths.length - 1] : 0) : `calc(100% - ${columnWidths[0] + (hasStickyRightColumn ? columnWidths[columnWidths.length - 1] : 0)}px)`\n        }\n    })), (selectionRect || activeCellRect) && react_1.default.createElement(\"div\", {\n        className: \"dsg-selection-col-marker-container\",\n        style: {\n            left: (_a = selectionRect === null || selectionRect === void 0 ? void 0 : selectionRect.left) !== null && _a !== void 0 ? _a : activeCellRect === null || activeCellRect === void 0 ? void 0 : activeCellRect.left,\n            width: (_b = selectionRect === null || selectionRect === void 0 ? void 0 : selectionRect.width) !== null && _b !== void 0 ? _b : activeCellRect === null || activeCellRect === void 0 ? void 0 : activeCellRect.width,\n            height: rowHeight(dataLength - 1).top + rowHeight(dataLength - 1).height + headerRowHeight\n        }\n    }, react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-selection-col-marker\", selectionIsDisabled && \"dsg-selection-col-marker-disabled\"),\n        style: {\n            top: headerRowHeight\n        }\n    })), (selectionRect || activeCellRect) && react_1.default.createElement(\"div\", {\n        className: \"dsg-selection-row-marker-container\",\n        style: {\n            top: (_c = selectionRect === null || selectionRect === void 0 ? void 0 : selectionRect.top) !== null && _c !== void 0 ? _c : activeCellRect === null || activeCellRect === void 0 ? void 0 : activeCellRect.top,\n            height: (_d = selectionRect === null || selectionRect === void 0 ? void 0 : selectionRect.height) !== null && _d !== void 0 ? _d : activeCellRect === null || activeCellRect === void 0 ? void 0 : activeCellRect.height,\n            width: contentWidth ? contentWidth : \"100%\"\n        }\n    }, react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-selection-row-marker\", selectionIsDisabled && \"dsg-selection-row-marker-disabled\"),\n        style: {\n            left: columnWidths[0]\n        }\n    })), activeCellRect && activeCell && react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-active-cell\", {\n            \"dsg-active-cell-focus\": editing,\n            \"dsg-active-cell-disabled\": activeCellIsDisabled\n        }),\n        style: activeCellRect\n    }), selectionRect && activeCellRect && react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-selection-rect\", selectionIsDisabled && \"dsg-selection-rect-disabled\"),\n        style: Object.assign(Object.assign({}, selectionRect), {\n            clipPath: buildClipPath(activeCellRect.top - selectionRect.top, activeCellRect.left - selectionRect.left, activeCellRect.top + activeCellRect.height - selectionRect.top, activeCellRect.left + activeCellRect.width - selectionRect.left)\n        })\n    }), expandRowsRect && react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-expand-rows-rect\"),\n        style: expandRowsRect\n    }), expandRowsIndicator && react_1.default.createElement(\"div\", {\n        className: (0, classnames_1.default)(\"dsg-expand-rows-indicator\", selectionIsDisabled && \"dsg-expand-rows-indicator-disabled\"),\n        style: expandRowsIndicator\n    }));\n});\nexports.SelectionRect.displayName = \"SelectionRect\"; //# sourceMappingURL=SelectionRect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/components/SelectionRect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/components/StaticDataSheetGrid.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/components/StaticDataSheetGrid.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __rest = (void 0) && (void 0).__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.StaticDataSheetGrid = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst DataSheetGrid_1 = __webpack_require__(/*! ./DataSheetGrid */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/DataSheetGrid.js\");\nconst react_2 = __importDefault(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nexports.StaticDataSheetGrid = react_2.default.forwardRef((_a, ref)=>{\n    var { columns, gutterColumn, stickyRightColumn, addRowsComponent, createRow, duplicateRow, style, rowKey, onFocus, onBlur, onActiveCellChange, onSelectionChange, rowClassName, rowHeight } = _a, rest = __rest(_a, [\n        \"columns\",\n        \"gutterColumn\",\n        \"stickyRightColumn\",\n        \"addRowsComponent\",\n        \"createRow\",\n        \"duplicateRow\",\n        \"style\",\n        \"rowKey\",\n        \"onFocus\",\n        \"onBlur\",\n        \"onActiveCellChange\",\n        \"onSelectionChange\",\n        \"rowClassName\",\n        \"rowHeight\"\n    ]);\n    const [staticProps] = (0, react_1.useState)({\n        columns,\n        gutterColumn,\n        stickyRightColumn,\n        addRowsComponent,\n        createRow,\n        duplicateRow,\n        style,\n        rowKey,\n        onFocus,\n        onBlur,\n        onActiveCellChange,\n        onSelectionChange,\n        rowClassName,\n        rowHeight\n    });\n    return react_2.default.createElement(DataSheetGrid_1.DataSheetGrid, Object.assign({}, staticProps, rest, {\n        rowHeight: typeof rowHeight === \"number\" ? rowHeight : staticProps.rowHeight,\n        ref: ref\n    }));\n}); //# sourceMappingURL=StaticDataSheetGrid.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb21wb25lbnRzL1N0YXRpY0RhdGFTaGVldEdyaWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYixJQUFJQSxTQUFTLENBQUMsTUFBRyxLQUFLLE9BQUcsRUFBRUEsTUFBTSxJQUFLLFNBQVVDLENBQUMsRUFBRUMsQ0FBQztJQUNoRCxJQUFJQyxJQUFJLENBQUM7SUFDVCxJQUFLLElBQUlDLEtBQUtILEVBQUcsSUFBSUksT0FBT0MsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1AsR0FBR0csTUFBTUYsRUFBRU8sT0FBTyxDQUFDTCxLQUFLLEdBQzlFRCxDQUFDLENBQUNDLEVBQUUsR0FBR0gsQ0FBQyxDQUFDRyxFQUFFO0lBQ2YsSUFBSUgsS0FBSyxRQUFRLE9BQU9JLE9BQU9LLHFCQUFxQixLQUFLLFlBQ3JELElBQUssSUFBSUMsSUFBSSxHQUFHUCxJQUFJQyxPQUFPSyxxQkFBcUIsQ0FBQ1QsSUFBSVUsSUFBSVAsRUFBRVEsTUFBTSxFQUFFRCxJQUFLO1FBQ3BFLElBQUlULEVBQUVPLE9BQU8sQ0FBQ0wsQ0FBQyxDQUFDTyxFQUFFLElBQUksS0FBS04sT0FBT0MsU0FBUyxDQUFDTyxvQkFBb0IsQ0FBQ0wsSUFBSSxDQUFDUCxHQUFHRyxDQUFDLENBQUNPLEVBQUUsR0FDekVSLENBQUMsQ0FBQ0MsQ0FBQyxDQUFDTyxFQUFFLENBQUMsR0FBR1YsQ0FBQyxDQUFDRyxDQUFDLENBQUNPLEVBQUUsQ0FBQztJQUN6QjtJQUNKLE9BQU9SO0FBQ1g7QUFDQSxJQUFJVyxrQkFBa0IsQ0FBQyxNQUFHLEtBQUssT0FBRyxFQUFFQSxlQUFlLElBQUssU0FBVUMsR0FBRztJQUNqRSxPQUFPLE9BQVFBLElBQUlDLFVBQVUsR0FBSUQsTUFBTTtRQUFFLFdBQVdBO0lBQUk7QUFDNUQ7QUFDQVYsOENBQTZDO0lBQUVjLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDJCQUEyQixHQUFHLEtBQUs7QUFDbkMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsd0dBQU87QUFDL0IsTUFBTUMsa0JBQWtCRCxtQkFBT0EsQ0FBQyxtR0FBaUI7QUFDakQsTUFBTUUsVUFBVVYsZ0JBQWdCUSxtQkFBT0EsQ0FBQyx3R0FBTztBQUMvQ0osMkJBQTJCLEdBQUdNLFFBQVFDLE9BQU8sQ0FBQ0MsVUFBVSxDQUFDLENBQUNDLElBQUlDO0lBQzFELElBQUksRUFBRUMsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLGlCQUFpQixFQUFFQyxnQkFBZ0IsRUFBRUMsU0FBUyxFQUFFQyxZQUFZLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE1BQU0sRUFBRUMsa0JBQWtCLEVBQUVDLGlCQUFpQixFQUFFQyxZQUFZLEVBQUVDLFNBQVMsRUFBRSxHQUFHZixJQUFJZ0IsT0FBTzNDLE9BQU8yQixJQUFJO1FBQUM7UUFBVztRQUFnQjtRQUFxQjtRQUFvQjtRQUFhO1FBQWdCO1FBQVM7UUFBVTtRQUFXO1FBQVU7UUFBc0I7UUFBcUI7UUFBZ0I7S0FBWTtJQUNyYSxNQUFNLENBQUNpQixZQUFZLEdBQUcsQ0FBQyxHQUFHdkIsUUFBUXdCLFFBQVEsRUFBRTtRQUN4Q2hCO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO1FBQ0FDO0lBQ0o7SUFDQSxPQUFRbEIsUUFBUUMsT0FBTyxDQUFDcUIsYUFBYSxDQUFDdkIsZ0JBQWdCd0IsYUFBYSxFQUFFMUMsT0FBTzJDLE1BQU0sQ0FBQyxDQUFDLEdBQUdKLGFBQWFELE1BQU07UUFBRUQsV0FBVyxPQUFPQSxjQUFjLFdBQVdBLFlBQVlFLFlBQVlGLFNBQVM7UUFBRWQsS0FBS0E7SUFBSTtBQUN2TSxJQUNBLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmxkcy1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9jb21wb25lbnRzL1N0YXRpY0RhdGFTaGVldEdyaWQuanM/MTJiZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX3Jlc3QgPSAodGhpcyAmJiB0aGlzLl9fcmVzdCkgfHwgZnVuY3Rpb24gKHMsIGUpIHtcbiAgICB2YXIgdCA9IHt9O1xuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxuICAgICAgICB0W3BdID0gc1twXTtcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgICAgfVxuICAgIHJldHVybiB0O1xufTtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU3RhdGljRGF0YVNoZWV0R3JpZCA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCBEYXRhU2hlZXRHcmlkXzEgPSByZXF1aXJlKFwiLi9EYXRhU2hlZXRHcmlkXCIpO1xuY29uc3QgcmVhY3RfMiA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwicmVhY3RcIikpO1xuZXhwb3J0cy5TdGF0aWNEYXRhU2hlZXRHcmlkID0gcmVhY3RfMi5kZWZhdWx0LmZvcndhcmRSZWYoKF9hLCByZWYpID0+IHtcbiAgICB2YXIgeyBjb2x1bW5zLCBndXR0ZXJDb2x1bW4sIHN0aWNreVJpZ2h0Q29sdW1uLCBhZGRSb3dzQ29tcG9uZW50LCBjcmVhdGVSb3csIGR1cGxpY2F0ZVJvdywgc3R5bGUsIHJvd0tleSwgb25Gb2N1cywgb25CbHVyLCBvbkFjdGl2ZUNlbGxDaGFuZ2UsIG9uU2VsZWN0aW9uQ2hhbmdlLCByb3dDbGFzc05hbWUsIHJvd0hlaWdodCB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcImNvbHVtbnNcIiwgXCJndXR0ZXJDb2x1bW5cIiwgXCJzdGlja3lSaWdodENvbHVtblwiLCBcImFkZFJvd3NDb21wb25lbnRcIiwgXCJjcmVhdGVSb3dcIiwgXCJkdXBsaWNhdGVSb3dcIiwgXCJzdHlsZVwiLCBcInJvd0tleVwiLCBcIm9uRm9jdXNcIiwgXCJvbkJsdXJcIiwgXCJvbkFjdGl2ZUNlbGxDaGFuZ2VcIiwgXCJvblNlbGVjdGlvbkNoYW5nZVwiLCBcInJvd0NsYXNzTmFtZVwiLCBcInJvd0hlaWdodFwiXSk7XG4gICAgY29uc3QgW3N0YXRpY1Byb3BzXSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKSh7XG4gICAgICAgIGNvbHVtbnMsXG4gICAgICAgIGd1dHRlckNvbHVtbixcbiAgICAgICAgc3RpY2t5UmlnaHRDb2x1bW4sXG4gICAgICAgIGFkZFJvd3NDb21wb25lbnQsXG4gICAgICAgIGNyZWF0ZVJvdyxcbiAgICAgICAgZHVwbGljYXRlUm93LFxuICAgICAgICBzdHlsZSxcbiAgICAgICAgcm93S2V5LFxuICAgICAgICBvbkZvY3VzLFxuICAgICAgICBvbkJsdXIsXG4gICAgICAgIG9uQWN0aXZlQ2VsbENoYW5nZSxcbiAgICAgICAgb25TZWxlY3Rpb25DaGFuZ2UsXG4gICAgICAgIHJvd0NsYXNzTmFtZSxcbiAgICAgICAgcm93SGVpZ2h0LFxuICAgIH0pO1xuICAgIHJldHVybiAocmVhY3RfMi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoRGF0YVNoZWV0R3JpZF8xLkRhdGFTaGVldEdyaWQsIE9iamVjdC5hc3NpZ24oe30sIHN0YXRpY1Byb3BzLCByZXN0LCB7IHJvd0hlaWdodDogdHlwZW9mIHJvd0hlaWdodCA9PT0gJ251bWJlcicgPyByb3dIZWlnaHQgOiBzdGF0aWNQcm9wcy5yb3dIZWlnaHQsIHJlZjogcmVmIH0pKSk7XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0YXRpY0RhdGFTaGVldEdyaWQuanMubWFwIl0sIm5hbWVzIjpbIl9fcmVzdCIsInMiLCJlIiwidCIsInAiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpbmRleE9mIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaSIsImxlbmd0aCIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiU3RhdGljRGF0YVNoZWV0R3JpZCIsInJlYWN0XzEiLCJyZXF1aXJlIiwiRGF0YVNoZWV0R3JpZF8xIiwicmVhY3RfMiIsImRlZmF1bHQiLCJmb3J3YXJkUmVmIiwiX2EiLCJyZWYiLCJjb2x1bW5zIiwiZ3V0dGVyQ29sdW1uIiwic3RpY2t5UmlnaHRDb2x1bW4iLCJhZGRSb3dzQ29tcG9uZW50IiwiY3JlYXRlUm93IiwiZHVwbGljYXRlUm93Iiwic3R5bGUiLCJyb3dLZXkiLCJvbkZvY3VzIiwib25CbHVyIiwib25BY3RpdmVDZWxsQ2hhbmdlIiwib25TZWxlY3Rpb25DaGFuZ2UiLCJyb3dDbGFzc05hbWUiLCJyb3dIZWlnaHQiLCJyZXN0Iiwic3RhdGljUHJvcHMiLCJ1c2VTdGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJEYXRhU2hlZXRHcmlkIiwiYXNzaWduIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/components/StaticDataSheetGrid.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useColumnWidths.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useColumnWidths.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useColumnWidths = exports.getColumnWidths = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst getColumnWidths = (containerWidth, columns)=>{\n    const items = columns.map(({ basis, minWidth, maxWidth })=>({\n            basis,\n            minWidth,\n            maxWidth,\n            size: basis,\n            violation: 0,\n            frozen: false,\n            factor: 0\n        }));\n    let availableWidth = items.reduce((acc, cur)=>acc - cur.size, containerWidth);\n    if (availableWidth > 0) {\n        columns.forEach(({ grow }, i)=>{\n            items[i].factor = grow;\n        });\n    } else if (availableWidth < 0) {\n        columns.forEach(({ shrink }, i)=>{\n            items[i].factor = shrink;\n        });\n    }\n    for (const item of items){\n        if (item.factor === 0) {\n            item.frozen = true;\n        }\n    }\n    while(items.some(({ frozen })=>!frozen)){\n        const sumFactors = items.reduce((acc, cur)=>acc + (cur.frozen ? 0 : cur.factor), 0);\n        let totalViolation = 0;\n        for (const item of items){\n            if (!item.frozen) {\n                item.size += availableWidth * item.factor / sumFactors;\n                if (item.size < item.minWidth) {\n                    item.violation = item.minWidth - item.size;\n                } else if (item.maxWidth !== undefined && item.size > item.maxWidth) {\n                    item.violation = item.maxWidth - item.size;\n                } else {\n                    item.violation = 0;\n                }\n                item.size += item.violation;\n                totalViolation += item.violation;\n            }\n        }\n        if (totalViolation > 0) {\n            for (const item of items){\n                if (item.violation > 0) {\n                    item.frozen = true;\n                }\n            }\n        } else if (totalViolation < 0) {\n            for (const item of items){\n                if (item.violation < 0) {\n                    item.frozen = true;\n                }\n            }\n        } else {\n            break;\n        }\n        availableWidth = items.reduce((acc, cur)=>acc - cur.size, containerWidth);\n    }\n    return items.map(({ size })=>size);\n};\nexports.getColumnWidths = getColumnWidths;\nconst useColumnWidths = (columns, width)=>{\n    const columnsHash = columns.map(({ basis, minWidth, maxWidth, grow, shrink })=>[\n            basis,\n            minWidth,\n            maxWidth,\n            grow,\n            shrink\n        ].join(\",\")).join(\"|\");\n    return (0, react_1.useMemo)(()=>{\n        if (width === undefined) {\n            return {\n                fullWidth: false,\n                columnWidths: undefined,\n                columnRights: undefined,\n                totalWidth: undefined\n            };\n        }\n        const columnWidths = (0, exports.getColumnWidths)(width, columns);\n        let totalWidth = 0;\n        const columnRights = columnWidths.map((w, i)=>{\n            totalWidth += w;\n            return i === columnWidths.length - 1 ? Infinity : totalWidth;\n        });\n        return {\n            fullWidth: Math.abs(width - totalWidth) < 0.1,\n            columnWidths,\n            columnRights,\n            totalWidth\n        };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        width,\n        columnsHash\n    ]);\n};\nexports.useColumnWidths = useColumnWidths; //# sourceMappingURL=useColumnWidths.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useColumnWidths.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useColumns.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useColumns.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __createBinding = (void 0) && (void 0).__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = (void 0) && (void 0).__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (void 0) && (void 0).__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useColumns = exports.parseFlexValue = void 0;\nconst react_1 = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nconst defaultComponent = ()=>react_1.default.createElement(react_1.default.Fragment, null);\nconst defaultIsCellEmpty = ()=>false;\nconst identityRow = ({ rowData })=>rowData;\nconst defaultCopyValue = ()=>null;\nconst defaultGutterComponent = ({ rowIndex })=>react_1.default.createElement(react_1.default.Fragment, null, rowIndex + 1);\nconst cellAlwaysEmpty = ()=>true;\nconst defaultPrePasteValues = (values)=>values;\nconst parseFlexValue = (value)=>{\n    if (typeof value === \"number\") {\n        return {\n            basis: 0,\n            grow: value,\n            shrink: 1\n        };\n    }\n    if (value.match(/^ *\\d+(\\.\\d*)? *$/)) {\n        return {\n            basis: 0,\n            grow: parseFloat(value.trim()),\n            shrink: 1\n        };\n    }\n    if (value.match(/^ *\\d+(\\.\\d*)? *px *$/)) {\n        return {\n            basis: parseFloat(value.trim()),\n            grow: 1,\n            shrink: 1\n        };\n    }\n    if (value.match(/^ *\\d+(\\.\\d*)? \\d+(\\.\\d*)? *$/)) {\n        const [grow, shrink] = value.trim().split(\" \");\n        return {\n            basis: 0,\n            grow: parseFloat(grow),\n            shrink: parseFloat(shrink)\n        };\n    }\n    if (value.match(/^ *\\d+(\\.\\d*)? \\d+(\\.\\d*)? *px *$/)) {\n        const [grow, basis] = value.trim().split(\" \");\n        return {\n            basis: parseFloat(basis),\n            grow: parseFloat(grow),\n            shrink: 1\n        };\n    }\n    if (value.match(/^ *\\d+(\\.\\d*)? \\d+(\\.\\d*)? \\d+(\\.\\d*)? *px *$/)) {\n        const [grow, shrink, basis] = value.trim().split(\" \");\n        return {\n            basis: parseFloat(basis),\n            grow: parseFloat(grow),\n            shrink: parseFloat(shrink)\n        };\n    }\n    return {\n        basis: 0,\n        grow: 1,\n        shrink: 1\n    };\n};\nexports.parseFlexValue = parseFlexValue;\nconst useColumns = (columns, gutterColumn, stickyRightColumn)=>{\n    return (0, react_1.useMemo)(()=>{\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        const partialColumns = [\n            gutterColumn === false ? {\n                basis: 0,\n                grow: 0,\n                shrink: 0,\n                minWidth: 0,\n                // eslint-disable-next-line react/display-name\n                component: ()=>react_1.default.createElement(react_1.default.Fragment, null),\n                headerClassName: \"dsg-hidden-cell\",\n                cellClassName: \"dsg-hidden-cell\",\n                isCellEmpty: cellAlwaysEmpty\n            } : Object.assign(Object.assign({}, gutterColumn), {\n                basis: (_a = gutterColumn === null || gutterColumn === void 0 ? void 0 : gutterColumn.basis) !== null && _a !== void 0 ? _a : 40,\n                grow: (_b = gutterColumn === null || gutterColumn === void 0 ? void 0 : gutterColumn.grow) !== null && _b !== void 0 ? _b : 0,\n                shrink: (_c = gutterColumn === null || gutterColumn === void 0 ? void 0 : gutterColumn.shrink) !== null && _c !== void 0 ? _c : 0,\n                minWidth: (_d = gutterColumn === null || gutterColumn === void 0 ? void 0 : gutterColumn.minWidth) !== null && _d !== void 0 ? _d : 0,\n                title: (_e = gutterColumn === null || gutterColumn === void 0 ? void 0 : gutterColumn.title) !== null && _e !== void 0 ? _e : react_1.default.createElement(\"div\", {\n                    className: \"dsg-corner-indicator\"\n                }),\n                component: (_f = gutterColumn === null || gutterColumn === void 0 ? void 0 : gutterColumn.component) !== null && _f !== void 0 ? _f : defaultGutterComponent,\n                isCellEmpty: cellAlwaysEmpty\n            }),\n            ...columns\n        ];\n        if (stickyRightColumn) {\n            partialColumns.push(Object.assign(Object.assign({}, stickyRightColumn), {\n                basis: (_g = stickyRightColumn === null || stickyRightColumn === void 0 ? void 0 : stickyRightColumn.basis) !== null && _g !== void 0 ? _g : 40,\n                grow: (_h = stickyRightColumn === null || stickyRightColumn === void 0 ? void 0 : stickyRightColumn.grow) !== null && _h !== void 0 ? _h : 0,\n                shrink: (_j = stickyRightColumn === null || stickyRightColumn === void 0 ? void 0 : stickyRightColumn.shrink) !== null && _j !== void 0 ? _j : 0,\n                minWidth: (_k = stickyRightColumn.minWidth) !== null && _k !== void 0 ? _k : 0,\n                isCellEmpty: cellAlwaysEmpty\n            }));\n        }\n        return partialColumns.map((column)=>{\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\n            const legacyWidth = column.width !== undefined ? (0, exports.parseFlexValue)(column.width) : {\n                basis: undefined,\n                grow: undefined,\n                shrink: undefined\n            };\n            return Object.assign(Object.assign({}, column), {\n                basis: (_b = (_a = column.basis) !== null && _a !== void 0 ? _a : legacyWidth.basis) !== null && _b !== void 0 ? _b : 0,\n                grow: (_d = (_c = column.grow) !== null && _c !== void 0 ? _c : legacyWidth.grow) !== null && _d !== void 0 ? _d : 1,\n                shrink: (_f = (_e = column.shrink) !== null && _e !== void 0 ? _e : legacyWidth.shrink) !== null && _f !== void 0 ? _f : 1,\n                minWidth: (_g = column.minWidth) !== null && _g !== void 0 ? _g : 100,\n                component: (_h = column.component) !== null && _h !== void 0 ? _h : defaultComponent,\n                disableKeys: (_j = column.disableKeys) !== null && _j !== void 0 ? _j : false,\n                disabled: (_k = column.disabled) !== null && _k !== void 0 ? _k : false,\n                keepFocus: (_l = column.keepFocus) !== null && _l !== void 0 ? _l : false,\n                deleteValue: (_m = column.deleteValue) !== null && _m !== void 0 ? _m : identityRow,\n                copyValue: (_o = column.copyValue) !== null && _o !== void 0 ? _o : defaultCopyValue,\n                pasteValue: (_p = column.pasteValue) !== null && _p !== void 0 ? _p : identityRow,\n                prePasteValues: (_q = column.prePasteValues) !== null && _q !== void 0 ? _q : defaultPrePasteValues,\n                isCellEmpty: (_r = column.isCellEmpty) !== null && _r !== void 0 ? _r : defaultIsCellEmpty\n            });\n        });\n    }, [\n        gutterColumn,\n        stickyRightColumn,\n        columns\n    ]);\n};\nexports.useColumns = useColumns; //# sourceMappingURL=useColumns.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useColumns.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDebounceState.js":
/*!**************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useDebounceState.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useDebounceState = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst throttle_debounce_1 = __webpack_require__(/*! throttle-debounce */ \"(ssr)/./node_modules/throttle-debounce/cjs/index.js\");\nconst useDebounceState = (defaultValue, delay)=>{\n    const [debouncedValue, setDebouncedValue] = (0, react_1.useState)(defaultValue);\n    const cancelRef = (0, react_1.useRef)();\n    (0, react_1.useEffect)(()=>()=>{\n            var _a;\n            return (_a = cancelRef.current) === null || _a === void 0 ? void 0 : _a.cancel();\n        }, []);\n    const setValue = (0, react_1.useMemo)(()=>cancelRef.current = (0, throttle_debounce_1.debounce)(delay, (newValue)=>{\n            setDebouncedValue(newValue);\n        }), [\n        delay\n    ]);\n    return [\n        debouncedValue,\n        setValue\n    ];\n};\nexports.useDebounceState = useDebounceState; //# sourceMappingURL=useDebounceState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VEZWJvdW5jZVN0YXRlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCx3QkFBd0IsR0FBRyxLQUFLO0FBQ2hDLE1BQU1HLFVBQVVDLG1CQUFPQSxDQUFDLHdHQUFPO0FBQy9CLE1BQU1DLHNCQUFzQkQsbUJBQU9BLENBQUMsOEVBQW1CO0FBQ3ZELE1BQU1GLG1CQUFtQixDQUFDSSxjQUFjQztJQUNwQyxNQUFNLENBQUNDLGdCQUFnQkMsa0JBQWtCLEdBQUcsQ0FBQyxHQUFHTixRQUFRTyxRQUFRLEVBQUVKO0lBQ2xFLE1BQU1LLFlBQVksQ0FBQyxHQUFHUixRQUFRUyxNQUFNO0lBQ25DLElBQUdULFFBQVFVLFNBQVMsRUFBRSxJQUFNO1lBQVEsSUFBSUM7WUFBSSxPQUFPLENBQUNBLEtBQUtILFVBQVVJLE9BQU8sTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdFLE1BQU07UUFBSSxHQUFHLEVBQUU7SUFDcEksTUFBTUMsV0FBVyxDQUFDLEdBQUdkLFFBQVFlLE9BQU8sRUFBRSxJQUFPUCxVQUFVSSxPQUFPLEdBQUcsQ0FBQyxHQUFHVixvQkFBb0JjLFFBQVEsRUFBRVosT0FBTyxDQUFDYTtZQUN2R1gsa0JBQWtCVztRQUN0QixJQUFLO1FBQUNiO0tBQU07SUFDWixPQUFPO1FBQUNDO1FBQWdCUztLQUFTO0FBQ3JDO0FBQ0FqQix3QkFBd0IsR0FBR0Usa0JBQzNCLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmxkcy1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VEZWJvdW5jZVN0YXRlLmpzPzM1NjIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZURlYm91bmNlU3RhdGUgPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgdGhyb3R0bGVfZGVib3VuY2VfMSA9IHJlcXVpcmUoXCJ0aHJvdHRsZS1kZWJvdW5jZVwiKTtcbmNvbnN0IHVzZURlYm91bmNlU3RhdGUgPSAoZGVmYXVsdFZhbHVlLCBkZWxheSkgPT4ge1xuICAgIGNvbnN0IFtkZWJvdW5jZWRWYWx1ZSwgc2V0RGVib3VuY2VkVmFsdWVdID0gKDAsIHJlYWN0XzEudXNlU3RhdGUpKGRlZmF1bHRWYWx1ZSk7XG4gICAgY29uc3QgY2FuY2VsUmVmID0gKDAsIHJlYWN0XzEudXNlUmVmKSgpO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4gKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBjYW5jZWxSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbmNlbCgpOyB9LCBbXSk7XG4gICAgY29uc3Qgc2V0VmFsdWUgPSAoMCwgcmVhY3RfMS51c2VNZW1vKSgoKSA9PiAoY2FuY2VsUmVmLmN1cnJlbnQgPSAoMCwgdGhyb3R0bGVfZGVib3VuY2VfMS5kZWJvdW5jZSkoZGVsYXksIChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICBzZXREZWJvdW5jZWRWYWx1ZShuZXdWYWx1ZSk7XG4gICAgfSkpLCBbZGVsYXldKTtcbiAgICByZXR1cm4gW2RlYm91bmNlZFZhbHVlLCBzZXRWYWx1ZV07XG59O1xuZXhwb3J0cy51c2VEZWJvdW5jZVN0YXRlID0gdXNlRGVib3VuY2VTdGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZURlYm91bmNlU3RhdGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlRGVib3VuY2VTdGF0ZSIsInJlYWN0XzEiLCJyZXF1aXJlIiwidGhyb3R0bGVfZGVib3VuY2VfMSIsImRlZmF1bHRWYWx1ZSIsImRlbGF5IiwiZGVib3VuY2VkVmFsdWUiLCJzZXREZWJvdW5jZWRWYWx1ZSIsInVzZVN0YXRlIiwiY2FuY2VsUmVmIiwidXNlUmVmIiwidXNlRWZmZWN0IiwiX2EiLCJjdXJyZW50IiwiY2FuY2VsIiwic2V0VmFsdWUiLCJ1c2VNZW1vIiwiZGVib3VuY2UiLCJuZXdWYWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDebounceState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDeepEqualState.js":
/*!***************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useDeepEqualState.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useDeepEqualState = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst fast_deep_equal_1 = __importDefault(__webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\"));\nconst useDeepEqualState = (defaultValue)=>{\n    const [value, setValue] = (0, react_1.useState)(defaultValue);\n    const customSetValue = (0, react_1.useCallback)((newValue)=>{\n        setValue((prevValue)=>{\n            const nextValue = typeof newValue === \"function\" ? newValue(prevValue) : newValue;\n            return (0, fast_deep_equal_1.default)(nextValue, prevValue) ? prevValue : nextValue;\n        });\n    }, [\n        setValue\n    ]);\n    return [\n        value,\n        customSetValue\n    ];\n};\nexports.useDeepEqualState = useDeepEqualState; //# sourceMappingURL=useDeepEqualState.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VEZWVwRXF1YWxTdGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLElBQUlBLGtCQUFrQixDQUFDLE1BQUcsS0FBSyxPQUFHLEVBQUVBLGVBQWUsSUFBSyxTQUFVQyxHQUFHO0lBQ2pFLE9BQU8sT0FBUUEsSUFBSUMsVUFBVSxHQUFJRCxNQUFNO1FBQUUsV0FBV0E7SUFBSTtBQUM1RDtBQUNBRSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQseUJBQXlCLEdBQUcsS0FBSztBQUNqQyxNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUMvQixNQUFNQyxvQkFBb0JWLGdCQUFnQlMsbUJBQU9BLENBQUMsc0VBQWlCO0FBQ25FLE1BQU1GLG9CQUFvQixDQUFDSTtJQUN2QixNQUFNLENBQUNMLE9BQU9NLFNBQVMsR0FBRyxDQUFDLEdBQUdKLFFBQVFLLFFBQVEsRUFBRUY7SUFDaEQsTUFBTUcsaUJBQWlCLENBQUMsR0FBR04sUUFBUU8sV0FBVyxFQUFFLENBQUNDO1FBQzdDSixTQUFTLENBQUNLO1lBQ04sTUFBTUMsWUFBWSxPQUFPRixhQUFhLGFBQ2hDQSxTQUFTQyxhQUNURDtZQUNOLE9BQU8sQ0FBQyxHQUFHTixrQkFBa0JTLE9BQU8sRUFBRUQsV0FBV0QsYUFBYUEsWUFBWUM7UUFDOUU7SUFDSixHQUFHO1FBQUNOO0tBQVM7SUFDYixPQUFPO1FBQUNOO1FBQU9RO0tBQWU7QUFDbEM7QUFDQVQseUJBQXlCLEdBQUdFLG1CQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvaG9va3MvdXNlRGVlcEVxdWFsU3RhdGUuanM/ZmEzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRGVlcEVxdWFsU3RhdGUgPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgZmFzdF9kZWVwX2VxdWFsXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImZhc3QtZGVlcC1lcXVhbFwiKSk7XG5jb25zdCB1c2VEZWVwRXF1YWxTdGF0ZSA9IChkZWZhdWx0VmFsdWUpID0+IHtcbiAgICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9ICgwLCByZWFjdF8xLnVzZVN0YXRlKShkZWZhdWx0VmFsdWUpO1xuICAgIGNvbnN0IGN1c3RvbVNldFZhbHVlID0gKDAsIHJlYWN0XzEudXNlQ2FsbGJhY2spKChuZXdWYWx1ZSkgPT4ge1xuICAgICAgICBzZXRWYWx1ZSgocHJldlZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXh0VmFsdWUgPSB0eXBlb2YgbmV3VmFsdWUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgICAgICA/IG5ld1ZhbHVlKHByZXZWYWx1ZSlcbiAgICAgICAgICAgICAgICA6IG5ld1ZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuICgwLCBmYXN0X2RlZXBfZXF1YWxfMS5kZWZhdWx0KShuZXh0VmFsdWUsIHByZXZWYWx1ZSkgPyBwcmV2VmFsdWUgOiBuZXh0VmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH0sIFtzZXRWYWx1ZV0pO1xuICAgIHJldHVybiBbdmFsdWUsIGN1c3RvbVNldFZhbHVlXTtcbn07XG5leHBvcnRzLnVzZURlZXBFcXVhbFN0YXRlID0gdXNlRGVlcEVxdWFsU3RhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEZWVwRXF1YWxTdGF0ZS5qcy5tYXAiXSwibmFtZXMiOlsiX19pbXBvcnREZWZhdWx0IiwibW9kIiwiX19lc01vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlRGVlcEVxdWFsU3RhdGUiLCJyZWFjdF8xIiwicmVxdWlyZSIsImZhc3RfZGVlcF9lcXVhbF8xIiwiZGVmYXVsdFZhbHVlIiwic2V0VmFsdWUiLCJ1c2VTdGF0ZSIsImN1c3RvbVNldFZhbHVlIiwidXNlQ2FsbGJhY2siLCJuZXdWYWx1ZSIsInByZXZWYWx1ZSIsIm5leHRWYWx1ZSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDeepEqualState.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDocumentEventListener.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useDocumentEventListener.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useDocumentEventListener = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst useDocumentEventListener = (type, listener)=>{\n    (0, react_1.useEffect)(()=>{\n        document.addEventListener(type, listener);\n        return ()=>{\n            document.removeEventListener(type, listener);\n        };\n    }, [\n        listener,\n        type\n    ]);\n};\nexports.useDocumentEventListener = useDocumentEventListener; //# sourceMappingURL=useDocumentEventListener.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VEb2N1bWVudEV2ZW50TGlzdGVuZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHLEtBQUs7QUFDeEMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsd0dBQU87QUFDL0IsTUFBTUYsMkJBQTJCLENBQUNHLE1BQU1DO0lBQ25DLElBQUdILFFBQVFJLFNBQVMsRUFBRTtRQUNuQkMsU0FBU0MsZ0JBQWdCLENBQUNKLE1BQU1DO1FBQ2hDLE9BQU87WUFDSEUsU0FBU0UsbUJBQW1CLENBQUNMLE1BQU1DO1FBQ3ZDO0lBQ0osR0FBRztRQUFDQTtRQUFVRDtLQUFLO0FBQ3ZCO0FBQ0FMLGdDQUFnQyxHQUFHRSwwQkFDbkMsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd29ybGRzLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRhc2hlZXQtZ3JpZC9kaXN0L2hvb2tzL3VzZURvY3VtZW50RXZlbnRMaXN0ZW5lci5qcz82MDNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2VEb2N1bWVudEV2ZW50TGlzdGVuZXIgPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgdXNlRG9jdW1lbnRFdmVudExpc3RlbmVyID0gKHR5cGUsIGxpc3RlbmVyKSA9PiB7XG4gICAgKDAsIHJlYWN0XzEudXNlRWZmZWN0KSgoKSA9PiB7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgfSwgW2xpc3RlbmVyLCB0eXBlXSk7XG59O1xuZXhwb3J0cy51c2VEb2N1bWVudEV2ZW50TGlzdGVuZXIgPSB1c2VEb2N1bWVudEV2ZW50TGlzdGVuZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VEb2N1bWVudEV2ZW50TGlzdGVuZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlRG9jdW1lbnRFdmVudExpc3RlbmVyIiwicmVhY3RfMSIsInJlcXVpcmUiLCJ0eXBlIiwibGlzdGVuZXIiLCJ1c2VFZmZlY3QiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDocumentEventListener.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useEdges.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useEdges.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useEdges = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst throttle_debounce_1 = __webpack_require__(/*! throttle-debounce */ \"(ssr)/./node_modules/throttle-debounce/cjs/index.js\");\nconst useDeepEqualState_1 = __webpack_require__(/*! ./useDeepEqualState */ \"(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useDeepEqualState.js\");\nconst useEdges = (ref, width, height)=>{\n    const [edges, setEdges] = (0, useDeepEqualState_1.useDeepEqualState)({\n        top: true,\n        right: true,\n        bottom: true,\n        left: true\n    });\n    (0, react_1.useEffect)(()=>{\n        const onScroll = (0, throttle_debounce_1.throttle)(100, ()=>{\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n            setEdges({\n                top: ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.scrollTop) === 0,\n                right: ((_c = (_b = ref.current) === null || _b === void 0 ? void 0 : _b.scrollLeft) !== null && _c !== void 0 ? _c : 0) >= ((_e = (_d = ref.current) === null || _d === void 0 ? void 0 : _d.scrollWidth) !== null && _e !== void 0 ? _e : 0) - (width !== null && width !== void 0 ? width : 0) - 1,\n                bottom: ((_g = (_f = ref.current) === null || _f === void 0 ? void 0 : _f.scrollTop) !== null && _g !== void 0 ? _g : 0) >= ((_j = (_h = ref.current) === null || _h === void 0 ? void 0 : _h.scrollHeight) !== null && _j !== void 0 ? _j : 0) - (height !== null && height !== void 0 ? height : 0) - 1,\n                left: ((_k = ref.current) === null || _k === void 0 ? void 0 : _k.scrollLeft) === 0\n            });\n        });\n        const current = ref.current;\n        current === null || current === void 0 ? void 0 : current.addEventListener(\"scroll\", onScroll);\n        setTimeout(onScroll, 100);\n        return ()=>{\n            current === null || current === void 0 ? void 0 : current.removeEventListener(\"scroll\", onScroll);\n            onScroll.cancel();\n        };\n    }, [\n        height,\n        width,\n        ref,\n        setEdges\n    ]);\n    return edges;\n};\nexports.useEdges = useEdges; //# sourceMappingURL=useEdges.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VFZGdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsZ0JBQWdCLEdBQUcsS0FBSztBQUN4QixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUMvQixNQUFNQyxzQkFBc0JELG1CQUFPQSxDQUFDLDhFQUFtQjtBQUN2RCxNQUFNRSxzQkFBc0JGLG1CQUFPQSxDQUFDLHNHQUFxQjtBQUN6RCxNQUFNRixXQUFXLENBQUNLLEtBQUtDLE9BQU9DO0lBQzFCLE1BQU0sQ0FBQ0MsT0FBT0MsU0FBUyxHQUFHLENBQUMsR0FBR0wsb0JBQW9CTSxpQkFBaUIsRUFBRTtRQUNqRUMsS0FBSztRQUNMQyxPQUFPO1FBQ1BDLFFBQVE7UUFDUkMsTUFBTTtJQUNWO0lBQ0MsSUFBR2IsUUFBUWMsU0FBUyxFQUFFO1FBQ25CLE1BQU1DLFdBQVcsQ0FBQyxHQUFHYixvQkFBb0JjLFFBQVEsRUFBRSxLQUFLO1lBQ3BELElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDLElBQUlDO1lBQ3hDbEIsU0FBUztnQkFDTEUsS0FBSyxDQUFDLENBQUNPLEtBQUtiLElBQUl1QixPQUFPLE1BQU0sUUFBUVYsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHVyxTQUFTLE1BQU07Z0JBQ2hGakIsT0FBTyxDQUFDLENBQUNRLEtBQUssQ0FBQ0QsS0FBS2QsSUFBSXVCLE9BQU8sTUFBTSxRQUFRVCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdXLFVBQVUsTUFBTSxRQUFRVixPQUFPLEtBQUssSUFBSUEsS0FBSyxNQUNsSCxDQUFDLENBQUNFLEtBQUssQ0FBQ0QsS0FBS2hCLElBQUl1QixPQUFPLE1BQU0sUUFBUVAsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHVSxXQUFXLE1BQU0sUUFBUVQsT0FBTyxLQUFLLElBQUlBLEtBQUssS0FBTWhCLENBQUFBLFVBQVUsUUFBUUEsVUFBVSxLQUFLLElBQUlBLFFBQVEsS0FBSztnQkFDNUtPLFFBQVEsQ0FBQyxDQUFDVyxLQUFLLENBQUNELEtBQUtsQixJQUFJdUIsT0FBTyxNQUFNLFFBQVFMLE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR00sU0FBUyxNQUFNLFFBQVFMLE9BQU8sS0FBSyxJQUFJQSxLQUFLLE1BQ2xILENBQUMsQ0FBQ0UsS0FBSyxDQUFDRCxLQUFLcEIsSUFBSXVCLE9BQU8sTUFBTSxRQUFRSCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdPLFlBQVksTUFBTSxRQUFRTixPQUFPLEtBQUssSUFBSUEsS0FBSyxLQUFNbkIsQ0FBQUEsV0FBVyxRQUFRQSxXQUFXLEtBQUssSUFBSUEsU0FBUyxLQUFLO2dCQUNoTE8sTUFBTSxDQUFDLENBQUNhLEtBQUt0QixJQUFJdUIsT0FBTyxNQUFNLFFBQVFELE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0csVUFBVSxNQUFNO1lBQ3RGO1FBQ0o7UUFDQSxNQUFNRixVQUFVdkIsSUFBSXVCLE9BQU87UUFDM0JBLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRSyxnQkFBZ0IsQ0FBQyxVQUFVakI7UUFDckZrQixXQUFXbEIsVUFBVTtRQUNyQixPQUFPO1lBQ0hZLFlBQVksUUFBUUEsWUFBWSxLQUFLLElBQUksS0FBSyxJQUFJQSxRQUFRTyxtQkFBbUIsQ0FBQyxVQUFVbkI7WUFDeEZBLFNBQVNvQixNQUFNO1FBQ25CO0lBQ0osR0FBRztRQUFDN0I7UUFBUUQ7UUFBT0Q7UUFBS0k7S0FBUztJQUNqQyxPQUFPRDtBQUNYO0FBQ0FWLGdCQUFnQixHQUFHRSxVQUNuQixvQ0FBb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvaG9va3MvdXNlRWRnZXMuanM/YTlkYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXNlRWRnZXMgPSB2b2lkIDA7XG5jb25zdCByZWFjdF8xID0gcmVxdWlyZShcInJlYWN0XCIpO1xuY29uc3QgdGhyb3R0bGVfZGVib3VuY2VfMSA9IHJlcXVpcmUoXCJ0aHJvdHRsZS1kZWJvdW5jZVwiKTtcbmNvbnN0IHVzZURlZXBFcXVhbFN0YXRlXzEgPSByZXF1aXJlKFwiLi91c2VEZWVwRXF1YWxTdGF0ZVwiKTtcbmNvbnN0IHVzZUVkZ2VzID0gKHJlZiwgd2lkdGgsIGhlaWdodCkgPT4ge1xuICAgIGNvbnN0IFtlZGdlcywgc2V0RWRnZXNdID0gKDAsIHVzZURlZXBFcXVhbFN0YXRlXzEudXNlRGVlcEVxdWFsU3RhdGUpKHtcbiAgICAgICAgdG9wOiB0cnVlLFxuICAgICAgICByaWdodDogdHJ1ZSxcbiAgICAgICAgYm90dG9tOiB0cnVlLFxuICAgICAgICBsZWZ0OiB0cnVlLFxuICAgIH0pO1xuICAgICgwLCByZWFjdF8xLnVzZUVmZmVjdCkoKCkgPT4ge1xuICAgICAgICBjb25zdCBvblNjcm9sbCA9ICgwLCB0aHJvdHRsZV9kZWJvdW5jZV8xLnRocm90dGxlKSgxMDAsICgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaztcbiAgICAgICAgICAgIHNldEVkZ2VzKHtcbiAgICAgICAgICAgICAgICB0b3A6ICgoX2EgPSByZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNjcm9sbFRvcCkgPT09IDAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6ICgoX2MgPSAoX2IgPSByZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNjcm9sbExlZnQpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDApID49XG4gICAgICAgICAgICAgICAgICAgICgoX2UgPSAoX2QgPSByZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnNjcm9sbFdpZHRoKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiAwKSAtICh3aWR0aCAhPT0gbnVsbCAmJiB3aWR0aCAhPT0gdm9pZCAwID8gd2lkdGggOiAwKSAtIDEsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAoKF9nID0gKF9mID0gcmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9mID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZi5zY3JvbGxUb3ApICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IDApID49XG4gICAgICAgICAgICAgICAgICAgICgoX2ogPSAoX2ggPSByZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9oLnNjcm9sbEhlaWdodCkgIT09IG51bGwgJiYgX2ogIT09IHZvaWQgMCA/IF9qIDogMCkgLSAoaGVpZ2h0ICE9PSBudWxsICYmIGhlaWdodCAhPT0gdm9pZCAwID8gaGVpZ2h0IDogMCkgLSAxLFxuICAgICAgICAgICAgICAgIGxlZnQ6ICgoX2sgPSByZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9rLnNjcm9sbExlZnQpID09PSAwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY3VycmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBvblNjcm9sbCk7XG4gICAgICAgIHNldFRpbWVvdXQob25TY3JvbGwsIDEwMCk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgb25TY3JvbGwpO1xuICAgICAgICAgICAgb25TY3JvbGwuY2FuY2VsKCk7XG4gICAgICAgIH07XG4gICAgfSwgW2hlaWdodCwgd2lkdGgsIHJlZiwgc2V0RWRnZXNdKTtcbiAgICByZXR1cm4gZWRnZXM7XG59O1xuZXhwb3J0cy51c2VFZGdlcyA9IHVzZUVkZ2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlRWRnZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidXNlRWRnZXMiLCJyZWFjdF8xIiwicmVxdWlyZSIsInRocm90dGxlX2RlYm91bmNlXzEiLCJ1c2VEZWVwRXF1YWxTdGF0ZV8xIiwicmVmIiwid2lkdGgiLCJoZWlnaHQiLCJlZGdlcyIsInNldEVkZ2VzIiwidXNlRGVlcEVxdWFsU3RhdGUiLCJ0b3AiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJ1c2VFZmZlY3QiLCJvblNjcm9sbCIsInRocm90dGxlIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwiX2ciLCJfaCIsIl9qIiwiX2siLCJjdXJyZW50Iiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsInNjcm9sbFdpZHRoIiwic2Nyb2xsSGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInNldFRpbWVvdXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2FuY2VsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useEdges.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useFirstRender.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useFirstRender.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useFirstRender = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst useFirstRender = ()=>{\n    const firstRenderRef = (0, react_1.useRef)(true);\n    const firstRender = firstRenderRef.current;\n    firstRenderRef.current = false;\n    return firstRender;\n};\nexports.useFirstRender = useFirstRender; //# sourceMappingURL=useFirstRender.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VGaXJzdFJlbmRlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsc0JBQXNCLEdBQUcsS0FBSztBQUM5QixNQUFNRyxVQUFVQyxtQkFBT0EsQ0FBQyx3R0FBTztBQUMvQixNQUFNRixpQkFBaUI7SUFDbkIsTUFBTUcsaUJBQWlCLENBQUMsR0FBR0YsUUFBUUcsTUFBTSxFQUFFO0lBQzNDLE1BQU1DLGNBQWNGLGVBQWVHLE9BQU87SUFDMUNILGVBQWVHLE9BQU8sR0FBRztJQUN6QixPQUFPRDtBQUNYO0FBQ0FQLHNCQUFzQixHQUFHRSxnQkFDekIsMENBQTBDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd29ybGRzLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRhc2hlZXQtZ3JpZC9kaXN0L2hvb2tzL3VzZUZpcnN0UmVuZGVyLmpzPzBhZjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUZpcnN0UmVuZGVyID0gdm9pZCAwO1xuY29uc3QgcmVhY3RfMSA9IHJlcXVpcmUoXCJyZWFjdFwiKTtcbmNvbnN0IHVzZUZpcnN0UmVuZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IGZpcnN0UmVuZGVyUmVmID0gKDAsIHJlYWN0XzEudXNlUmVmKSh0cnVlKTtcbiAgICBjb25zdCBmaXJzdFJlbmRlciA9IGZpcnN0UmVuZGVyUmVmLmN1cnJlbnQ7XG4gICAgZmlyc3RSZW5kZXJSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIHJldHVybiBmaXJzdFJlbmRlcjtcbn07XG5leHBvcnRzLnVzZUZpcnN0UmVuZGVyID0gdXNlRmlyc3RSZW5kZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VGaXJzdFJlbmRlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1c2VGaXJzdFJlbmRlciIsInJlYWN0XzEiLCJyZXF1aXJlIiwiZmlyc3RSZW5kZXJSZWYiLCJ1c2VSZWYiLCJmaXJzdFJlbmRlciIsImN1cnJlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useFirstRender.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useGetBoundingClientRect.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useGetBoundingClientRect.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useGetBoundingClientRect = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst throttle_debounce_1 = __webpack_require__(/*! throttle-debounce */ \"(ssr)/./node_modules/throttle-debounce/cjs/index.js\");\n// Cache bounding rect in a ref and only recompute every <delay>ms\nconst useGetBoundingClientRect = (ref, delay = 200)=>{\n    const boundingRect = (0, react_1.useRef)(null);\n    const throttledCompute = (0, react_1.useMemo)(()=>(0, throttle_debounce_1.throttle)(delay, true, ()=>{\n            setTimeout(()=>{\n                var _a;\n                return boundingRect.current = ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || null;\n            }, 0);\n        }), [\n        ref,\n        delay\n    ]);\n    return (0, react_1.useCallback)((force = false)=>{\n        var _a;\n        if (force) {\n            boundingRect.current = ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || null;\n        } else {\n            throttledCompute();\n        }\n        return boundingRect.current;\n    }, [\n        ref,\n        throttledCompute\n    ]);\n};\nexports.useGetBoundingClientRect = useGetBoundingClientRect; //# sourceMappingURL=useGetBoundingClientRect.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VHZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHLEtBQUs7QUFDeEMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsd0dBQU87QUFDL0IsTUFBTUMsc0JBQXNCRCxtQkFBT0EsQ0FBQyw4RUFBbUI7QUFDdkQsa0VBQWtFO0FBQ2xFLE1BQU1GLDJCQUEyQixDQUFDSSxLQUFLQyxRQUFRLEdBQUc7SUFDOUMsTUFBTUMsZUFBZSxDQUFDLEdBQUdMLFFBQVFNLE1BQU0sRUFBRTtJQUN6QyxNQUFNQyxtQkFBbUIsQ0FBQyxHQUFHUCxRQUFRUSxPQUFPLEVBQUUsSUFBTSxDQUFDLEdBQUdOLG9CQUFvQk8sUUFBUSxFQUFFTCxPQUFPLE1BQU07WUFDL0ZNLFdBQVc7Z0JBQ1AsSUFBSUM7Z0JBQ0osT0FBUU4sYUFBYU8sT0FBTyxHQUN4QixDQUFDLENBQUNELEtBQUtSLElBQUlTLE9BQU8sTUFBTSxRQUFRRCxPQUFPLEtBQUssSUFBSSxLQUFLLElBQUlBLEdBQUdFLHFCQUFxQixFQUFDLEtBQU07WUFDaEcsR0FBRztRQUNQLElBQUk7UUFBQ1Y7UUFBS0M7S0FBTTtJQUNoQixPQUFPLENBQUMsR0FBR0osUUFBUWMsV0FBVyxFQUFFLENBQUNDLFFBQVEsS0FBSztRQUMxQyxJQUFJSjtRQUNKLElBQUlJLE9BQU87WUFDUFYsYUFBYU8sT0FBTyxHQUFHLENBQUMsQ0FBQ0QsS0FBS1IsSUFBSVMsT0FBTyxNQUFNLFFBQVFELE9BQU8sS0FBSyxJQUFJLEtBQUssSUFBSUEsR0FBR0UscUJBQXFCLEVBQUMsS0FBTTtRQUNuSCxPQUNLO1lBQ0ROO1FBQ0o7UUFDQSxPQUFPRixhQUFhTyxPQUFPO0lBQy9CLEdBQUc7UUFBQ1Q7UUFBS0k7S0FBaUI7QUFDOUI7QUFDQVYsZ0NBQWdDLEdBQUdFLDBCQUNuQyxvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvaG9va3MvdXNlR2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzPzNiMWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZUdldEJvdW5kaW5nQ2xpZW50UmVjdCA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB0aHJvdHRsZV9kZWJvdW5jZV8xID0gcmVxdWlyZShcInRocm90dGxlLWRlYm91bmNlXCIpO1xuLy8gQ2FjaGUgYm91bmRpbmcgcmVjdCBpbiBhIHJlZiBhbmQgb25seSByZWNvbXB1dGUgZXZlcnkgPGRlbGF5Pm1zXG5jb25zdCB1c2VHZXRCb3VuZGluZ0NsaWVudFJlY3QgPSAocmVmLCBkZWxheSA9IDIwMCkgPT4ge1xuICAgIGNvbnN0IGJvdW5kaW5nUmVjdCA9ICgwLCByZWFjdF8xLnVzZVJlZikobnVsbCk7XG4gICAgY29uc3QgdGhyb3R0bGVkQ29tcHV0ZSA9ICgwLCByZWFjdF8xLnVzZU1lbW8pKCgpID0+ICgwLCB0aHJvdHRsZV9kZWJvdW5jZV8xLnRocm90dGxlKShkZWxheSwgdHJ1ZSwgKCkgPT4ge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoYm91bmRpbmdSZWN0LmN1cnJlbnQgPVxuICAgICAgICAgICAgICAgICgoX2EgPSByZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKSB8fCBudWxsKTtcbiAgICAgICAgfSwgMCk7XG4gICAgfSksIFtyZWYsIGRlbGF5XSk7XG4gICAgcmV0dXJuICgwLCByZWFjdF8xLnVzZUNhbGxiYWNrKSgoZm9yY2UgPSBmYWxzZSkgPT4ge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmIChmb3JjZSkge1xuICAgICAgICAgICAgYm91bmRpbmdSZWN0LmN1cnJlbnQgPSAoKF9hID0gcmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSkgfHwgbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm90dGxlZENvbXB1dGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm91bmRpbmdSZWN0LmN1cnJlbnQ7XG4gICAgfSwgW3JlZiwgdGhyb3R0bGVkQ29tcHV0ZV0pO1xufTtcbmV4cG9ydHMudXNlR2V0Qm91bmRpbmdDbGllbnRSZWN0ID0gdXNlR2V0Qm91bmRpbmdDbGllbnRSZWN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlR2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInVzZUdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInJlYWN0XzEiLCJyZXF1aXJlIiwidGhyb3R0bGVfZGVib3VuY2VfMSIsInJlZiIsImRlbGF5IiwiYm91bmRpbmdSZWN0IiwidXNlUmVmIiwidGhyb3R0bGVkQ29tcHV0ZSIsInVzZU1lbW8iLCJ0aHJvdHRsZSIsInNldFRpbWVvdXQiLCJfYSIsImN1cnJlbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ1c2VDYWxsYmFjayIsImZvcmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useGetBoundingClientRect.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useMemoizedIndexCallback.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useMemoizedIndexCallback.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useMemoizedIndexCallback = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst useMemoizedIndexCallback = (callbackFn, argsLength)=>{\n    return (0, react_1.useMemo)(()=>{\n        const cache = new Map();\n        return (index)=>{\n            if (!cache.has(index)) {\n                cache.set(index, (...args)=>{\n                    callbackFn(index, ...args.slice(0, argsLength));\n                });\n            }\n            return cache.get(index);\n        };\n    }, [\n        argsLength,\n        callbackFn\n    ]);\n};\nexports.useMemoizedIndexCallback = useMemoizedIndexCallback; //# sourceMappingURL=useMemoizedIndexCallback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9ob29rcy91c2VNZW1vaXplZEluZGV4Q2FsbGJhY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdDQUFnQyxHQUFHLEtBQUs7QUFDeEMsTUFBTUcsVUFBVUMsbUJBQU9BLENBQUMsd0dBQU87QUFDL0IsTUFBTUYsMkJBQTJCLENBQUNHLFlBQVlDO0lBQzFDLE9BQU8sQ0FBQyxHQUFHSCxRQUFRSSxPQUFPLEVBQUU7UUFDeEIsTUFBTUMsUUFBUSxJQUFJQztRQUNsQixPQUFPLENBQUNDO1lBQ0osSUFBSSxDQUFDRixNQUFNRyxHQUFHLENBQUNELFFBQVE7Z0JBQ25CRixNQUFNSSxHQUFHLENBQUNGLE9BQU8sQ0FBQyxHQUFHRztvQkFDakJSLFdBQVdLLFVBQVVHLEtBQUtDLEtBQUssQ0FBQyxHQUFHUjtnQkFDdkM7WUFDSjtZQUNBLE9BQU9FLE1BQU1PLEdBQUcsQ0FBQ0w7UUFDckI7SUFDSixHQUFHO1FBQUNKO1FBQVlEO0tBQVc7QUFDL0I7QUFDQUwsZ0NBQWdDLEdBQUdFLDBCQUNuQyxvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvaG9va3MvdXNlTWVtb2l6ZWRJbmRleENhbGxiYWNrLmpzP2E2ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzZU1lbW9pemVkSW5kZXhDYWxsYmFjayA9IHZvaWQgMDtcbmNvbnN0IHJlYWN0XzEgPSByZXF1aXJlKFwicmVhY3RcIik7XG5jb25zdCB1c2VNZW1vaXplZEluZGV4Q2FsbGJhY2sgPSAoY2FsbGJhY2tGbiwgYXJnc0xlbmd0aCkgPT4ge1xuICAgIHJldHVybiAoMCwgcmVhY3RfMS51c2VNZW1vKSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICByZXR1cm4gKGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlLmhhcyhpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBjYWNoZS5zZXQoaW5kZXgsICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrRm4oaW5kZXgsIC4uLmFyZ3Muc2xpY2UoMCwgYXJnc0xlbmd0aCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlLmdldChpbmRleCk7XG4gICAgICAgIH07XG4gICAgfSwgW2FyZ3NMZW5ndGgsIGNhbGxiYWNrRm5dKTtcbn07XG5leHBvcnRzLnVzZU1lbW9pemVkSW5kZXhDYWxsYmFjayA9IHVzZU1lbW9pemVkSW5kZXhDYWxsYmFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVzZU1lbW9pemVkSW5kZXhDYWxsYmFjay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ1c2VNZW1vaXplZEluZGV4Q2FsbGJhY2siLCJyZWFjdF8xIiwicmVxdWlyZSIsImNhbGxiYWNrRm4iLCJhcmdzTGVuZ3RoIiwidXNlTWVtbyIsImNhY2hlIiwiTWFwIiwiaW5kZXgiLCJoYXMiLCJzZXQiLCJhcmdzIiwic2xpY2UiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useMemoizedIndexCallback.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useRowHeights.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/hooks/useRowHeights.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.useRowHeights = void 0;\nconst react_1 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nconst useRowHeights = ({ value, rowHeight })=>{\n    const calculatedHeights = (0, react_1.useRef)([]);\n    const [, rerender] = (0, react_1.useState)(0);\n    return (0, react_1.useMemo)(()=>{\n        const getRowIndex = (top)=>{\n            if (typeof rowHeight === \"number\") {\n                return Math.min(value.length - 1, Math.max(-1, Math.floor(top / rowHeight)));\n            }\n            let l = 0;\n            let r = calculatedHeights.current.length - 1;\n            while(l <= r){\n                const m = Math.floor((l + r) / 2);\n                if (calculatedHeights.current[m].top < top) {\n                    l = m + 1;\n                } else if (calculatedHeights.current[m].top > top) {\n                    r = m - 1;\n                } else {\n                    return m;\n                }\n            }\n            if (r === calculatedHeights.current.length - 1 && value.length > calculatedHeights.current.length && (!calculatedHeights.current.length || top >= calculatedHeights.current[r].top + calculatedHeights.current[r].height)) {\n                let lastBottom = r === -1 ? 0 : calculatedHeights.current[r].top + calculatedHeights.current[r].height;\n                do {\n                    r++;\n                    const height = rowHeight({\n                        rowIndex: r,\n                        rowData: value[r]\n                    });\n                    calculatedHeights.current.push({\n                        height,\n                        top: lastBottom\n                    });\n                    lastBottom += height;\n                }while (lastBottom <= top && r < calculatedHeights.current.length - 1);\n            }\n            return r;\n        };\n        return {\n            resetAfter: (index)=>{\n                calculatedHeights.current = calculatedHeights.current.slice(0, index);\n                rerender((x)=>x + 1);\n            },\n            getRowSize: (index)=>{\n                if (typeof rowHeight === \"number\") {\n                    return {\n                        height: rowHeight,\n                        top: rowHeight * index\n                    };\n                }\n                if (index >= value.length) {\n                    return {\n                        height: 0,\n                        top: 0\n                    };\n                }\n                if (index < calculatedHeights.current.length) {\n                    return calculatedHeights.current[index];\n                }\n                let lastBottom = calculatedHeights.current[calculatedHeights.current.length - 1].top + calculatedHeights.current[calculatedHeights.current.length - 1].height;\n                for(let i = calculatedHeights.current.length; i <= index; i++){\n                    const height = rowHeight({\n                        rowIndex: i,\n                        rowData: value[i]\n                    });\n                    calculatedHeights.current.push({\n                        height,\n                        top: lastBottom\n                    });\n                    lastBottom += height;\n                }\n                return calculatedHeights.current[index];\n            },\n            getRowIndex,\n            totalSize: (maxHeight)=>{\n                if (typeof rowHeight === \"number\") {\n                    return value.length * rowHeight;\n                }\n                const index = getRowIndex(maxHeight);\n                return calculatedHeights.current[index].top + calculatedHeights.current[index].height;\n            }\n        };\n    }, [\n        rowHeight,\n        value\n    ]);\n};\nexports.useRowHeights = useRowHeights; //# sourceMappingURL=useRowHeights.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/hooks/useRowHeights.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.renderContextMenuItem = exports.createContextMenuComponent = exports.createAddRowsComponent = exports.keyColumn = exports.isoDateColumn = exports.dateColumn = exports.percentColumn = exports.intColumn = exports.floatColumn = exports.checkboxColumn = exports.createTextColumn = exports.textColumn = exports.DataSheetGrid = exports.DynamicDataSheetGrid = void 0;\nconst DataSheetGrid_1 = __webpack_require__(/*! ./components/DataSheetGrid */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/DataSheetGrid.js\");\nconst StaticDataSheetGrid_1 = __webpack_require__(/*! ./components/StaticDataSheetGrid */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/StaticDataSheetGrid.js\");\nexports.DynamicDataSheetGrid = DataSheetGrid_1.DataSheetGrid;\nexports.DataSheetGrid = StaticDataSheetGrid_1.StaticDataSheetGrid;\nvar textColumn_1 = __webpack_require__(/*! ./columns/textColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/textColumn.js\");\nObject.defineProperty(exports, \"textColumn\", ({\n    enumerable: true,\n    get: function() {\n        return textColumn_1.textColumn;\n    }\n}));\nObject.defineProperty(exports, \"createTextColumn\", ({\n    enumerable: true,\n    get: function() {\n        return textColumn_1.createTextColumn;\n    }\n}));\nvar checkboxColumn_1 = __webpack_require__(/*! ./columns/checkboxColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/checkboxColumn.js\");\nObject.defineProperty(exports, \"checkboxColumn\", ({\n    enumerable: true,\n    get: function() {\n        return checkboxColumn_1.checkboxColumn;\n    }\n}));\nvar floatColumn_1 = __webpack_require__(/*! ./columns/floatColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/floatColumn.js\");\nObject.defineProperty(exports, \"floatColumn\", ({\n    enumerable: true,\n    get: function() {\n        return floatColumn_1.floatColumn;\n    }\n}));\nvar intColumn_1 = __webpack_require__(/*! ./columns/intColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/intColumn.js\");\nObject.defineProperty(exports, \"intColumn\", ({\n    enumerable: true,\n    get: function() {\n        return intColumn_1.intColumn;\n    }\n}));\nvar percentColumn_1 = __webpack_require__(/*! ./columns/percentColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/percentColumn.js\");\nObject.defineProperty(exports, \"percentColumn\", ({\n    enumerable: true,\n    get: function() {\n        return percentColumn_1.percentColumn;\n    }\n}));\nvar dateColumn_1 = __webpack_require__(/*! ./columns/dateColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/dateColumn.js\");\nObject.defineProperty(exports, \"dateColumn\", ({\n    enumerable: true,\n    get: function() {\n        return dateColumn_1.dateColumn;\n    }\n}));\nvar isoDateColumn_1 = __webpack_require__(/*! ./columns/isoDateColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/isoDateColumn.js\");\nObject.defineProperty(exports, \"isoDateColumn\", ({\n    enumerable: true,\n    get: function() {\n        return isoDateColumn_1.isoDateColumn;\n    }\n}));\nvar keyColumn_1 = __webpack_require__(/*! ./columns/keyColumn */ \"(ssr)/./node_modules/react-datasheet-grid/dist/columns/keyColumn.js\");\nObject.defineProperty(exports, \"keyColumn\", ({\n    enumerable: true,\n    get: function() {\n        return keyColumn_1.keyColumn;\n    }\n}));\nvar AddRows_1 = __webpack_require__(/*! ./components/AddRows */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/AddRows.js\");\nObject.defineProperty(exports, \"createAddRowsComponent\", ({\n    enumerable: true,\n    get: function() {\n        return AddRows_1.createAddRowsComponent;\n    }\n}));\nvar ContextMenu_1 = __webpack_require__(/*! ./components/ContextMenu */ \"(ssr)/./node_modules/react-datasheet-grid/dist/components/ContextMenu.js\");\nObject.defineProperty(exports, \"createContextMenuComponent\", ({\n    enumerable: true,\n    get: function() {\n        return ContextMenu_1.createContextMenuComponent;\n    }\n}));\nObject.defineProperty(exports, \"renderContextMenuItem\", ({\n    enumerable: true,\n    get: function() {\n        return ContextMenu_1.defaultRenderItem;\n    }\n})); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsNkJBQTZCLEdBQUdBLGtDQUFrQyxHQUFHQSw4QkFBOEIsR0FBR0EsaUJBQWlCLEdBQUdBLHFCQUFxQixHQUFHQSxrQkFBa0IsR0FBR0EscUJBQXFCLEdBQUdBLGlCQUFpQixHQUFHQSxtQkFBbUIsR0FBR0Esc0JBQXNCLEdBQUdBLHdCQUF3QixHQUFHQSxrQkFBa0IsR0FBR0EscUJBQXFCLEdBQUdBLDRCQUE0QixHQUFHLEtBQUs7QUFDOVcsTUFBTWdCLGtCQUFrQkMsbUJBQU9BLENBQUMsOEdBQTRCO0FBQzVELE1BQU1DLHdCQUF3QkQsbUJBQU9BLENBQUMsMEhBQWtDO0FBQ3hFakIsNEJBQTRCLEdBQUdnQixnQkFBZ0JGLGFBQWE7QUFDNURkLHFCQUFxQixHQUFHa0Isc0JBQXNCQyxtQkFBbUI7QUFDakUsSUFBSUMsZUFBZUgsbUJBQU9BLENBQUMsa0dBQXNCO0FBQ2pEbkIsOENBQTZDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRixhQUFhUCxVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEhmLG9EQUFtRDtJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0YsYUFBYVIsZ0JBQWdCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDcEksSUFBSVcsbUJBQW1CTixtQkFBT0EsQ0FBQywwR0FBMEI7QUFDekRuQixrREFBaUQ7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9DLGlCQUFpQlosY0FBYztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3BJLElBQUlhLGdCQUFnQlAsbUJBQU9BLENBQUMsb0dBQXVCO0FBQ25EbkIsK0NBQThDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRSxjQUFjZCxXQUFXO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDM0gsSUFBSWUsY0FBY1IsbUJBQU9BLENBQUMsZ0dBQXFCO0FBQy9DbkIsNkNBQTRDO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPRyxZQUFZaEIsU0FBUztJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ3JILElBQUlpQixrQkFBa0JULG1CQUFPQSxDQUFDLHdHQUF5QjtBQUN2RG5CLGlEQUFnRDtJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT0ksZ0JBQWdCbEIsYUFBYTtJQUFFO0FBQUUsQ0FBQyxFQUFDO0FBQ2pJLElBQUltQixlQUFlVixtQkFBT0EsQ0FBQyxrR0FBc0I7QUFDakRuQiw4Q0FBNkM7SUFBRXVCLFlBQVk7SUFBTUMsS0FBSztRQUFjLE9BQU9LLGFBQWFwQixVQUFVO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDeEgsSUFBSXFCLGtCQUFrQlgsbUJBQU9BLENBQUMsd0dBQXlCO0FBQ3ZEbkIsaURBQWdEO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPTSxnQkFBZ0J0QixhQUFhO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDakksSUFBSXVCLGNBQWNaLG1CQUFPQSxDQUFDLGdHQUFxQjtBQUMvQ25CLDZDQUE0QztJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT08sWUFBWXhCLFNBQVM7SUFBRTtBQUFFLENBQUMsRUFBQztBQUNySCxJQUFJeUIsWUFBWWIsbUJBQU9BLENBQUMsa0dBQXNCO0FBQzlDbkIsMERBQXlEO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPUSxVQUFVMUIsc0JBQXNCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDN0ksSUFBSTJCLGdCQUFnQmQsbUJBQU9BLENBQUMsMEdBQTBCO0FBQ3REbkIsOERBQTZEO0lBQUV1QixZQUFZO0lBQU1DLEtBQUs7UUFBYyxPQUFPUyxjQUFjNUIsMEJBQTBCO0lBQUU7QUFBRSxDQUFDLEVBQUM7QUFDekpMLHlEQUF3RDtJQUFFdUIsWUFBWTtJQUFNQyxLQUFLO1FBQWMsT0FBT1MsY0FBY0MsaUJBQWlCO0lBQUU7QUFBRSxDQUFDLEVBQUMsRUFDM0ksaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd29ybGRzLWRhc2hib2FyZC8uL25vZGVfbW9kdWxlcy9yZWFjdC1kYXRhc2hlZXQtZ3JpZC9kaXN0L2luZGV4LmpzPzQ5YTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJlbmRlckNvbnRleHRNZW51SXRlbSA9IGV4cG9ydHMuY3JlYXRlQ29udGV4dE1lbnVDb21wb25lbnQgPSBleHBvcnRzLmNyZWF0ZUFkZFJvd3NDb21wb25lbnQgPSBleHBvcnRzLmtleUNvbHVtbiA9IGV4cG9ydHMuaXNvRGF0ZUNvbHVtbiA9IGV4cG9ydHMuZGF0ZUNvbHVtbiA9IGV4cG9ydHMucGVyY2VudENvbHVtbiA9IGV4cG9ydHMuaW50Q29sdW1uID0gZXhwb3J0cy5mbG9hdENvbHVtbiA9IGV4cG9ydHMuY2hlY2tib3hDb2x1bW4gPSBleHBvcnRzLmNyZWF0ZVRleHRDb2x1bW4gPSBleHBvcnRzLnRleHRDb2x1bW4gPSBleHBvcnRzLkRhdGFTaGVldEdyaWQgPSBleHBvcnRzLkR5bmFtaWNEYXRhU2hlZXRHcmlkID0gdm9pZCAwO1xuY29uc3QgRGF0YVNoZWV0R3JpZF8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9EYXRhU2hlZXRHcmlkXCIpO1xuY29uc3QgU3RhdGljRGF0YVNoZWV0R3JpZF8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9TdGF0aWNEYXRhU2hlZXRHcmlkXCIpO1xuZXhwb3J0cy5EeW5hbWljRGF0YVNoZWV0R3JpZCA9IERhdGFTaGVldEdyaWRfMS5EYXRhU2hlZXRHcmlkO1xuZXhwb3J0cy5EYXRhU2hlZXRHcmlkID0gU3RhdGljRGF0YVNoZWV0R3JpZF8xLlN0YXRpY0RhdGFTaGVldEdyaWQ7XG52YXIgdGV4dENvbHVtbl8xID0gcmVxdWlyZShcIi4vY29sdW1ucy90ZXh0Q29sdW1uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwidGV4dENvbHVtblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGV4dENvbHVtbl8xLnRleHRDb2x1bW47IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVUZXh0Q29sdW1uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0ZXh0Q29sdW1uXzEuY3JlYXRlVGV4dENvbHVtbjsgfSB9KTtcbnZhciBjaGVja2JveENvbHVtbl8xID0gcmVxdWlyZShcIi4vY29sdW1ucy9jaGVja2JveENvbHVtblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNoZWNrYm94Q29sdW1uXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjaGVja2JveENvbHVtbl8xLmNoZWNrYm94Q29sdW1uOyB9IH0pO1xudmFyIGZsb2F0Q29sdW1uXzEgPSByZXF1aXJlKFwiLi9jb2x1bW5zL2Zsb2F0Q29sdW1uXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZmxvYXRDb2x1bW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZsb2F0Q29sdW1uXzEuZmxvYXRDb2x1bW47IH0gfSk7XG52YXIgaW50Q29sdW1uXzEgPSByZXF1aXJlKFwiLi9jb2x1bW5zL2ludENvbHVtblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImludENvbHVtblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW50Q29sdW1uXzEuaW50Q29sdW1uOyB9IH0pO1xudmFyIHBlcmNlbnRDb2x1bW5fMSA9IHJlcXVpcmUoXCIuL2NvbHVtbnMvcGVyY2VudENvbHVtblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInBlcmNlbnRDb2x1bW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmNlbnRDb2x1bW5fMS5wZXJjZW50Q29sdW1uOyB9IH0pO1xudmFyIGRhdGVDb2x1bW5fMSA9IHJlcXVpcmUoXCIuL2NvbHVtbnMvZGF0ZUNvbHVtblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRhdGVDb2x1bW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRhdGVDb2x1bW5fMS5kYXRlQ29sdW1uOyB9IH0pO1xudmFyIGlzb0RhdGVDb2x1bW5fMSA9IHJlcXVpcmUoXCIuL2NvbHVtbnMvaXNvRGF0ZUNvbHVtblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImlzb0RhdGVDb2x1bW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzb0RhdGVDb2x1bW5fMS5pc29EYXRlQ29sdW1uOyB9IH0pO1xudmFyIGtleUNvbHVtbl8xID0gcmVxdWlyZShcIi4vY29sdW1ucy9rZXlDb2x1bW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJrZXlDb2x1bW5cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGtleUNvbHVtbl8xLmtleUNvbHVtbjsgfSB9KTtcbnZhciBBZGRSb3dzXzEgPSByZXF1aXJlKFwiLi9jb21wb25lbnRzL0FkZFJvd3NcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjcmVhdGVBZGRSb3dzQ29tcG9uZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBZGRSb3dzXzEuY3JlYXRlQWRkUm93c0NvbXBvbmVudDsgfSB9KTtcbnZhciBDb250ZXh0TWVudV8xID0gcmVxdWlyZShcIi4vY29tcG9uZW50cy9Db250ZXh0TWVudVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNyZWF0ZUNvbnRleHRNZW51Q29tcG9uZW50XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBDb250ZXh0TWVudV8xLmNyZWF0ZUNvbnRleHRNZW51Q29tcG9uZW50OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVuZGVyQ29udGV4dE1lbnVJdGVtXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBDb250ZXh0TWVudV8xLmRlZmF1bHRSZW5kZXJJdGVtOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVuZGVyQ29udGV4dE1lbnVJdGVtIiwiY3JlYXRlQ29udGV4dE1lbnVDb21wb25lbnQiLCJjcmVhdGVBZGRSb3dzQ29tcG9uZW50Iiwia2V5Q29sdW1uIiwiaXNvRGF0ZUNvbHVtbiIsImRhdGVDb2x1bW4iLCJwZXJjZW50Q29sdW1uIiwiaW50Q29sdW1uIiwiZmxvYXRDb2x1bW4iLCJjaGVja2JveENvbHVtbiIsImNyZWF0ZVRleHRDb2x1bW4iLCJ0ZXh0Q29sdW1uIiwiRGF0YVNoZWV0R3JpZCIsIkR5bmFtaWNEYXRhU2hlZXRHcmlkIiwiRGF0YVNoZWV0R3JpZF8xIiwicmVxdWlyZSIsIlN0YXRpY0RhdGFTaGVldEdyaWRfMSIsIlN0YXRpY0RhdGFTaGVldEdyaWQiLCJ0ZXh0Q29sdW1uXzEiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiY2hlY2tib3hDb2x1bW5fMSIsImZsb2F0Q29sdW1uXzEiLCJpbnRDb2x1bW5fMSIsInBlcmNlbnRDb2x1bW5fMSIsImRhdGVDb2x1bW5fMSIsImlzb0RhdGVDb2x1bW5fMSIsImtleUNvbHVtbl8xIiwiQWRkUm93c18xIiwiQ29udGV4dE1lbnVfMSIsImRlZmF1bHRSZW5kZXJJdGVtIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/utils/copyPasting.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/utils/copyPasting.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isPrintableUnicode = exports.encodeHtml = exports.parseTextPlainData = exports.parseTextHtmlData = void 0;\nconst domParser_1 = __webpack_require__(/*! ./domParser */ \"(ssr)/./node_modules/react-datasheet-grid/dist/utils/domParser.js\");\nconst parseTextHtmlData = (data)=>{\n    var _a, _b;\n    const doc = (0, domParser_1.parseDom)(data.replace(/<br\\/?>/g, \"\\n\"));\n    const table = doc.getElementsByTagName(\"table\")[0];\n    if (table) {\n        const rows = [];\n        for(let i = 0; i < table.rows.length; i++){\n            const row = [];\n            rows.push(row);\n            for(let j = 0; j < table.rows[i].cells.length; j++){\n                row.push((_a = table.rows[i].cells[j].textContent) !== null && _a !== void 0 ? _a : \"\");\n            }\n        }\n        return rows;\n    }\n    const span = doc.getElementsByTagName(\"span\")[0];\n    if (span) {\n        return [\n            [\n                (_b = span.textContent) !== null && _b !== void 0 ? _b : \"\"\n            ]\n        ];\n    }\n    return [\n        [\n            \"\"\n        ]\n    ];\n};\nexports.parseTextHtmlData = parseTextHtmlData;\nconst parseTextPlainData = (data)=>{\n    const cleanData = data.replace(/\\r|\\n$/g, \"\");\n    const output = [\n        []\n    ];\n    let cursor = 0;\n    let startCell = 0;\n    let quoted = false;\n    let lastRowIndex = 0;\n    const saveCell = ()=>{\n        let str = cleanData.slice(startCell, cursor);\n        if (quoted && str[str.length - 1] === '\"' && str.includes(\"\\n\")) {\n            str = str.slice(1, str.length - 1).replace(/\"\"/g, '\"');\n        }\n        if (quoted && str[str.length - 1] !== '\"') {\n            str.split(\"\\n\").forEach((cell, i, { length })=>{\n                output[lastRowIndex].push(cell);\n                if (i < length - 1) {\n                    output.push([]);\n                    lastRowIndex++;\n                }\n            });\n        } else {\n            output[lastRowIndex].push(str);\n        }\n    };\n    while(cursor < cleanData.length){\n        if (quoted && cleanData[cursor] === '\"' && ![\n            undefined,\n            \"\t\",\n            '\"'\n        ].includes(cleanData[cursor + 1])) {\n            quoted = false;\n        }\n        if (quoted && cleanData[cursor] === '\"' && cleanData[cursor + 1] === '\"') {\n            cursor++;\n        }\n        if (cursor === startCell && cleanData[cursor] === '\"') {\n            quoted = true;\n        }\n        if (cleanData[cursor] === \"\t\") {\n            saveCell();\n            startCell = cursor + 1;\n            quoted = false;\n        }\n        if (cleanData[cursor] === \"\\n\" && !quoted) {\n            saveCell();\n            output.push([]);\n            startCell = cursor + 1;\n            lastRowIndex++;\n        }\n        cursor++;\n    }\n    saveCell();\n    return output;\n};\nexports.parseTextPlainData = parseTextPlainData;\nconst encodeHtml = (str)=>{\n    return str.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n};\nexports.encodeHtml = encodeHtml;\nconst isPrintableUnicode = (str)=>{\n    return str.match(/^[^\\x00-\\x20\\x7F-\\x9F]$/) !== null;\n};\nexports.isPrintableUnicode = isPrintableUnicode; //# sourceMappingURL=copyPasting.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/utils/copyPasting.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/utils/domParser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/utils/domParser.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.parseDom = void 0;\nconst parser = typeof DOMParser !== \"undefined\" ? new DOMParser() : {\n    parseFromString: ()=>null\n};\nconst parseDom = (html)=>{\n    return parser.parseFromString(html, \"text/html\");\n};\nexports.parseDom = parseDom; //# sourceMappingURL=domParser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC91dGlscy9kb21QYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELGdCQUFnQixHQUFHLEtBQUs7QUFDeEIsTUFBTUcsU0FBUyxPQUFPQyxjQUFjLGNBQzlCLElBQUlBLGNBQ0o7SUFBRUMsaUJBQWlCLElBQU07QUFBSztBQUNwQyxNQUFNSCxXQUFXLENBQUNJO0lBQ2QsT0FBT0gsT0FBT0UsZUFBZSxDQUFDQyxNQUFNO0FBQ3hDO0FBQ0FOLGdCQUFnQixHQUFHRSxVQUNuQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvdXRpbHMvZG9tUGFyc2VyLmpzP2MwMTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhcnNlRG9tID0gdm9pZCAwO1xuY29uc3QgcGFyc2VyID0gdHlwZW9mIERPTVBhcnNlciAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IG5ldyBET01QYXJzZXIoKVxuICAgIDogeyBwYXJzZUZyb21TdHJpbmc6ICgpID0+IG51bGwgfTtcbmNvbnN0IHBhcnNlRG9tID0gKGh0bWwpID0+IHtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhodG1sLCAndGV4dC9odG1sJyk7XG59O1xuZXhwb3J0cy5wYXJzZURvbSA9IHBhcnNlRG9tO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9tUGFyc2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInBhcnNlRG9tIiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiaHRtbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/utils/domParser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/utils/tab.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/utils/tab.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getAllTabbableElements = void 0;\nconst getAllTabbableElements = ()=>Array.from(document.querySelectorAll(\"*\")).filter((element)=>{\n        return element instanceof HTMLElement && typeof element.tabIndex === \"number\" && element.tabIndex >= 0 && !element.disabled && (!(element instanceof HTMLAnchorElement) || !!element.href || element.getAttribute(\"tabIndex\") !== null) && getComputedStyle(element).visibility !== \"collapse\";\n    });\nexports.getAllTabbableElements = getAllTabbableElements; //# sourceMappingURL=tab.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC91dGlscy90YWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDhCQUE4QixHQUFHLEtBQUs7QUFDdEMsTUFBTUUseUJBQXlCLElBQU1DLE1BQU1DLElBQUksQ0FBQ0MsU0FBU0MsZ0JBQWdCLENBQUMsTUFBTUMsTUFBTSxDQUFDLENBQUNDO1FBQ3BGLE9BQVFBLG1CQUFtQkMsZUFDdkIsT0FBT0QsUUFBUUUsUUFBUSxLQUFLLFlBQzVCRixRQUFRRSxRQUFRLElBQUksS0FDcEIsQ0FBQ0YsUUFBUUcsUUFBUSxJQUNoQixFQUFFSCxDQUFBQSxtQkFBbUJJLGlCQUFnQixLQUNsQyxDQUFDLENBQUNKLFFBQVFLLElBQUksSUFDZEwsUUFBUU0sWUFBWSxDQUFDLGdCQUFnQixJQUFHLEtBQzVDQyxpQkFBaUJQLFNBQVNRLFVBQVUsS0FBSztJQUNqRDtBQUNBaEIsOEJBQThCLEdBQUdFLHdCQUNqQywrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3QvdXRpbHMvdGFiLmpzPzVkNDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldEFsbFRhYmJhYmxlRWxlbWVudHMgPSB2b2lkIDA7XG5jb25zdCBnZXRBbGxUYWJiYWJsZUVsZW1lbnRzID0gKCkgPT4gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcqJykpLmZpbHRlcigoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiAoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50ICYmXG4gICAgICAgIHR5cGVvZiBlbGVtZW50LnRhYkluZGV4ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICBlbGVtZW50LnRhYkluZGV4ID49IDAgJiZcbiAgICAgICAgIWVsZW1lbnQuZGlzYWJsZWQgJiZcbiAgICAgICAgKCEoZWxlbWVudCBpbnN0YW5jZW9mIEhUTUxBbmNob3JFbGVtZW50KSB8fFxuICAgICAgICAgICAgISFlbGVtZW50LmhyZWYgfHxcbiAgICAgICAgICAgIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCd0YWJJbmRleCcpICE9PSBudWxsKSAmJlxuICAgICAgICBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnZpc2liaWxpdHkgIT09ICdjb2xsYXBzZScpO1xufSk7XG5leHBvcnRzLmdldEFsbFRhYmJhYmxlRWxlbWVudHMgPSBnZXRBbGxUYWJiYWJsZUVsZW1lbnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFiLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEFsbFRhYmJhYmxlRWxlbWVudHMiLCJBcnJheSIsImZyb20iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaWx0ZXIiLCJlbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJ0YWJJbmRleCIsImRpc2FibGVkIiwiSFRNTEFuY2hvckVsZW1lbnQiLCJocmVmIiwiZ2V0QXR0cmlidXRlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInZpc2liaWxpdHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/utils/tab.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/utils/typeCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/utils/typeCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getSelectionWithId = exports.getSelection = exports.getCellWithId = exports.getCell = void 0;\nconst getCell = (value, colMax, rowMax, columns)=>{\n    if (value === null || !colMax || !rowMax) {\n        return null;\n    }\n    if (typeof value !== \"object\") {\n        throw new Error(\"Value must be an object or null\");\n    }\n    const colIndex = columns.findIndex((column)=>column.id === value.col);\n    const cell = {\n        col: Math.max(0, Math.min(colMax - 1, colIndex === -1 ? Number(value.col) : colIndex - 1)),\n        row: Math.max(0, Math.min(rowMax - 1, Number(value.row)))\n    };\n    if (isNaN(cell.col) || isNaN(cell.row)) {\n        throw new Error(\"col or cell are not valid positive numbers\");\n    }\n    return cell;\n};\nexports.getCell = getCell;\nconst getCellWithId = (cell, columns)=>{\n    var _a;\n    return cell ? {\n        col: cell.col,\n        row: cell.row,\n        colId: (_a = columns[cell.col + 1]) === null || _a === void 0 ? void 0 : _a.id\n    } : null;\n};\nexports.getCellWithId = getCellWithId;\nconst getSelection = (value, colMax, rowMax, columns)=>{\n    if (value === null || !colMax || !rowMax) {\n        return null;\n    }\n    if (typeof value !== \"object\") {\n        throw new Error(\"Value must be an object or null\");\n    }\n    const selection = {\n        min: (0, exports.getCell)(value.min, colMax, rowMax, columns),\n        max: (0, exports.getCell)(value.max, colMax, rowMax, columns)\n    };\n    if (!selection.min || !selection.max) {\n        throw new Error(\"min and max must be defined\");\n    }\n    return selection;\n};\nexports.getSelection = getSelection;\nconst getSelectionWithId = (selection, columns)=>selection ? {\n        min: (0, exports.getCellWithId)(selection.min, columns),\n        max: (0, exports.getCellWithId)(selection.max, columns)\n    } : null;\nexports.getSelectionWithId = getSelectionWithId; //# sourceMappingURL=typeCheck.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC91dGlscy90eXBlQ2hlY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELDBCQUEwQixHQUFHQSxvQkFBb0IsR0FBR0EscUJBQXFCLEdBQUdBLGVBQWUsR0FBRyxLQUFLO0FBQ25HLE1BQU1LLFVBQVUsQ0FBQ0osT0FBT0ssUUFBUUMsUUFBUUM7SUFDcEMsSUFBSVAsVUFBVSxRQUFRLENBQUNLLFVBQVUsQ0FBQ0MsUUFBUTtRQUN0QyxPQUFPO0lBQ1g7SUFDQSxJQUFJLE9BQU9OLFVBQVUsVUFBVTtRQUMzQixNQUFNLElBQUlRLE1BQU07SUFDcEI7SUFDQSxNQUFNQyxXQUFXRixRQUFRRyxTQUFTLENBQUMsQ0FBQ0MsU0FBV0EsT0FBT0MsRUFBRSxLQUFLWixNQUFNYSxHQUFHO0lBQ3RFLE1BQU1DLE9BQU87UUFDVEQsS0FBS0UsS0FBS0MsR0FBRyxDQUFDLEdBQUdELEtBQUtFLEdBQUcsQ0FBQ1osU0FBUyxHQUFHSSxhQUFhLENBQUMsSUFBSVMsT0FBT2xCLE1BQU1hLEdBQUcsSUFBSUosV0FBVztRQUN2RlUsS0FBS0osS0FBS0MsR0FBRyxDQUFDLEdBQUdELEtBQUtFLEdBQUcsQ0FBQ1gsU0FBUyxHQUFHWSxPQUFPbEIsTUFBTW1CLEdBQUc7SUFDMUQ7SUFDQSxJQUFJQyxNQUFNTixLQUFLRCxHQUFHLEtBQUtPLE1BQU1OLEtBQUtLLEdBQUcsR0FBRztRQUNwQyxNQUFNLElBQUlYLE1BQU07SUFDcEI7SUFDQSxPQUFPTTtBQUNYO0FBQ0FmLGVBQWUsR0FBR0s7QUFDbEIsTUFBTUQsZ0JBQWdCLENBQUNXLE1BQU1QO0lBQ3pCLElBQUljO0lBQ0osT0FBT1AsT0FDRDtRQUNFRCxLQUFLQyxLQUFLRCxHQUFHO1FBQ2JNLEtBQUtMLEtBQUtLLEdBQUc7UUFDYkcsT0FBTyxDQUFDRCxLQUFLZCxPQUFPLENBQUNPLEtBQUtELEdBQUcsR0FBRyxFQUFFLE1BQU0sUUFBUVEsT0FBTyxLQUFLLElBQUksS0FBSyxJQUFJQSxHQUFHVCxFQUFFO0lBQ2xGLElBQ0U7QUFDVjtBQUNBYixxQkFBcUIsR0FBR0k7QUFDeEIsTUFBTUQsZUFBZSxDQUFDRixPQUFPSyxRQUFRQyxRQUFRQztJQUN6QyxJQUFJUCxVQUFVLFFBQVEsQ0FBQ0ssVUFBVSxDQUFDQyxRQUFRO1FBQ3RDLE9BQU87SUFDWDtJQUNBLElBQUksT0FBT04sVUFBVSxVQUFVO1FBQzNCLE1BQU0sSUFBSVEsTUFBTTtJQUNwQjtJQUNBLE1BQU1lLFlBQVk7UUFDZE4sS0FBSyxDQUFDLEdBQUdsQixRQUFRSyxPQUFPLEVBQUVKLE1BQU1pQixHQUFHLEVBQUVaLFFBQVFDLFFBQVFDO1FBQ3JEUyxLQUFLLENBQUMsR0FBR2pCLFFBQVFLLE9BQU8sRUFBRUosTUFBTWdCLEdBQUcsRUFBRVgsUUFBUUMsUUFBUUM7SUFDekQ7SUFDQSxJQUFJLENBQUNnQixVQUFVTixHQUFHLElBQUksQ0FBQ00sVUFBVVAsR0FBRyxFQUFFO1FBQ2xDLE1BQU0sSUFBSVIsTUFBTTtJQUNwQjtJQUNBLE9BQU9lO0FBQ1g7QUFDQXhCLG9CQUFvQixHQUFHRztBQUN2QixNQUFNRCxxQkFBcUIsQ0FBQ3NCLFdBQVdoQixVQUFZZ0IsWUFDN0M7UUFDRU4sS0FBSyxDQUFDLEdBQUdsQixRQUFRSSxhQUFhLEVBQUVvQixVQUFVTixHQUFHLEVBQUVWO1FBQy9DUyxLQUFLLENBQUMsR0FBR2pCLFFBQVFJLGFBQWEsRUFBRW9CLFVBQVVQLEdBQUcsRUFBRVQ7SUFDbkQsSUFDRTtBQUNOUiwwQkFBMEIsR0FBR0Usb0JBQzdCLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3dvcmxkcy1kYXNoYm9hcmQvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC91dGlscy90eXBlQ2hlY2suanM/ZDQzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0U2VsZWN0aW9uV2l0aElkID0gZXhwb3J0cy5nZXRTZWxlY3Rpb24gPSBleHBvcnRzLmdldENlbGxXaXRoSWQgPSBleHBvcnRzLmdldENlbGwgPSB2b2lkIDA7XG5jb25zdCBnZXRDZWxsID0gKHZhbHVlLCBjb2xNYXgsIHJvd01heCwgY29sdW1ucykgPT4ge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCAhY29sTWF4IHx8ICFyb3dNYXgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgbXVzdCBiZSBhbiBvYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICBjb25zdCBjb2xJbmRleCA9IGNvbHVtbnMuZmluZEluZGV4KChjb2x1bW4pID0+IGNvbHVtbi5pZCA9PT0gdmFsdWUuY29sKTtcbiAgICBjb25zdCBjZWxsID0ge1xuICAgICAgICBjb2w6IE1hdGgubWF4KDAsIE1hdGgubWluKGNvbE1heCAtIDEsIGNvbEluZGV4ID09PSAtMSA/IE51bWJlcih2YWx1ZS5jb2wpIDogY29sSW5kZXggLSAxKSksXG4gICAgICAgIHJvdzogTWF0aC5tYXgoMCwgTWF0aC5taW4ocm93TWF4IC0gMSwgTnVtYmVyKHZhbHVlLnJvdykpKSxcbiAgICB9O1xuICAgIGlmIChpc05hTihjZWxsLmNvbCkgfHwgaXNOYU4oY2VsbC5yb3cpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY29sIG9yIGNlbGwgYXJlIG5vdCB2YWxpZCBwb3NpdGl2ZSBudW1iZXJzJyk7XG4gICAgfVxuICAgIHJldHVybiBjZWxsO1xufTtcbmV4cG9ydHMuZ2V0Q2VsbCA9IGdldENlbGw7XG5jb25zdCBnZXRDZWxsV2l0aElkID0gKGNlbGwsIGNvbHVtbnMpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIGNlbGxcbiAgICAgICAgPyB7XG4gICAgICAgICAgICBjb2w6IGNlbGwuY29sLFxuICAgICAgICAgICAgcm93OiBjZWxsLnJvdyxcbiAgICAgICAgICAgIGNvbElkOiAoX2EgPSBjb2x1bW5zW2NlbGwuY29sICsgMV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZCxcbiAgICAgICAgfVxuICAgICAgICA6IG51bGw7XG59O1xuZXhwb3J0cy5nZXRDZWxsV2l0aElkID0gZ2V0Q2VsbFdpdGhJZDtcbmNvbnN0IGdldFNlbGVjdGlvbiA9ICh2YWx1ZSwgY29sTWF4LCByb3dNYXgsIGNvbHVtbnMpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgIWNvbE1heCB8fCAhcm93TWF4KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1ZhbHVlIG11c3QgYmUgYW4gb2JqZWN0IG9yIG51bGwnKTtcbiAgICB9XG4gICAgY29uc3Qgc2VsZWN0aW9uID0ge1xuICAgICAgICBtaW46ICgwLCBleHBvcnRzLmdldENlbGwpKHZhbHVlLm1pbiwgY29sTWF4LCByb3dNYXgsIGNvbHVtbnMpLFxuICAgICAgICBtYXg6ICgwLCBleHBvcnRzLmdldENlbGwpKHZhbHVlLm1heCwgY29sTWF4LCByb3dNYXgsIGNvbHVtbnMpLFxuICAgIH07XG4gICAgaWYgKCFzZWxlY3Rpb24ubWluIHx8ICFzZWxlY3Rpb24ubWF4KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignbWluIGFuZCBtYXggbXVzdCBiZSBkZWZpbmVkJyk7XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3Rpb247XG59O1xuZXhwb3J0cy5nZXRTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb247XG5jb25zdCBnZXRTZWxlY3Rpb25XaXRoSWQgPSAoc2VsZWN0aW9uLCBjb2x1bW5zKSA9PiBzZWxlY3Rpb25cbiAgICA/IHtcbiAgICAgICAgbWluOiAoMCwgZXhwb3J0cy5nZXRDZWxsV2l0aElkKShzZWxlY3Rpb24ubWluLCBjb2x1bW5zKSxcbiAgICAgICAgbWF4OiAoMCwgZXhwb3J0cy5nZXRDZWxsV2l0aElkKShzZWxlY3Rpb24ubWF4LCBjb2x1bW5zKSxcbiAgICB9XG4gICAgOiBudWxsO1xuZXhwb3J0cy5nZXRTZWxlY3Rpb25XaXRoSWQgPSBnZXRTZWxlY3Rpb25XaXRoSWQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlQ2hlY2suanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0U2VsZWN0aW9uV2l0aElkIiwiZ2V0U2VsZWN0aW9uIiwiZ2V0Q2VsbFdpdGhJZCIsImdldENlbGwiLCJjb2xNYXgiLCJyb3dNYXgiLCJjb2x1bW5zIiwiRXJyb3IiLCJjb2xJbmRleCIsImZpbmRJbmRleCIsImNvbHVtbiIsImlkIiwiY29sIiwiY2VsbCIsIk1hdGgiLCJtYXgiLCJtaW4iLCJOdW1iZXIiLCJyb3ciLCJpc05hTiIsIl9hIiwiY29sSWQiLCJzZWxlY3Rpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/utils/typeCheck.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-datasheet-grid/dist/style.css":
/*!**********************************************************!*\
  !*** ./node_modules/react-datasheet-grid/dist/style.css ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"1ad8ee6516ab\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3QtZGF0YXNoZWV0LWdyaWQvZGlzdC9zdHlsZS5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93b3JsZHMtZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRhdGFzaGVldC1ncmlkL2Rpc3Qvc3R5bGUuY3NzP2MwZjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIxYWQ4ZWU2NTE2YWJcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-datasheet-grid/dist/style.css\n");

/***/ })

};
;