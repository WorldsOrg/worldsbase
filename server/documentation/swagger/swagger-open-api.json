{
  "swagger": "2.0",
  "info": {
    "title": "Worlds Game Services API",
    "description": "WGS Documentation",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "tables",
      "description": "Operations related to table management"
    },
    {
      "name": "wallets",
      "description": "Wallet endpoints"
    },
    {
      "name": "onChain",
      "description": "onChain endpoints"
    }
  ],
  "host": "localhost:8080",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/table/createTable": {
      "post": {
        "tags": ["tables"],
        "description": "Create a table.",
        "parameters": [
          {
            "in": "body",
            "name": "tableSchema",
            "description": "Schema definition for the new table.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TableSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/deleteTable/{tableName}": {
      "delete": {
        "tags": ["tables"],
        "description": "Delete a table by tableName column.",
        "parameters": [
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "description": "The name of the table to delete.",
            "type": "string"
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid table name."
          },
          "200": {
            "description": "[]"
          }
        }
      }
    },
    "/table/updateTableName": {
      "put": {
        "tags": ["tables"],
        "description": "",
        "parameters": [
          {
            "in": "body",
            "name": "updateTableNameSchema",
            "description": "Schema definition for the update table name request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateTableNameSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/addColumn": {
      "post": {
        "tags": ["tables"],
        "description": "Create a new column.",
        "parameters": [
          {
            "in": "body",
            "name": "addColumnSchema",
            "description": "Schema definition for the addColumn request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddColumnSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/deleteColumn": {
      "delete": {
        "tags": ["tables"],
        "description": "",
        "parameters": [
          {
            "in": "body",
            "name": "deleteColumnSchema",
            "description": "Schema definition for the deleteColumn request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteColumnSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          }
        }

      }
    },
    "/table/renameColumn": {
      "put": {
        "tags": ["tables"],
        "description": "",
        "parameters": [
          {
            "in": "body",
            "name": "renameColumnSchema",
            "description": "Schema definition for the renameColumn request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RenameColumnSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/getColumns/{tableName}": {
      "get": {
        "tags": ["tables"],
        "description": "Retrieves a list of columns for a specified table, providing details such as column names, data types, and any constraints associated with each column.",
        "parameters": [
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "description": "The name of the table whose columns are being retrieved.",
            "type": "string"
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }

        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "column_name": {
                    "type": "string",
                    "description": "The name of the column."
                  },
                  "data_type": {
                    "type": "string",
                    "description": "The data type of the column."
                  },
                  "is_primary_key": {
                    "type": "boolean",
                    "description": "Indicates if the column is primary key or not."
                  }
                }
              }
            }
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/getTables/{schema}": {
      "get": {
        "tags": ["tables"],
        "description": "Fetches a list of tables within a specified schema.",
        "parameters": [
          {
            "name": "schema",
            "in": "path",
            "required": true,
            "description": "The schema name to retrieve tables from.",
            "type": "string"
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "table_name": {
                    "type": "string",
                    "description": "Table name."
                  }
                }
              }
            }
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/getTable/{tableName}": {
      "get": {
        "tags": ["tables"],
        "description": "Retrieves rows of a specified table.",
        "parameters": [
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "description": "The name of the table to retrieve information for.",
            "type": "string"
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "401": {
            "description": "API key is required."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/table/getTableValue/{tableName}/{columnName}/{columnValue}": {
      "get": {
        "tags": ["tables"],
        "description": "",
        "parameters": [
          {
            "name": "tableName",
            "in": "path",
            "required": true,
            "description": "Retrieves rows of a specified table filtered by a column value.",
            "type": "string"
          },
          {
            "name": "columnName",
            "in": "path",
            "required": true,
            "description": "The name of the column to filter by.",
            "type": "string"
          },
          {
            "name": "columnValue",
            "in": "path",
            "required": true,
            "description": "The value of a column to filter against",
            "type": "string"
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "401": {
            "description": "API key is required."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/table/joinTables": {
      "post": {
        "tags": ["tables"],
        "description": "Joins two tables and returns a result.",
        "parameters": [
          {
            "in": "body",
            "name": "joinTablesRequest",
            "description": "Join Tables request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/joinTablesSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "400": {
            "description": "Invalid input for joining columns."
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/executeSelectQuery": {
      "post": {
        "tags": ["tables"],
        "description": "Executes a custom SQL SELECT query against the database.",
        "parameters": [
          {
            "in": "body",
            "name": "selectQueryRequest",
            "description": "The SQL SELECT query to be executed.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/executeSelectQuerySchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid query: only SELECT queries are allowed."
          },
          "401": {
            "description": "API key is required."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/table/insertData": {
      "post": {
        "tags": ["tables"],
        "description": "Inserts data into a specified table. This endpoint allows for adding new records to a table.",
        "parameters": [
          {
            "in": "body",
            "name": "insertDataRequest",
            "description": "The data to insert into the table, including the table name and the records.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsertDataSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/table/deleteData": {
      "delete": {
        "tags": ["tables"],
        "description": "Deletes rows from a specified table based on a given condition.",
        "parameters": [
          {
            "in": "body",
            "name": "deletionCriteria",
            "description": "Criteria for selecting the data to delete, including the table name and conditions.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteDataSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "[]"
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/table/updateData": {
      "put": {
        "tags": ["tables"],
        "description": "Updates data in a specified table based on a given condition.",
        "parameters": [
          {
            "in": "body",
            "name": "updateRequest",
            "description": "The details of the update operation, including the table name, data to update, and the condition for row selection.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDataSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "Invalid input."
          },
          "401": {
            "description": "API key is required."
          },
          "500": {
            "description": "Internal server error. Possible causes include a problem with the database connection or an unexpected error during the update process."
          }
        }
      }
    },
    "/wallet/createWallet": {
      "post": {
        "tags": ["wallets"],
        "description": "Creates a new wallet for a specified user. This endpoint associates a unique wallet instance with a user ID, enabling financial transactions within the platform.",
        "parameters": [
          {
            "in": "body",
            "name": "walletCreationRequest",
            "description": "The user ID for whom the wallet is to be created.",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user_id": {
                  "type": "string",
                  "description": "The unique identifier of the user for whom the wallet is being created."
                }
              },
              "required": ["user_id"]
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {
                "wallet_address": {
                  "type": "string",
                  "description": "The address of a wallet."
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          },
          "400": {
            "description": "Error creating wallet"
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    },
    "/onChain/mintNFT": {
      "post": {
        "tags": ["onChain"],
        "description": "Mint NFT.",
        "parameters": [
          {
            "in": "body",
            "name": "mintNFTSchema",
            "description": "Mint NFT request body.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/mintNFTSchema"
            }
          },
          {
            "name": "X-Api-Key",
            "in": "header",
            "description": "x-api-key",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {
                "transaction_id": {
                  "type": "string",
                  "description": "The transaction ID."
                }
              }
            }
          },
          "400": {
            "description": "Invalid input."
          },
          "500": {
            "description": "Error minting to wallet"
          },
          "401": {
            "description": "API key is required."
          }
        }
      }
    }
  },
  "definitions": {
    "TableSchema": {
      "type": "object",
      "properties": {
        "tableName": {
          "type": "string"
        },
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ColumnSchema"
          }
        }
      },
      "required": ["tableName", "columns"]
    },
    "ColumnSchema": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "constraints": {
          "type": "string"
        }
      },
      "required": ["name", "type"]
    },
    "UpdateTableNameSchema": {
      "type": "object",
      "properties": {
        "oldTableName": {
          "type": "string"
        },
        "newTableName": {
          "type": "string"
        }
      },
      "required": ["oldTableName", "newTableName"]
    },
    "AddColumnSchema": {
      "type": "object",
      "properties": {
        "tableName": {
          "type": "string"
        },
        "columnName": {
          "type": "string"
        },
        "columnType": {
          "type": "string"
        }
      },
      "required": ["tableName", "columnName", "columnType"]
    },
    "DeleteColumnSchema": {
      "type": "object",
      "properties": {
        "tableName": {
          "type": "string"
        },
        "columnName": {
          "type": "string"
        }
      },
      "required": ["tableName", "columnName"]
    },
    "RenameColumnSchema": {
      "type": "object",
      "properties": {
        "tableName": {
          "type": "string"
        },
        "oldColumnName": {
          "type": "string"
        },
        "newColumnName": {
          "type": "string"
        }
      },
      "required": ["tableName", "oldColumnName", "newColumnName"]
    },
    "InsertDataSchema": {
      "type": "object",
      "properties": {
        "tableName": {
          "type": "string",
          "description": "Name of the table where data will be inserted."
        },
        "data": {
          "type": "object",
          "items": {
            "type": "object",
            "description": "A single record to insert into the table, represented as an object where each key corresponds to a column name."
          },
          "description": "The array of records to be inserted."
        }
      },
      "required": ["tableName", "data"]
    },
    "DeleteDataSchema": {
      "type": "object",
      "properties": {
        "tableName": {
          "type": "string",
          "description": "The name of the table from which data will be deleted."
        },
        "condition": {
          "type": "string",
          "description": "A condition to specify which rows should be deleted, formatted as a SQL WHERE clause (e.g., 'age > 21')."
        }
      },
      "required": ["tableName", "condition"]
    },
    "UpdateDataSchema": {
      "type": "object",
      "properties": {
        "tableName": {
          "type": "string",
          "description": "The name of the table to be updated."
        },
        "data": {
          "type": "object",
          "additionalProperties": true,
          "description": "An object containing the column names and their new values for the update. Each key in this object corresponds to a column name, and its value to the new data for that column."
        },
        "condition": {
          "type": "string",
          "description": "A condition to specify which rows should be updated, formatted as a SQL WHERE clause (e.g., 'id > 10')."
        }
      },
      "required": ["tableName", "data", "condition"]
    },
    "executeSelectQuerySchema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The SQL SELECT query string."
        }
      },
      "required": ["query"]
    },
    "joinTablesSchema": {
      "type": "object",
      "properties": {
        "tables": {
          "type": "array",
          "description": "The tables to join.",
          "items": {
            "type": "string"
          }
        },
        "joinColumns": {
          "type": "array",
          "description": "The columns to join.",
          "items": {
            "type": "string"
          }
        },
        "joinType": {
          "type": "string",
          "description": "The join type."
        },
        "filter": {
          "type": "string",
          "description": "The filter to apply to the query in a WHERE clause."
        }
      },
      "required": ["tables", "joinColumns", "joinType", "filter"]
    },
    "createWalletSchema": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "description": "The unique identifier of the user for whom the wallet is being created."
        }
      },
      "required": ["user_id"]
    },
    "mintNFTSchema": {
      "type": "object",
      "properties": {
        "wallet_address": {
          "type": "string",
          "description": "The wallet address"
        }
      },
      "required": ["wallet_address"]
    }
  }
}